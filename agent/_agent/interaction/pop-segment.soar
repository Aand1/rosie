sp {interaction*apply*pop-segment
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction.stack <stack>)
   (<o> ^name pop-segment
        ^segment <top-seg>)
   (<stack> ^segment <top-seg>)
   (<top-seg> ^next <next-seg>)
-->
   (<stack> ^segment <top-seg> -
            ^segment <next-seg>)
   (<next-seg> ^prev <top-seg> -)
}

sp {interaction*apply*pop-segment*remove*terminate-segment
   (state <s> ^name interaction
              ^operator.name pop-segment
              ^change-type terminate-segment
              ^top-state.interaction.changes <c>)
   (<c> ^terminate-segment <any>)
-->
   (<c> ^terminate-segment <any> -)
}

sp {interaction*apply*pop-segment*remove*clear-interaction-stack
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.interaction.changes <c>)
   (<o> ^name pop-segment
        ^segment.next.purpose none)
   (<c> ^clear-interaction-stack true)
-->
   (<c> ^clear-interaction-stack true -)
}

sp {interaction*apply*pop-segment*remove*remembered*info
    (state <s> ^name interaction
               ^operator <o>)
    (<o> ^name pop-segment
         ^segment.info.remembered <rem>)
    (<rem> ^object.predicates <preds>
           ^property <prop>
           ^predicate <pred>)
    (<preds> ^<prop> <pred>)
-->
    (<preds> ^<prop> <pred> -)
}
