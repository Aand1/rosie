sp {interaction*apply*pop-segment
   (state <s> ^name interaction
              ^operator <o>
              ^topstate.interaction.stack <stack>)
   (<o> ^name pop-segment
        ^segment <top-seg>)
   (<stack> ^segment <top-seg>)
   (<top-seg> ^next <next-seg>)
-->
   (<stack> ^segment <top-seg> -
            ^segment <next-seg>)
   (<next-seg> ^prev <top-seg> -)
}

sp {interaction*apply*pop-segment*remove*terminate-segment
   (state <s> ^name interaction
              ^operator <o>
              ^topstate.interaction.changes <c>)
   (<o> ^name pop-segment
        ^segment <seg>)
   (<c> ^terminate-segment <seg>)
-->
   (<c> ^terminate-segment <seg> -)
}


sp {interaction*apply*pop-segment*bit-flip
   (state <s> ^name interaction
   	      ^operator.name pop-segment)
-->
   (<s> ^bit flip)
}



# sp {interaction*propose*pop-segment*instructor-dialog
#    (state <s> ^name interaction
#     	    	^topstate.interaction.stack.segment <seg>
#		^
#               ^operator.name complete-interpret-message
#              -^new-segment-info
#               ^current-purpose.satisfaction.dialog-event.type <type>
#               ^instructor-message.type <type>
#               ^topstate.interaction.status <status>)
# -->
#    (<status> ^performed.dialog-event.type <type>)
# } 