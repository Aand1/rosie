sp {interaction*apply*performed-event*remove*performed
   (state <s> ^name interaction
              ^operator <o>
              ^topstate.interaction.status <status>)
   (<o> ^name performed-event
        ^event <event>)
   (<status> ^performed <event>)
-->
   (<status> ^performed <event> -)
}

# If the performed event matches the current satisfaction, then pop
sp {interaction*apply*performed-event*satisfied*purpose*pop
   (state <s> ^name interaction
              ^operator <o>
              ^topstate.interaction <i>)
   (<o> ^name performed-event
        ^event <event>)
   (<i> ^stack.segment.purpose.satisfaction <sat>
        ^changes <changes>)
   (<sat> ^<event-cat> <sat-event>)
   (<event> ^<event-cat> <perf-event>)
   (<sat-event> ^type <event-type>)
   (<perf-event> ^type <event-type>)
   -{(<sat-event> ^{<attr> <> info} <val>)
     (<perf-event> -^<attr> <val>)}
-->
   (<changes> ^terminate-segment true)
}

sp {interaction*apply*performed-event*train-on-object*send*message
   (state <s> ^name interaction
              ^operator <o>
              ^topstate.interaction.stack.segment.purpose.type train-on-object
              ^topstate.interaction.changes <changes>)
   (<o> ^name performed-event
        ^event.learning-event.type object)
-->
   (<changes> ^outgoing-message.type report-successful-training)
}

sp {interaction*apply*performed-event*teach-relation*send*message
   (state <s> ^name interaction
              ^operator <o>
              ^topstate.interaction.stack.segment.purpose.type teach-relation
              ^topstate.interaction.changes <changes>)
   (<o> ^name performed-event
        ^event.learning-event.type relation)
-->
   (<changes> ^outgoing-message.type report-successful-training)
}

sp {interaction*apply*performed-event*learn-predicate-info*send*message
   (state <s> ^name interaction
              ^operator <o>
              ^topstate.interaction.stack.segment.purpose.type learn-predicate-info
              ^topstate.interaction.changes <changes>)
   (<o> ^name performed-event
        ^event.learning-event.type predicate)
-->
   (<changes> ^outgoing-message.type report-successful-training)
}