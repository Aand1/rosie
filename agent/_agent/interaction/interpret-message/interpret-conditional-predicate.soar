###################################################################
#
# interpret-conditional-predicate
#   Occurs when 
#
###################################################################

############################3
## DONE TEACHING
sp {interpret-message*propose*interpret-done-teaching
   (state <s> ^name interpret-message
            # -^top-state.dialog-context.attend
              -^top-state.dialog-context.learn-link
              ^top-state.dialog-context.type game-learning
              #^top-state.dialog-context.learning true #need???
              ^instructor-message <msg>)
   (<msg> ^message-type finished
          -^interaction-status.failure
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-done-teaching
        ^message <msg>)
}


sp {interpret-message*apply*interpret-done-teaching*create*segment*finished-game-teaching
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-done-teaching
        ^message <msg>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type finished-game-teaching
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}


#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-conditional-predicate
   (state <s> ^name interpret-message
              ^top-state.dialog-context.type game-learning
              ^instructor-message <msg>)
   (<msg> ^message-type conditional
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-conditional-predicate
        ^message <msg>)
}

######
# OPERATOR ELABORATIONS
######

# Elaborate useful information from the message onto the operator


#####
# MESSAGE CATEGORIZATION
#####

sp {interpret-message*elaborate*interpret-conditional-predicate*purpose*learn-action-predicate-definition
   (state <s> ^name interpret-message
              ^top-state.dialog-context.type game-learning
              -^top-state.dialog-context.learning-predicate
              ^operator <o> +)
   (<o> ^name interpret-conditional-predicate)
-->
   (<o> ^purpose learn-action-predicate-definition)
}

sp {interpret-message*elaborate*interpret-conditional-predicate*purpose*learn-predicate-definition
   (state <s> ^name interpret-message
              ^top-state.dialog-context.learning-predicate
              ^operator <o> +)
   (<o> ^name interpret-conditional-predicate)
-->
   (<o> ^purpose learn-predicate-definition)
}
   
#####
# OPERATOR APPLICATION
#####


###########################
# Purpose: learn-predicate-definition
sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-property-predicate
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-predicate-definition
        ^message <msg>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-property-predicate
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}
###########################
# Purpose: learn-action-predicate-defintion
sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-action-predicate-definition
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-action-predicate-definition
        ^message <msg>)
   (<msg> -^then-subclause.action.handle lose)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-action-predicate
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-action-predicate-definition*store-sentence
   (state <s> ^name interpret-message
              ^top-state <ts>
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-action-predicate-definition
        ^message <msg>)
   (<msg> -^then-subclause.action.handle lose)
   (<ts> ^current-sentence <se> -^stored-sentence ^game-scripting true ^dialog-context <dc>)
   (<se> ^next <n1>  ^complete-sentence <cs>)#^sentence-number <sn>
-->
    (<dc> ^stored-sentence <st>)
    (<st> ^complete-sentence <cs> ^next (deep-copy <n1>) ^spelling *)#^sentence-number (+ 3 <sn>) 
}
   

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-failure-predicate
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc>
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-action-predicate-definition
        ^message <msg>)
    (<dc> -^needs-failure-setup ^type game-learning ^learn-link)
   (<msg> ^then-subclause.action.handle lose)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-failure-predicate
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}


sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-action-predicate-definition**sotre-setup-failure
   (state <s> ^name interpret-message
              ^top-state.interaction.changes <changes>
              ^top-state.dialog-context <dc>
              ^top-state <ts>
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-action-predicate-definition
        ^message <msg>)
    (<dc> ^needs-failure-setup ^type game-learning ^learn-link)
   (<msg> ^then-subclause.action.handle lose)
   (<ts> ^current-sentence <se> -^stored-sentence ^game-scripting true)
   (<se> ^next <n1>  ^complete-sentence <cs>)#^sentence-number <sn>
-->
    (<dc> ^stored-sentence <st>)
    (<st> ^complete-sentence <cs> ^next (deep-copy <n1>) ^spelling *)#^sentence-number (+ 3 <sn>) 
}

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-action-predicate-definition*setup-failure
   (state <s> ^name interpret-message
              ^top-state.interaction.changes <changes>
              ^top-state.dialog-context <dc>
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-action-predicate-definition
        ^message <msg>)
    (<dc> ^needs-failure-setup ^type game-learning ^learn-link)
   (<msg> ^then-subclause.action.handle lose)
-->
    (<dc> ^parsed-failure <msg>)
    (<msg> ^interpreted true)
   (<changes> ^outgoing-message <msg2>)
   (<msg2> ^type simple-message
              ^message-type setup-failure)
}


sp {interpret-message*apply*interpret-conditional-predicate*default-name
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> #^name interpret-conditional-predicate
       # ^purpose learn-action-predicate-definition
        ^message <msg>)
   (<dc> -^learn-link -^store-learn-link ^structure.actions <a> ^type game-learning)
   (<msg> ^action)
-->
    (<dc> ^learn-link <ll>)
    (<a> ^action <ll>)
    (<ll> ^handle (make-constant-symbol action-default) 
         ^item-type predicate ^predicate-structure <p>
       ^type action ^word-structure <n>)
  (<n> ^referent <ll> ^spelling default)
}
sp {interpret-message*apply*interpret-conditional-predicate*default-name*then-cluase
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> #^name interpret-conditional-predicate
       # ^purpose learn-action-predicate-definition
        ^message <msg>)
   (<dc> -^learn-link -^store-learn-link ^structure.actions <a> ^type game-learning)
   (<msg> ^then-subclause.action <act>)
   (<act> -^handle lose)
-->
    (<dc> ^learn-link <ll>)
    (<a> ^action <ll>)
    (<ll> ^handle (make-constant-symbol action-default) 
         ^item-type predicate ^predicate-structure <p>
       ^type action ^word-structure <n>)
  (<n> ^referent <ll> ^spelling default)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name*goal
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> #^name interpret-conditional-predicate
       # ^purpose learn-action-predicate-definition
        ^message <msg>)
   (<dc> -^learn-link -^store-learn-link ^structure.goals <a> ^type game-learning)
   (<msg> ^arg1.handle goal)
-->
    (<dc> ^learn-link <ll> ^needs-goal-setup true)
    (<a> ^goal <ll>)
    (<ll> ^handle (make-constant-symbol goal-default) 
         ^item-type predicate ^predicate-structure <p>
       ^type goal ^word-structure <n>)
  (<n> ^referent <ll> ^spelling default)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name*failure
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> #^name interpret-conditional-predicate
       # ^purpose learn-action-predicate-definition
        ^message <msg>)
   (<dc> -^learn-link -^store-learn-link ^structure.failures <a> ^type game-learning)
   (<msg> ^then-subclause.action.handle lose)
-->
    (<dc> ^learn-link <ll> ^needs-failure-setup true)
    (<a> ^failure <ll>)
    (<ll> ^handle (make-constant-symbol failure-default) 
         ^item-type predicate ^predicate-structure <p>
       ^type failure ^word-structure <n>)
  (<n> ^referent <ll> ^spelling default)
}



sp {interpret-message*apply*interpret-conditional-predicate*default-name*goal-demo
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> #^name interpret-conditional-predicate
       # ^purpose learn-action-predicate-definition
        ^message <msg>)
   (<dc> -^learn-link -^store-learn-link ^structure.goals <a> ^type game-learning)
   (<msg> ^arg1 <arg1>)
   (<arg1> ^handle state1 ^predicates.property current)
-->
    (<dc> ^learn-link <ll>)
    (<a> ^goal <ll>)
    (<ll> ^handle (make-constant-symbol goal-default) 
         ^item-type predicate ^predicate-structure <p>
       ^type goal ^word-structure <n>)
  (<n> ^referent <ll> ^spelling default)
}



sp {interpret-message*apply*interpret-conditional-predicate*copy-old-link
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-predicate-definition
        ^message <msg>)
   (<dc> ^learn-link <ll>)
   (<ll> ^type << action goal failure >>)
-->
    (<dc> ^store-learn-link <ll>)
    (<dc> ^learn-link <ll> -)
}

#link between grammar and multi terms needs to be better defined
sp {interpret-message*apply*interpret-conditional-predicate*create*context-links
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-predicate-definition
        ^message <msg>)
   (<dc> ^learning-predicate <lp>)
   (<msg> ^then-subclause <tc>)
   (<tc> ^arg1 <obj> ^predicate <pred> -^arg2)
   (<pred> ^handle <name> -^2 ^property <p>)
   (<lp> ^name <name>)
  # (<dc> -^learn-link.handle <name>)
-->
   (<dc> ^learn-link <ll>
         ^input-object-1 <obj>)
   (<ll> ^handle <name> ^item-type predicate ^property <p>)
}
#should make constant cast here? for handle name?
#(N10271 ^handle clear ^item-type predicate ^property @P90389)
#      (@P90389 ^handle property ^type visual)

sp {interpret-message*apply*interpret-conditional-predicate*create*context-links*2args
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-predicate-definition
        ^message <msg>)
   (<dc> ^learning-predicate <lp>)
   (<msg> ^then-subclause <tc>)
   (<tc> ^arg1 <obj> ^predicate <pred> -^arg2)
   (<pred> ^handle <name> ^2 <obj2>)
   (<lp> ^name <name>)
   (<dc> -^learn-link.handle <name>)
-->
   (<dc> ^learn-link <ll>#<pred>
         ^input-object-1 <obj>
         ^input-object-2 <obj2>)
   (<ll> ^handle <name> ^item-type predicate)# ^property <p>) #TODO need?
}  


#TODO need this rule?
sp {interpret-message*apply*interpret-conditional-predicate*learn-goal-definition*terminate*segment
   (state <s> ^name interpret-message
              ^operator <o>
	      		^current-purpose.satisfaction.dialog-event <de>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-predicate-definition)
   (<de> ^type goal-description
         ^originator instructor)
-->
   (<s> ^terminate-segment true)
}

#TODO need this rule?
sp {interpret-message*apply*interpret-conditional-predicate*remove*unknown-word*failure
   (state <s> ^name interpret-message
              ^operator <o>
              ^top-state.interaction.status <status>)
   (<o> ^name interpret-conditional-predicate
        ^predicate.spelling <word>)
   (<status> ^failure <f>)
   (<f> ^type unknown-word
        ^word <word>)
-->
   (<status> ^failure <f> -)
}
