###################################################################
#
# interpret-conditional-predicate
#   Occurs when 
#
###################################################################

############################3
## DONE TEACHING
sp {interpret-message*propose*interpret-conditional-predicate
   (state <s> ^name interpret-message
              ^top-state.dialog-context.type game-learning
              ^top-state.dialog-context.learning true
              ^instructor-message <msg>)
   (<msg> ^message-type done-teaching
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-done-teaching
        ^message <msg>)
}

sp {interpret-message*apply*interpret-done-teaching*create*segment*finished-game-teaching
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-done-teaching
        ^message <msg>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type finished-game-teaching
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}


#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-conditional-predicate
   (state <s> ^name interpret-message
              ^top-state.dialog-context.type game-learning
              ^instructor-message <msg>)
   (<msg> ^message-type conditional
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-conditional-predicate
        ^message <msg>)
}

######
# OPERATOR ELABORATIONS
######

# Elaborate useful information from the message onto the operator


#####
# MESSAGE CATEGORIZATION
#####

sp {interpret-message*elaborate*interpret-conditional-predicate*purpose*learn-action-predicate-definition
   (state <s> ^name interpret-message
              ^top-state.dialog-context.type game-learning
              -^top-state.dialog-context.learning-predicate
              ^operator <o> +)
   (<o> ^name interpret-conditional-predicate)
-->
   (<o> ^purpose learn-action-predicate-definition)
}

sp {interpret-message*elaborate*interpret-conditional-predicate*purpose*learn-predicate-definition
   (state <s> ^name interpret-message
              ^top-state.dialog-context.learning-predicate
              ^operator <o> +)
   (<o> ^name interpret-conditional-predicate)
-->
   (<o> ^purpose learn-predicate-definition)
}
   
#####
# OPERATOR APPLICATION
#####


###########################
# Purpose: learn-predicate-definition
sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-property-predicate
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-predicate-definition
        ^message <msg>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-property-predicate
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}
###########################
# Purpose: learn-action-predicate-defintion
sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-action-predicate-definition
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-action-predicate-definition
        ^message <msg>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-action-predicate
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type game)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*context-links
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-predicate-definition
        ^message <msg>)
   (<dc> ^learning-predicate <lp>)
   (<msg> ^then-subclause <tc>)
   (<tc> ^arg1 <obj> ^predicate <pred> -^arg2)
   (<pred> ^handle <name> -^2)
   (<lp> ^name <name>)
-->
   (<dc> ^learn-link <pred>
         ^input-object-1 <obj>)
}
sp {interpret-message*apply*interpret-conditional-predicate*create*context-links*2args
   (state <s> ^name interpret-message
              ^top-state.dialog-context <dc> 
              ^operator <o>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-predicate-definition
        ^message <msg>)
   (<dc> ^learning-predicate <lp>)
   (<msg> ^then-subclause <tc>)
   (<tc> ^arg1 <obj> ^predicate <pred> -^arg2)
   (<pred> ^handle <name> ^2 <obj2>)
   (<lp> ^name <name>)
-->
   (<dc> ^learn-link <pred>
         ^input-object-1 <obj>
         ^input-object-2 <obj2>)
}  


#TODO need this rule?
sp {interpret-message*apply*interpret-conditional-predicate*learn-goal-definition*terminate*segment
   (state <s> ^name interpret-message
              ^operator <o>
	      		^current-purpose.satisfaction.dialog-event <de>)
   (<o> ^name interpret-conditional-predicate
        ^purpose learn-predicate-definition)
   (<de> ^type goal-description
         ^originator instructor)
-->
   (<s> ^terminate-segment true)
}

#TODO need this rule?
sp {interpret-message*apply*interpret-conditional-predicate*remove*unknown-word*failure
   (state <s> ^name interpret-message
              ^operator <o>
              ^top-state.interaction.status <status>)
   (<o> ^name interpret-conditional-predicate
        ^predicate.spelling <word>)
   (<status> ^failure <f>)
   (<f> ^type unknown-word
        ^word <word>)
-->
   (<status> ^failure <f> -)
}
