sp {generate-action-operator*propose*copy-command-arg
   (state <s> ^name generate-action-operator
              ^command-message <msg>
              ^action-operator <op>
             -^copied-arg.<arg-name> <arg>)
   (<msg> ^{ <arg-name> << arg1 arg2 arg3 arg4 arg5 arg6 relation predicate >> } <arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name copy-command-arg
        ^command-arg-name <arg-name>
        ^arg-value <arg>)
}

###################
# arg-type object

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*object
   (state <s> ^name generate-action-operator
              ^operator <o> +
              ^top-state <top>)
   (<o> ^name copy-command-arg
        ^command-arg-name <arg-name>
        ^arg-value <obj>)
   (<obj> ^item-type object)
-->
   (<o> ^arg-type object
        ^arg-name <arg-name>)
}

sp {generate-action-operator*apply*copy-command-arg*copy*object*arg
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name copy-command-arg
        ^command-arg-name <cmd-arg-name>
        ^arg-name <arg-name>
        ^arg-type object
        ^arg-value <object>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type object
          ^id <object>)
   (<s> ^copied-arg.<cmd-arg-name> <object>)
}

#sp {generate-action-operator*apply*copy-command-arg*copy*object*arg*current
#   (state <s> ^name generate-action-operator
#              ^operator <o>
#              ^action-operator <op>)
#   (<o> ^name copy-command-arg
#        ^command-arg-name <cmd-arg-name>
#        ^arg-name <arg-name>
#        ^arg-type object
#        ^arg-value <object>)
#-->
#   (<op> ^<arg-name> <arg>)
#   (<arg> ^arg-type object
#          ^id <object>)
#   (<s> ^copied-arg.<cmd-arg-name> <object>)
#}

sp {generate-action-operator*apply*copy-command-arg*object*store*procedural
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-id.procedural <proc>)
   (<o> ^name copy-command-arg
        ^arg-name <arg-name>
        ^arg-type object
        ^arg-value <arg>)
   (<proc> -^<arg-name>)
-->
   (<proc> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object 
              ^arg-status real
              ^id <obj-slot>)
   (<s> ^to-store <proc> <new-arg>)
   (<s> ^created-procedural-arg <new-arg>)
}

###################
# arg-type location

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*location
   (state <s> ^name generate-action-operator
              ^operator <o> +
              ^top-state <top>)
   (<o> ^name copy-command-arg
        ^command-arg-name <arg-name>
        ^arg-value <obj>)
   (<obj> ^item-type location)
-->
   (<o> ^arg-type location
        ^arg-name <arg-name>)
}

sp {generate-action-operator*apply*copy-command-arg*copy*location*arg
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name copy-command-arg
        ^command-arg-name <cmd-arg-name>
        ^arg-name <arg-name>
        ^arg-type location
        ^arg-value <location>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type location
          ^id <location>)
   (<s> ^copied-arg.<cmd-arg-name> <location>)
}

sp {generate-action-operator*apply*copy-command-arg*location*store*procedural
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-id.procedural <proc>)
   (<o> ^name copy-command-arg
        ^arg-name <arg-name>
        ^arg-type location
        ^arg-value <arg>)
   (<proc> -^<arg-name>)
-->
   (<proc> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type location 
              ^arg-status real
              ^id <loc-slot>)
   (<s> ^to-store <proc> <new-arg>)
   (<s> ^created-procedural-arg <new-arg>)
}

######################
## arg-type concept

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*concept
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^command-arg-name <arg-name>
        ^arg-value <val>)
   (<val> ^item-type concept)
-->
   (<o> ^arg-type concept
        ^arg-name <arg-name>)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*concept*predicate
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^command-arg-name arg1
        ^arg-value <val>)
   (<val> ^item-type predicate)
-->
   (<o> ^arg-type concept
        ^arg-name arg1)
}

sp {generate-action-operator*apply*copy-command-arg*copy*concept*arg
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name copy-command-arg
        ^command-arg-name <cmd-arg-name>
        ^arg-name <arg-name>
        ^arg-type concept
        ^arg-value <val>)
   (<val> ^handle <concept-handle>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type concept
          ^handle <concept-handle>)
   (<s> ^copied-arg.<cmd-arg-name> <val>)
}

sp {generate-action-operator*apply*copy-command-arg*concept*store*procedural
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-id.procedural <proc>)
   (<o> ^name copy-command-arg
        ^arg-name <arg-name>
        ^arg-type concept
        ^arg-value <arg>)
   (<proc> -^<arg-name>)
-->
   (<proc> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^id <concept-slot>)
   (<s> ^to-store <proc> <new-arg>)
   (<s> ^created-procedural-arg <new-arg>)
}

#######################
### arg-type predicate

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*predicate
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^command-arg-name { <arg-name> << arg2 relation predicate >>}
        ^arg-value <val>)
   (<val> -^until-clause
           ^item-type predicate)
-->
   (<o> ^arg-type predicate
        ^arg-name arg2)
}

sp {generate-action-operator*apply*copy-command-arg*predicate
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name copy-command-arg
        ^command-arg-name <cmd-arg-name>
        ^arg-name <arg-name>
        ^arg-type predicate
        ^arg-value <val>)
   (<val> ^handle <pred-handle>
          ^2 <obj>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^handle <pred-handle>
          ^2 <obj>)
   (<s> ^copied-arg.<cmd-arg-name> <val>)
}

sp {generate-action-operator*apply*copy-command-arg*predicate*store*procedural
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-id.procedural <proc>)
   (<o> ^name copy-command-arg
        ^arg-name <arg-name>
        ^arg-type { <arg-type> << predicate >> }
        ^arg-value <arg>)
   (<proc> -^<arg-name>)
-->
   (<proc> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type <arg-type>
              ^arg-status real
              ^id <pred-slot>
              ^2 <obj-slot>)
   (<s> ^to-store <proc> <new-arg>)
   (<s> ^created-procedural-arg <new-arg>)
}

###########################
## arg-type until-clause

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*until-clause
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^command-arg-name { <arg-name> << arg2 relation predicate >>}
        ^arg-value.until-clause <until>)
-->
   (<o> ^arg-type until-clause
        ^arg-name arg2)
}

sp {generate-action-operator*elaborate*copy-command-arg*until-clause*at*classification
   (state <s> ^name generate-action-operator
              ^operator <o> +
              ^top-state.io.input-link.self.current-waypoint.classification <class>)
   (<o> ^name copy-command-arg
        ^arg-type until-clause
        ^arg-value.until-clause.arg1.predicates.spatial-shape <class>)
-->
   (<o> ^at-classification true)
}

sp {generate-action-operator*elaborate*copy-command-arg*until-clause*count*from*quantity
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^arg-type until-clause
        ^arg-value.until-clause.arg1.predicates.number <num>)
-->
   (<o> ^count <num>)
}

sp {generate-action-operator*elaborate*copy-command-arg*until-clause*count*default*1
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^arg-type until-clause
        ^arg-value.until-clause.arg1.predicates <preds>)
   (<preds> -^number <num>)
-->
   (<o> ^count 1)
}

sp {generate-action-operator*elaborate*final-count*at-classification
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^arg-type until-clause
        ^at-classification true
        ^count <c>)
-->
   (<o> ^final-count (+ <c> 1))
}

sp {generate-action-operator*elaborate*final-count*not*at-classification
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^arg-type until-clause
        -^at-classification true
        ^count <c>)
-->
   (<o> ^final-count <c>)
}

sp {generate-action-operator*apply*copy-command-arg*until-clause
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <cmd>)
   (<o> ^name copy-command-arg
        ^command-arg-name { <cmd-arg-name> << arg1 arg2 >> }
        ^arg-value <val>
        ^final-count <count>)
   (<val> ^until-clause <clause>)
   (<clause> ^arg1.predicates.spatial-shape <shape>)
-->
   (<cmd> ^until-clause <new-clause>)
   (<new-clause> ^name count
             ^parameters <params>)
   (<params> ^count <count>
             ^class <shape>)
   (<s> ^copied-arg.<cmd-arg-name> <val>)
}
              
sp {generate-action-operator*apply*copy-command-arg*arg-type*until-clause*state*predicate
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <cmd>)
   (<o> ^name copy-command-arg
        ^command-arg-name { <cmd-arg-name> << arg1 arg2 >> }
        ^arg-value <val>)
   (<val> ^until-clause <until>)
   (<until> ^arg1 <obj>
            ^predicate.handle <pred>)
-->
   (<cmd> ^until-clause <new-clause>)
   (<new-clause> ^arg-type until-clause
                 ^predicate <until-pred>)
   (<until-pred> ^type state
           ^handle <pred>
           ^1 <obj>)
   (<s> ^copied-arg.<cmd-arg-name> <val>)
}
   
