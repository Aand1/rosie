#################################################################
#
# interpret-object-definition
#   Occurs when the instructor says 'This one'
#
###################################################################

#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-object-definition
   (state <s> ^name interpret-message
              ^instructor-message <msg>)
   (<msg> ^message-type object-definition
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-object-definition
        ^message <msg>)
}

######
# OPERATOR ELABORATIONS
######

# object: REQUIRED - the object being described
sp {interpret-message*elaborate*interpret-object-definition*object
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-definition
        ^message.arg1 <obj>
       -^goal <obj>
       -^robot <obj>)
   (<obj> ^item-type object)
-->
   (<o> ^object <obj>)
}

#####
# OPERATOR APPLICATION
#####

sp {interpret-message*apply*interpret-object-definition*clarify-argument*mark*interpreted
   (state <s> ^name interpret-message
              ^operator.name interpret-object-definition
              ^instructor-message <msg>
              ^top-state.interaction.stack.segment.purpose.type clarify-argument)
-->
   (<s> ^mark-interpreted <msg>)
}

sp {interpret-message*apply*interpret-object-definition*clarify-argument*no*matches*reask
   (state <s> ^name interpret-message
              ^operator <o>
              ^instructor-message <msg>
              ^top-state.interaction.stack.segment.purpose <p>)
   (<o> ^name interpret-object-definition)
   (<p> ^type clarify-argument
        ^parameters <params>)
   (<params> ^argument-info <info>
             ^action-operator <aop>
             ^arg-name <arg-name>)
   -{(<aop> ^<arg-name>.<att> <obj>)
     (<o> ^object <obj>)}
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <new-p>
   	       ^originator agent)
   (<p> ^type clarify-argument
        ^parameters <params>
   	    ^satisfaction.dialog-event <de>)
   (<de> ^type object-definition
         ^originator instructor)
   
   (<s> ^outgoing-message <out-msg>)
   (<out-msg> ^type multiple-arguments
              ^argument-info <info>)
}

sp {interpret-message*apply*interpret-object-definition*clarify-argument*remove
   (state <s> ^name interpret-message
              ^operator <o>
              ^instructor-message <msg>
              ^top-state.interaction.stack.segment.purpose <p>)
   (<o> ^name interpret-object-definition
        -^object <obj>
         ^object <match>)
   (<p> ^type clarify-argument
        ^parameters <params>)
   (<params> ^action-operator <aop>
             ^arg-name <arg-name>)
   (<aop> ^<arg-name> <arg>
          ^<arg-name>.<att> <match>)
   (<arg> ^<att> <obj>)
   (<obj> ^item-type object)
-->
   (<aop> ^<arg-name> <arg> -)
}

sp {interpret-message*apply*interpret-object-definition*answer*to*ask*add*answer*predicate
   (state <s> ^name interpret-message
              ^operator <o>
              ^instructor-message <msg>
              ^top-state.interaction.stack.segment.purpose.type wait-for-answer
              ^top-state.action-stack.top <top>)
   (<o> ^name interpret-object-definition
        ^object <obj>)
   (<top> ^execution-operator.action-handle ask1)
-->
   (<top> ^answer <obj>)
   (<s> ^mark-interpreted <msg>)
}

sp {interpret-message*apply*interpret-object-definition*find-missing-object*mark*found-as
   (state <s> ^name interpret-message
              ^operator <o>
              ^instructor-message <msg>
              ^top-state.interaction.stack.segment.purpose <p>)
   (<o> ^name interpret-object-definition
        ^object <obj>)
   (<p> ^type find-missing-object
        ^missing-object <missing>)
-->
   (<s> ^mark-interpreted <msg>)
   (<missing> ^found-as <obj>)
}
 
