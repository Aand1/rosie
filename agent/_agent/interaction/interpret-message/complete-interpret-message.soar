sp {interpret-message*propose*complete-interpret-message
   (state <s> ^name interpret-message)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-interpret-message)
}

# sp {interpret-message*apply*complete-interpret-message*delete*nl-il
#    (state <s> ^name interpret-message
#               ^operator.name complete-interpret-message
#               ^il-message <msg>
#               ^topstate.nl.input-link <nil>)
#    (<nil> ^message <msg>)
# -->
#    (<nil> ^message <msg> -)
# }

# sp {interpret-message*apply*complete-interpret-message*mark*processed
#    (state <s> ^name interpret-message
#               ^operator.name complete-interpret-message
#               ^il-message <msg>
#               ^topstate.io.input-link <il>)
#    (<il> ^message <msg>)
# -->
#    (<msg> ^processed true)
# }

sp {interpret-message*apply*complete-interpret-message*copy*new-segment-info
   (state <s> ^name interpret-message
              ^operator.name complete-interpret-message
              ^new-segment-info <info>
#              ^topstate.interaction.status <status>
	      ^superstate <ss>)
-->
   (<ss> ^new-segment-info <info>) 
}

# sp {interpret-message*apply*complete-interpret-message*copy*performed
#    (state <s> ^name interpret-message
#               ^operator.name complete-interpret-message
#              -^new-segment-info
#               ^current-purpose.satisfaction.dialog-event.type <type>
#               ^instructor-message.type <type>
#               ^topstate.interaction.status <status>)
# -->
#    (<status> ^performed.dialog-event.type <type>)
# } 

sp {interpret-message*apply*complete-interpret-message*clear-interaction-stack
   (state <s> ^name interpret-message
              ^operator.name complete-interpret-message
              ^clear-interaction-stack true
              ^topstate <top>)
-->
   (<top> ^clear-interaction-stack true)
}