# Rules that handle when an action-command is sent by the instructor

# Proposal
sp {interpret-message*propose*action-command
   (state <s> ^name interpret-message
   	      ^instructor-message <msg>
	      -^new-segment-info
	      -^modify-segment-info)
   (<msg> ^type verb-command)
-->
   (<s> ^operator <o> +)
   (<o> ^name action-command
   	^message <msg>)
}

#verb description for game
###############################################
#
# verb-description
#	move 1 <prep> 2
#
#
###############################################
sp {interpret-message*apply*action-command*games
   (state <s> ^name interpret-message
              ^topstate.current-game.learning.type verb
   	          ^operator <o>)        
	(<o> ^name action-command
   	     ^message.information.verb <vcomm>)
   (<vcomm> ^word <verb>
            ^direct-object <do>)
   (<do> ^object.word {<p2> << 1 2 3 4 5 6 7 8 9 10 >>} ^relation <r>)
   (<r> ^|p2|.object.word {<p3> << 1 2 3 4 5 6 7 8 9 10 >>}  ^word <prep>)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type verb-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^verb-name <verb> ^verb-prep <prep> ^a (int <p2>) ^b (int <p3>))
   (<sat> ^dialog-event.type game)
}

sp {interpret-message*apply*action-command*games*parameter-reference
   (state <s> ^name interpret-message
              ^topstate.current-game.learning.type verb
   	          ^operator <o>)        
	(<o> ^name action-command
   	     ^message.information.verb <vcomm>)
   (<vcomm> ^word <verb>
            ^direct-object <do>)
   (<do> ^object <o1> ^relation <r>)
   (<o1> ^specifier DEF)
   (<o2> ^specifier DEF)
   (<r> ^|p2|.object <o2> ^word <prep>)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type verb-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^verb-name <verb> ^verb-prep <prep> ^obja <o1> ^objb <o2>)
   (<sat> ^dialog-event.type game)
}

#heuristic teaching message            
sp {interpret-message*apply*action-command*games*heuristic
   (state <s> ^name interpret-message
              ^topstate.current-game.learning.type heuristic
   	          ^operator <o>)        
	(<o> ^name action-command
   	     ^message.information.verb <vcomm>)
   (<vcomm> ^word prefer
            ^direct-object <do>)
   (<do> ^object.word <action1> ^relation <r>)
#   (<o1> ^specifier DEF)
#   (<o2> ^specifier DEF)
   (<r> ^|p2|.object.word <action2> ^word over)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type heuristic-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^type action ^action1 <action1> ^action2 <action2>)
   (<sat> ^dialog-event.type game)
}


###############################################
#
# action-command
#	move the red object to the right of the pantry.
#
#
###############################################

sp {interpret-message*apply*action-command
   (state <s> ^name interpret-message
   	      ^operator <o>)
   (<o> ^name action-command
   	^message.information <vcomm>)
   (<vcomm> -^verb.word << done find >>)
  -{(<s> ^topstate.current-game.learning <l>)
    (<l> -^interaction true)}
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>)
   (<p> ^type action-command
   	^parameters <params>
	^satisfaction <sat>)
   (<sat> ^action-event <ae>)
   (<ae> ^type <vcomm>)
   (<params> ^indexable <i>)
   (<i> ^type action-command
   	^lexical <vcomm>)
}

###############################################
# find the green block
###############################################
sp {interpret-message*apply*action-command*find
   (state <s> ^name interpret-message
   	      ^operator <o>)
   (<o> ^name action-command
   	^message.information <vcomm>)
   (<vcomm> ^verb <verb>)
   (<verb> ^word find
           ^direct-object <obj>)
  -{(<s> ^topstate.current-game.learning <l>)
    (<l> -^interaction true)}
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>)
   (<p> ^type action-command
   	^parameters <params>
	^satisfaction <sat>)
   (<sat> ^action-event.type find)
   (<params> ^verb <verb> 
             ^object-desc <obj>)
}


###################################################
#
# you are done
#
###################################################

sp {interpret-message*apply*action-command*done
   (state <s> ^name interpret-message
   	      ^operator <o>
	      ^topstate <ts>)
   (<ts> ^interaction.stack.segment.next <seg>)
   (<o> ^name action-command
   	^message.information <vcomm>)
   (<vcomm> ^verb.word done)
   (<seg> ^purpose.satisfaction <sat>)
   (<sat> ^action-event <ae>)
-->
   (<s> ^modify-segment-info <info>)
   (<info> ^segment <seg>
   	   ^modification <m>)
   (<m> ^type satisfaction
   	^delete <delete>
	^add <add>)
   (<delete> ^action-event <ae>)
   (<add> ^learning-event <ae>)
}

###################################################
#
# example execution
#
###################################################

sp {interpret-message*apply*action-command*example*execution
   (state <s> ^name interpret-message
   	      ^operator <o>
	      ^topstate <ts>)
   (<ts> ^interaction.stack.segment.next <seg>)
   (<o> ^name action-command
   	^message.information <vcomm>)
   (<vcomm> ^verb.word <any>)
   (<seg> ^purpose.satisfaction <sat>)
   (<sat> ^action-event <ae>)
-->
   (<ae> ^status learning)
}
