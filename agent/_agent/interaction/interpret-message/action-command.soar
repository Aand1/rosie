# Rules that handle when an action-command is sent by the instructor

# Proposal
sp {interpret-message*propose*action-command
   (state <s> ^name interpret-message
   	      ^instructor-message <msg>
	      -^new-segment-info
	      -^modify-segment-info)
   (<msg> ^type verb-command)
-->
   (<s> ^operator <o> +)
   (<o> ^name action-command
   	^message <msg>)
}

###############################################
#
# action-command
#	move the red object to the right of the pantry.
#
#
###############################################

sp {interpret-message*apply*action-command
   (state <s> ^name interpret-message
   	      ^operator <o>)
   (<o> ^name action-command
   	^message.information <vcomm>)
   (<vcomm> -^verb.word done)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>)
   (<p> ^type action-command
   	^parameters <params>
	^satisfaction <sat>)
   (<sat> ^action-event <ae>)
   (<ae> ^type <vcomm>)
   (<params> ^indexable <i>)
   (<i> ^type action-command
   	^lexical <vcomm>)
}


###################################################
#
# you are done
#
###################################################

sp {interpret-message*apply*action-command*done
   (state <s> ^name interpret-message
   	      ^operator <o>
	      ^topstate <ts>)
   (<ts> ^interaction.stack.segment.next <seg>)
   (<o> ^name action-command
   	^message.information <vcomm>)
   (<vcomm> ^verb.word done)
   (<seg> ^purpose.satisfaction <sat>)
   (<sat> ^action-event <ae>)
-->
   (<s> ^modify-segment-info <info>)
   (<info> ^segment <seg>
   	   ^modification <m>)
   (<m> ^type satisfaction
   	^delete <delete>
	^add <add>)
   (<delete> ^action-event <ae>)
   (<add> ^learning-event <ae>)
}
