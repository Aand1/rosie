# Rules that handle when an action-command is sent by the mentor

# Proposal
sp {interpret-message*propose*action-command
   (state <s> ^name interpret-message
   	      ^instructor-message <msg>
	      -^new-segment-info.purpose.type action-command)
   (<msg> ^type verb-command)
-->
   (<s> ^operator <o> +)
   (<o> ^name action-command
   	^message <msg>)
}

sp {interpret-message*elaborate*action-command*verb
   (state <s> ^name interpret-message
   	      ^operator <o> +)
   (<o> ^name action-command
   	^message.information.verb.word <verb-word>)
-->
   (<o> ^verb <verb-word>)
}

sp {interpret-message*elaborate*direct-object
   (state <s> ^name interpret-message
   	      ^operator <o> +)
   (<o> ^name action-command
   	^message.information.verb.direct-object <do>)
-->
   (<o> ^direct-object <obj>)
}


sp {interpret-message*elaborate*pp-object
   (state <s> ^name interpret-message
   	      ^operator <o> +)
   (<o> ^name action-command
   	^message.information.verb.object <obj>)
-->
   (<o> ^pp-object <obj>)
}


###############################################
#
# action-command
#	move the red object to the right of the pantry.
#
#
###############################################

sp {interpret-message*apply*action-command
   (state <s> ^name interpret-message
   	      ^operator <o>)
   (<o> ^name action-command
   	^message.information <vcomm>)
-->
   (<s> ^new-segment-info <info>
   	^originator mentor)
   (<info> ^purpose <p>)
   (<p> ^type action-command
   	^parameters <params>
	^satisfaction <sat>)
   (<sat> ^action-event <ae>)
   (<ae> ^type <vcomm>)
   (<params> ^indexable <i>)
   (<i> ^type action-command
   	^lexical <vcomm>)
}

