# Rules that handle when an action-command is sent by the mentor

# Proposal
sp {interpret-message*propose*action-command
   (state <s> ^name interpret-message
   	      ^instructor-message <msg>
	      -^new-segment-info.purpose.parameters.indexable.type verb)
   (<msg> ^type verb-command)
-->
   (<s> ^operator <o> +)
   (<o> ^name action-command
   	^message <msg>)
}

sp {interpret-message*elaborate*action-command*verb
   (state <s> ^name interpret-message
   	      ^operator <o> +)
   (<o> ^name action-command
   	^message.information.verb.word <verb-word>)
-->
   (<o> ^verb <verb-word>)
}

sp {interpret-message*elaborate*direct-object
   (state <s> ^name interpret-message
   	      ^operator <o> +)
   (<o> ^name action-command
   	^message.information.verb.direct-object <do>)
-->
   (<o> ^direct-object <obj>)
}


sp {interpret-message*elaborate*pp-object
   (state <s> ^name interpret-message
   	      ^operator <o> +)
   (<o> ^name action-command
   	^message.information.verb.object <obj>)
-->
   (<o> ^pp-object <obj>)
}


###############################################
#
# action-command
#	move the red object to the right of the pantry.
#
#
###############################################

sp {interpret-message*apply*action-command
   (state <s> ^name interpret-message
   	      ^operator <o>)
   (<o> ^name action-command
   	^message.information <vcomm>)
-->
   (<s> ^new-segment-info <info>
   	^originator mentor)
   (<info> ^purpose <p>)
   (<p> ^type action-command
   	^parameters <params>
	^satisfaction <sat>)
   (<sat> ^action-event.type <msg>)
   (<params> ^indexable <i>)
   (<i> ^type action-command
   	^lexical <vcomm>)
}

sp {interpret-message*apply*action-command*verb
   (state <s> ^name interpret-message
   	      ^new-segment-info.purpose.parameters <params>
	      ^operator <o>)
   (<o> ^name action-command
   	^message.information <info>)
   (<info> ^verb.word <verbword>)
   (<params> ^indexable <ia>)
   (<ia> ^type action-command)
-->
   (<params> ^indexable <i>)
   (<i> ^type verb
   	^lexical <verbword>)
   (<ia> ^verb-param <i>)
}

sp {interpret-message*apply*action-command*direct-object
   (state <s> ^name interpret-message
   	      ^new-segment-info.purpose.parameters <params>
	      ^operator <o>)
   (<o> ^name action-command
   	^message.information <info>)
   (<info> ^verb.direct-object.object <object>)
   (<params> ^indexable <ia>)
   (<ia> ^type action-command)
-->
   (<params> ^indexable <i>)
   (<i> ^type object
   	^lexical <object>)
   (<ia> ^direct-object-param <i>)
}

sp {interpret-message*apply*action-command*preposition
   (state <s> ^name interpret-message
   	      ^new-segment-info.purpose.parameters <params>
	      ^operator <o>)
   (<o> ^name action-command
   	^message.information <info>)
   (<info> ^verb.preposition <prep>)
   (<params> ^indexable <ia>)
   (<ia> ^type action-command)
   (<prep> ^word <prepword>
   	   ^object <obj>)
-->
   (<params> ^indexable <i1>
   	     ^indexable <i2>)
   (<i1> ^type preposition
   	 ^lexical <prepword>)
   (<i2> ^type object
   	 ^lexical <obj>)
   (<ia> ^preposition-param <i1>
   	 ^pp-object-param <i2>)
}