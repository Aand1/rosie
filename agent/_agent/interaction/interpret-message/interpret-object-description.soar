###################################################################
#
# interpret-object-description
#   Occurs when the intructor wishes to give additional information about an object
#   Construction: *-DP-is-ADJ/DP/PP-T
#   	E.g. 'The ball is red', 'The ball is a sphere', 'The ball is in the pantry'
#   Construction: *-This-is-DP-T
#   	E.g. 'This is a large red block', 'This is to the right of the sphere'
#
###################################################################

#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*interpret-object-description
   (state <s> ^name interpret-message
              ^instructor-message <msg>)
   (<msg> ^message-type object-description
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-object-description
        ^message <msg>)
}

######
# OPERATOR ELABORATIONS
######

# Elaborate useful information from the message onto the operator

# goal: OPTIONAL - the robot is the object
sp {interpret-message*elaborate*interpret-object-description*goal
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^message.arg1 <obj>)
   (<obj> ^handle goal)
-->
   (<o> ^goal <obj>)
}

# robot: OPTIONAL - the robot is the object
sp {interpret-message*elaborate*interpret-object-description*robot
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^message.arg1 <obj>)
   (<obj> ^handle rosie)
-->
   (<o> ^robot <obj>)
}

# object: REQUIRED - the object being described
sp {interpret-message*elaborate*interpret-object-description*object
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^message.arg1 <obj>
       -^goal <obj>
       -^robot <obj>)
   (<obj> ^item-type object)
-->
   (<o> ^object <obj>)
}

# predicate: OPTIONAL - tells something that is true about the object (e.g. color=red)
sp {interpret-message*elaborate*interpret-object-description*predicate
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^message.predicate <pred>)
-->
   (<o> ^predicate <pred>)
}

# relation: OPTIONAL - how the object is in relation to another
sp {interpret-message*elaborate*interpret-object-description*relation
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^message.{ << relation predicate >> } <rel>)
-->
   (<o> ^relation <rel>)
}

sp {interpret-message*elaborate*interpret-object-description*arg2
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^message.arg2 <rel>)
-->
   (<o> ^relation <rel>)
}

sp {interpret-message*elaborate*interpret-object-description*subclause
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^message.subclause <sub>)
-->
   (<o> ^subclause <sub>)
}

#####
# MESSAGE CATEGORIZATION
#####

sp {interpret-message*elaborate*interpret-object-description*purpose*train-on-object
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^object <obj>
        ^predicate <pred>)
-->
   (<o> ^purpose train-on-object)
}

sp {interpret-message*elaborate*interpret-object-description*purpose*learn-goal-definition
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^goal <goal>
        ^subclause <sub>)
-->
   (<o> ^purpose learn-goal-definition)
}
   
sp {interpret-message*elaborate*interpret-object-description*purpose*teach-location
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^robot <rob>
        ^relation <rel>)
-->
   (<o> ^purpose teach-location)
}
   
sp {interpret-message*elaborate*interpret-object-description*purpose*teach-relation
   (state <s> ^name interpret-message
              ^operator <o> +)
   (<o> ^name interpret-object-description
        ^object <obj>
        ^relation <rel>)
-->
   (<o> ^purpose teach-relation)
}

#####
# OPERATOR APPLICATION
#####

###########################
# Purpose: train-on-object

sp {interpret-message*apply*interpret-object-description*create*segment*train-on-object
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-object-description
        ^purpose train-on-object
        ^message <msg>
        ^object <obj>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type train-on-object 
        ^parameters <params>
        ^satisfaction.learning-event.type object)
   (<params> ^object <obj>)
}

sp {interpret-message*apply*interpret-object-description*copy*predicates
   (state <s> ^name interpret-message
              ^operator <o>
              ^new-segment-info.purpose.parameters <params>)
   (<o> ^name interpret-object-description
        ^purpose train-on-object
        ^predicate <pred>)
-->
   (<params> ^predicate <pred>)
}

###########################
# Purpose: teach-relation

# Object description is a relationship (preposition) example between two objects
sp {interpret-message*apply*interpret-object-description*create*segment*teach-relation
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-object-description
        ^purpose teach-relation
        ^message <msg>
        ^object <obj>
        ^relation <rel>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type teach-relation
        ^parameters <params>
        ^satisfaction.learning-event.type relation)
   (<params> ^object <obj>
             ^relation <rel>)
}

###########################
# Purpose: teach-location

sp {interpret-message*apply*interpret-object-description*create*segment*teach-location
   (state <s> ^name interpret-message
              ^operator <o>)
   (<o> ^name interpret-object-description
        ^purpose teach-location
        ^message <msg>
        ^robot <robot>
        ^relation.{2} <loc>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type teach-location
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type location)
   (<params> ^location-id <loc>)
}


sp {interpret-message*apply*interpret-object-description*teach-location*terminate-segment
   (state <s> ^name interpret-message
              ^operator <o>
	      		^current-purpose.satisfaction.dialog-event <de>)
   (<o> ^name interpret-object-description
        ^purpose teach-location)
   (<de> ^type location-description
         ^originator instructor)
-->
   (<s> ^terminate-segment true)
}

###########################
# Purpose: learn-goal-definition

#TODO JK handle goal
sp {interpret-message*apply*interpret-object-description*create*segment*learn-goal-predicate
   (state <s> ^name interpret-message
              ^top-state.game-learning-flag true #TODO change
              ^operator <o>)
   (<o> ^name interpret-object-description
        ^purpose learn-goal-definition
        ^message <msg>)
-->
   (interrupt)
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-goal-predicate
        ^parameters.message <msg>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type goal)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-goal-definition
   (state <s> ^name interpret-message
              -^top-state.game-learning-flag
              ^operator <o>)
   (<o> ^name interpret-object-description
        ^purpose learn-goal-definition
        ^message <msg>)
-->
   (<s> ^new-segment-info <info>
        ^mark-interpreted <msg>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type learn-goal-definition
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^learning-event.type goal)
}

sp {interpret-message*apply*interpret-object-description*learn-goal-definition*elaborate*action*segment
   (state <s> ^name interpret-message
              ^operator <o>
              ^current-purpose.parameters.action <action>
              ^new-segment-info.purpose.parameters <params>)
   (<o> ^name interpret-object-description
        ^purpose learn-goal-definition)
-->
   (<params> ^action <action>)
}

sp {interpret-message*apply*interpret-object-description*learn-goal-definition*elaborate*goal-predicate*state
   (state <s> ^name interpret-message
              ^operator <o>
              ^new-segment-info.purpose.parameters <params>)
   (<o> ^name interpret-object-description
        ^purpose learn-goal-definition
        ^subclause <sub>)
   (<sub> ^arg1 <obj>
          ^predicate.handle <pred-handle>
         -^predicate.{2} <any>)
-->
   (<params> ^goal-predicate <pred>)
   (<pred> ^type state
           ^handle <pred-handle>
           ^1 <obj>)
}

sp {interpret-message*apply*interpret-object-description*learn-goal-definition*elaborate*goal-predicate*relation
   (state <s> ^name interpret-message
              ^operator <o>
              ^new-segment-info.purpose.parameters <params>)
   (<o> ^name interpret-object-description
        ^purpose learn-goal-definition
        ^subclause <sub>)
   (<sub> ^arg1 <obj1>
          ^{ << arg2 predicate >>} <rel>)
   (<rel> ^handle <pred-handle>
          ^2 <obj2>)
-->
   (<params> ^goal-predicate <pred>)
   (<pred> ^type relation
           ^handle <pred-handle>
           ^1 <obj1>
           ^2 <obj2>)
}

sp {interpret-message*apply*interpret-object-description*learn-goal-definition*terminate*segment
   (state <s> ^name interpret-message
              ^operator <o>
	      		^current-purpose.satisfaction.dialog-event <de>)
   (<o> ^name interpret-object-description
        ^purpose learn-goal-definition)
   (<de> ^type goal-description
         ^originator instructor)
-->
   (<s> ^terminate-segment true)
}

sp {interpret-message*apply*interpret-object-description*remove*unknown-word*failure
   (state <s> ^name interpret-message
              ^operator <o>
              ^top-state.interaction.status <status>)
   (<o> ^name interpret-object-description
        ^predicate.spelling <word>)
   (<status> ^failure <f>)
   (<f> ^type unknown-word
        ^word <word>)
-->
   (<status> ^failure <f> -)
}
