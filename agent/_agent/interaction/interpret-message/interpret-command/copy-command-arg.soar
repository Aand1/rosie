sp {interpret-command*propose*copy-command-arg
   (state <s> ^name interpret-command
              ^command-message <msg>
              ^action-command <cmd>
             -^copied-arg <arg-name>)
   (<msg> ^{ <arg-name> << arg1 arg2 relation >> } <arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name copy-command-arg
        ^arg-name <arg-name>
        ^arg-value <arg>)
}

sp {interpret-command*apply*copy-command-arg*object
   (state <s> ^name interpret-command
              ^operator <o>
              ^action-command <cmd>
              ^top-state <top>)
   (<o> ^name copy-command-arg
        ^arg-name arg1
        ^arg-value <obj>)
   (<top> ^world.objects.object <obj>)
-->
   (<cmd> ^arg1 <arg>)
   (<arg> ^arg-type object
          ^id <obj>)
   (<s> ^copied-arg arg1)
}

sp {interpret-command*apply*copy-command-arg*concept
   (state <s> ^name interpret-command
              ^operator <o>
              ^action-command <cmd>)
   (<o> ^name copy-command-arg
        ^arg-name arg1
        ^arg-value.id <id>)
   (<id> ^name <name>)
-->
   (<cmd> ^arg1 <arg>)
   (<arg> ^arg-type concept
          ^id <id>)
   (<s> ^copied-arg arg1)
}

sp {interpret-command*apply*copy-command-arg*predicate
   (state <s> ^name interpret-command
              ^operator <o>
              ^action-command <cmd>)
   (<o> ^name copy-command-arg
        ^arg-name { <arg-name> << arg2 relation >> }
        ^arg-value <val>)
   (<val> ^id <pred-id>
          ^arg2 <obj>)
-->
   (<cmd> ^arg2 <arg>)
   (<arg> ^arg-type predicate
          ^id <pred-id>
          ^2 <obj>)
   (<s> ^copied-arg <arg-name>)
}
   
