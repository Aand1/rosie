###################################################################
#
# interpret-command
#   A command given by the instructor to the agent to do something
#   Construction: *-VP-T
#     E.g. 'Store the red sphere', 'Put the green large block in the pantry'
#
###################################################################

#######
# OPERATOR PROPOSAL
#######
sp {interpret-message*propose*generate-action-operator
   (state <s> ^name interpret-message
              ^instructor-message <msg>
             -^action-operator <op>)
   (<msg> ^message-type command)
-->
   (<s> ^operator <o> +)
   (<o> ^name generate-action-operator
        ^command-message <msg>)
}

sp {generate-action-operator*elaborate*allow-substate
   (state <s> ^name generate-action-operator
              ^superstate.name interpret-message)
-->
   (<s> ^allow-substate true)
}


sp {interpret-message*propose*interpret-command
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              ^action-operator <op>)
   (<msg> ^message-type command
         -^interpreted true)
-->
   (<s> ^operator <o> +)
   (<o> ^name interpret-command)
}

sp {interpret-message*apply*interpret-command
   (state <s> ^name interpret-message
              ^instructor-message <msg>
              ^operator.name interpret-command
              ^action-operator <op>)
   (<op> ^action-id.name <action-name>)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type action
        ^parameters.action-operator <op>
        ^satisfaction.action-event.type <action-name>)
   (<msg> ^interpreted true)
}

sp {interpret-message*apply*interpret-command*pop-segment*existing-action
   (state <s> ^name interpret-message
              ^operator.name interpret-command
              ^top-state.interaction.stack.segment.purpose.type action)
-->
   (<s> ^terminate-segment true)
}
              



#######
## OPERATOR ELABORATIONS
#######
#
#sp {interpret-message*elaborate*action-id
#   (state <s> ^name interpret-message
#              ^operator <o> +)
#   (<o> ^name interpret-command
#        ^message.action.id <action>)
#-->
#   (<o> ^action-id <action>)
#}
#
#sp {interpret-message*elaborate*arguments
#   (state <s> ^name interpret-message
#              ^operator <o> +)
#   (<o> ^name interpret-command
#        ^message.{<arg> << arg1 arg2 arg3 arg4 >>} <val>)
#-->
#   (<o> ^<arg> <val>
#        ^has-arguments true)
#}
#
######
## OPERATOR APPLICATION
######
#
## Mark the message as interpreted (retracts operator)
#sp {interpret-message*apply*interpret-command*create*segment
#   (state <s> ^name interpret-message
#              ^operator <o>)
#   (<o> ^name interpret-command
#        ^action-id <action>)
#  (<action> ^name <action-name>)
#-->
#   (<s> ^new-segment-info <info>)
#   (<info> ^purpose <p>
#           ^originator instructor)
#   (<p> ^type action
#        ^parameters <params>
#        ^satisfaction <sat>)
#   (<sat> ^action-event.type <action-name>)
#   (<params> ^action-command <cmd>)
#   (<cmd> ^id <action>)
#}
#
#sp {interpret-message*apply*interpret-command*copy*arguments
#   (state <s> ^name interpret-message
#              ^operator <o>
#              ^new-segment-info.purpose.parameters.action-command <cmd>)
#   (<o> ^name interpret-command
#        ^message <msg>
#        ^{<arg> << arg1 arg2 arg3 arg4 relation predicate >>} <val>)
#-->
#   (<cmd> ^<arg> <val>)
#   (<s> ^mark-interpreted <msg>)
#}
#
#sp {interpret-message*apply*interpret-command*mark*interpreted*no*args
#   (state <s> ^name interpret-message
#              ^operator <o>)
#   (<o> ^name interpret-command
#       -^has-arguments true
#        ^message <msg>)
#-->
#   (<s> ^mark-interpreted <msg>)
#}
