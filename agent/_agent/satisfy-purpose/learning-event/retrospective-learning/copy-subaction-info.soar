sp {retrospective-learning*propose*copy-subaction-info
   (state <s> ^name retrospective-learning
              ^subaction-episode <ep>)
-->
   (<s> ^operator <o> +)
   (<o> ^name copy-subaction-info
        ^subaction-episode <ep>)
}

sp {retrospective-learning*apply*copy-subaction-info
   (state <s> ^name retrospective-learning
              ^operator.name copy-subaction-info
              ^subactions <subs>
             -^subaction-info)
   (<subs> ^next <next>)
-->
   (<s> ^subaction-info <info>)
   (<info> ^action-type primitive
           ^next <next>)
   (<subs> ^next <next> -
           ^next <info>)
}

sp {retrospective-learning*apply*copy-subaction-info*copy*name
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.action-handle <action-handle>)
-->
   (<info> ^action-handle <action-handle>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*object*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>
              ^world.objects.object <wmem-obj>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type object
          ^id <epmem-obj>)
   (<epmem-obj> ^handle <obj-handle>)
   (<wmem-obj> ^handle <obj-handle>)
-->
   (<info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type object
               ^id <wmem-obj>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*merged*object*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^action-operator.merged.<handle1> <handle2>
              ^subaction-info <info>
              ^world.objects.object <wmem-obj>
             -^world.objects.object.handle <handle1>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type object
          ^id <epmem-obj>)
   (<epmem-obj> ^handle <handle1>)
   (<wmem-obj> ^handle <handle2>)
-->
   (<info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type object
               ^id <wmem-obj>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*unknown*object*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>
             -^world.objects.object.handle <obj-handle>
             -^action-operator.merged.<obj-handle>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type object
          ^id <epmem-obj>)
   (<epmem-obj> ^handle <obj-handle>)
-->
   (<info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type object
               ^id <new-obj>)
   (<new-obj> ^handle <obj-handle>
              ^predicates <new-preds>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*unknown*object*arg*predicates
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>
             -^world.objects.object.handle <obj-handle>
             -^action-operator.merged.<obj-handle>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type object
          ^id <epmem-obj>)
   (<epmem-obj> ^handle <obj-handle>
                ^predicates.<att> <val>)
   (<info> ^<arg-name>.id.predicates <new-preds>)
-->
   (<new-preds> ^<att> <val>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*concept*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type concept
          ^handle <concept-handle>)
-->
   (<info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type concept
               ^handle <concept-handle>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*predicate*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>
              ^world.objects.object <wmem-obj>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^handle <pred-handle>
          ^2 <epmem-obj>)
   (<epmem-obj> ^handle <obj-handle>)
   (<wmem-obj> ^handle <obj-handle>)
-->
   (<info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type predicate
               ^handle <pred-handle>
               ^2 <wmem-obj>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*predicate*merged*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>
              ^action-operator.merged.<handle1> <handle2>
              ^world.objects.object <wmem-obj>
             -^world.objects.object.handle <handle1>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^handle <pred-handle>
          ^2 <epmem-obj>)
   (<epmem-obj> ^handle <handle1>)
   (<wmem-obj> ^handle <handle2>)
-->
   (<info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type predicate
               ^handle <pred-handle>
               ^2 <wmem-obj>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*predicate*unknown*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>
             -^world.objects.object.handle <obj-handle>
             -^action-operator.merged.<obj-handle>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^handle <pred-handle>
          ^2 <epmem-obj>)
   (<epmem-obj> ^handle <obj-handle>)
-->
   (<info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type predicate
               ^handle <pred-handle>
               ^2 <new-obj>)
   (<new-obj> ^handle <obj-handle>
              ^predicates <new-preds>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*predicate*unknown*arg*predicates
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>
             -^world.objects.object.handle <obj-handle>
             -^action-operator.merged.<obj-handle>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^handle <pred-handle>
          ^2 <epmem-obj>)
   (<epmem-obj> ^handle <obj-handle>
                ^predicates.<att> <val>)
   (<info> ^<arg-name>.{2}.predicates <new-preds>)
-->
   (<new-preds> ^<att> <val>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*until-clause*state*predicate
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>
              ^world.objects.object <wmem-obj>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type until-clause
          ^predicate <src-pred>)
   (<src-pred> ^type state
               ^handle <pred>
               ^1 <epmem-obj>)
   (<epmem-obj> ^handle <obj-handle>)
   (<wmem-obj> ^handle <obj-handle>)
-->
   (<info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type until-clause
               ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <pred>
               ^1 <wmem-obj>)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*until-clause*relation*predicate
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-info <info>
              ^world.objects.object <wmem-obj1>
              ^world.objects.object <wmem-obj2>)
   (<o> ^name copy-subaction-info
        ^subaction-episode.operator.action.execution-operator.<arg-name> <arg>)
   (<arg> ^arg-type until-clause
          ^predicate <src-pred>)
   (<src-pred> ^type relation
               ^handle <pred>
               ^1 <epmem-obj1>
               ^2 <epmem-obj2>)
   (<epmem-obj1> ^handle <obj-handle1>)
   (<wmem-obj1> ^handle <obj-handle1>)
   (<epmem-obj2> ^handle <obj-handle2>)
   (<wmem-obj2> ^handle <obj-handle2>)
-->
   (<info> ^<arg-name> <arg-copy>)
   (<arg-copy> ^arg-type until-clause
               ^predicate <new-pred>)
   (<new-pred> ^type relation
               ^handle <pred>
               ^1 <wmem-obj1>
               ^2 <wmem-obj2>)
}

sp {retrospective-learning*apply*copy-subaction-info*cleanup
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^subaction-episode <ep>
              ^subaction-info <info>)
   (<o> ^name copy-subaction-info
        ^subaction-episode <ep>)
   (<info> ^action-handle <handle>)
-->
   (<s> ^subaction-episode <ep> -
        ^subaction-info <info> -)
}

