sp {retrospective-learning*selection*elaborate*subactions*superstate
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^superstate.subactions <subs>)
-->
   (<s> ^subactions <subs>)
}

sp {retrospective-learning*selection*elaborate*current-subaction
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^subactions.next <sub>)
-->
   (<s> ^current-subaction <sub>)
}

sp {retrospective-learning*selection*elaborate*operator-matches
   (state <s> ^name selection
              ^problem-space.name retrospective-learning)
-->
   (<s> ^operator-matches <matches>)
}

sp {retrospective-learning*selection*elaborate*operator-matches*match-info
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^operator <o> +
              ^operator-matches <matches>)
   (<o> ^name evaluate-operator
        ^superoperator <op>)
-->
   (<matches> ^match-info <info>)
   (<info> ^operator <op>)
}

sp {retrospective-learning*selection*elaborate*operator-matches*matches*action-name
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^current-subaction.name <action-name>
              ^operator-matches.match-info <info>)
   (<info> ^operator.action-name <action-name>)
-->
   (<info> ^matches name)
}

sp {retrospective-learning*selection*elaborate*operator-matches*matches*object*arg
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^current-subaction.<arg-name>.id <obj>
              ^operator-matches.match-info <info>)
   (<info> ^operator.<arg-name> <arg>)
   (<arg> ^arg-type object
          ^id <obj>)
-->
   (<info> ^matches <arg-name>)
}

sp {retrospective-learning*selection*elaborate*operator-matches*matches*concept*arg
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^current-subaction.<arg-name>.id.name <concept-name>
              ^operator-matches.match-info <info>)
   (<info> ^operator.<arg-name> <arg>)
   (<arg> ^arg-type concept
          ^id.name <concept-name>)
-->
   (<info> ^matches <arg-name>)
}

sp {retrospective-learning*selection*elaborate*operator-matches*matches*predicate*arg
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^current-subaction.<arg-name> <sub-arg>
              ^operator-matches.match-info <info>)
   (<info> ^operator.<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^id.name <pred-name>
          ^2 <obj>)
   (<sub-arg> ^id.name <pred-name>
             ^2 <obj>)
-->
   (<info> ^matches <arg-name>)
}

sp {retrospective-learning*selection*elaborate*operator-matches*op-matched*no*name
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^operator-matches.match-info <info>)
   (<info> -^matches name)
-->
   (<info> ^op-matched no)
}

sp {retrospective-learning*selection*elaborate*operator-matches*op-matched*no*arg
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^operator-matches.match-info <info>)
   (<info> ^operator.<arg-name>.arg-type <any>
          -^matches <arg-name>)
-->
   (<info> ^op-matched no)
}

sp {retrospective-learning*selection*elaborate*operator-matches*op-matched*yes
   (state <s> ^name selection
              ^problem-space.name retrospective-learning
              ^operator-matches.match-info <info>)
   (<info> -^op-matched no)
-->
   (<info> ^op-matched yes)
}
