sp {retrospective-learning*composite-action*elaborate*problem-space
   (state <s> ^superstate.name learn-proposal-rule
              ^superstate.operator.action-type composite)
-->
   (<s> ^problem-space <ps>)
   (<ps> ^name composite-action
         ^action <action>
         ^state <state>
         ^learning <learn>)
   (<action> ^type simulate
             ^propose-actions true)
   (<state> ^type imagined
            ^world-copy shallow)
}

sp {retrospective-learning*elaborate*evaluate-operator*default-desired-copy
   (state <s> ^problem-space.name composite-action
              ^operator <o> +)
   (<o> ^name evaluate-operator)
-->
   (<o> ^default-desired-copy yes)
   (<o> ^default-operator-copy yes)
}

#sp {retrospective-learning*evaluate-operator*elaborate*problem-space*copy
#   (state <s> ^name evaluate-operator
#              ^problem-space <ps>
#              ^superstate.superstate <sss>)
#   (<ps> ^name retrospective-learning
#         ^state <state>)
#-->
#   (<s> ^state-to-copy <sss>)
#   (<state> ^desired-copy deep
#            ^operator-copy deep)
#}
            

#
#sp {retrospective-learning*evaluate-operator*elaborate*problem-space
#   (state <s> ^name evaluate-operator
#              ^superstate.problem-space <sps>)
#   (<sps> ^name retrospective-learning)
#-->
#   (<s> ^problem-space <ps>)
#   (<ps> ^name retrospective-learning
#         ^name composite-action
#         ^action <action>
#         ^state <state>
#         ^learn <learn>)
#   (<action> ^type simulate)
#   (<state> ^type imagined
#            ^world-copy deep)
#}
