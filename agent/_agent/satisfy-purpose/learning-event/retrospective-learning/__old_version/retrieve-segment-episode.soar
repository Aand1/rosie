#### retrieve relevant episode from episodic memory for forward projection
sp {retrospective-learning*retrieve*relevant*episode*epmem
   (state <s> ^name retrospective-learning
              ^segment <seg>
              ^epmem.command <cmd>)
   (<seg> ^epmem-id <id>)
-->
   (<epcomm> ^retrieve <id>)
}

sp {retrospective-learning*elaborate*retrieved-episode
   (state <s> ^name retrospective-learning
              ^epmem.result.retrieved <ret>)
-->
   (<s> ^retrieved-episode <ret>)
}


sp {retrospective-learning*elaborate*world

### extract relevant attributes from retrieved episode
sp {retrospective-learning*copy*retrieved*environment*attributes
   (state <s> ^name retrospective-learning
   	      ^environment <senv>
	      ^epmem.result.retrieved.environment <env>)
   (<env> ^{<> clear <> intermediate <> not-predicate <> not-state <attr> <> predicate} <val>)
-->
   (<senv> ^<attr> <val>)
}

sp {retrospective-learning*copy*retrieved*environment*attributes*predicate
   (state <s> ^name retrospective-learning
   	      ^environment <senv>
	      ^epmem.result.retrieved.environment <env>
	      ^top-state.found-prep <fp>)
   (<fp> ^smem-rep <id>)
   (<env> ^predicate <val>)
   (<val> ^a <obj1>
   	  ^b <obj2>
	  ^relation <rel>)
   (<rel> ^smem-rep <id>)
-->
   (<senv> ^predicate <pred>) 
   (<pred> ^a <obj1>
   	   ^b <obj2>
	   ^relation <fp>)
}

sp {retrospective-learning*copy*retrieved*objects
   (state <s> ^name retrospective-learning
	      ^epmem.result.retrieved.object <obj>
	      ^duplicates <d>
	      ^top-state.world.objects.object <nobj>)
   (<obj> ^id <id>)
   (<nobj> ^id <id>)
-->
   (<s> ^object <obj>)
   (<d> ^<nobj> <obj>)
}

sp {retrospective-learning*duplicate*objects
   (state <s> ^name retrospective-learning)
-->
   (<s> ^duplicates <d>)
}
   	      

