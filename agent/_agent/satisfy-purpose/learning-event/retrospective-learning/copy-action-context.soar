sp {retrospective-learning*propose*copy-action-context
   (state <s> ^name retrospective-learning
              ^superstate.operator.action-context <context>
              ^world <w>
             -^copied-action-context)

-->
   (<s> ^operator <o> +)
   (<o> ^name copy-action-context
        ^action-context <context>)
}

sp {retrospective-learning*apply*copy-action-context*create*context
   (state <s> ^name retrospective-learning
              ^operator <o>)
   (<o> ^name copy-action-context
        ^action-context <context>)
   (<context> ^action-id <id>
              ^name <op-name>)
-->
   (<s> ^action-context <context-copy>)
   (<context-copy> ^action-id <id>
                   ^name <op-name>
                   ^action-type composite)
}

sp {retrospective-learning*apply*copy-action-context*mark*copied
   (state <s> ^name retrospective-learning
              ^operator.name copy-action-context
              ^action-context <c>)
-->
   (<s> ^copied-action-context true)
}

sp {retrospective-learning*apply*copy-action-context*copy*object*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^world.objects.object <obj>
              ^action-context <context>)
   (<o> ^name copy-action-context
        ^action-context.<arg-name> <arg>)
   (<arg> ^arg-type object
          ^id.id <obj-id>)
   (<obj> ^id <obj-id>)
-->
   (<context> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <obj>)
}

sp {retrospective-learning*apply*copy-action-context*copy*concept*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^action-context <context>)
   (<o> ^name copy-action-context
        ^action-context.<arg-name> <arg>)
   (<arg> ^arg-type concept
          ^id <concept-id>)
-->
   (<context> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^id <concept-id>)
}

sp {retrospective-learning*apply*copy-action-context*copy*predicate*arg
   (state <s> ^name retrospective-learning
              ^operator <o>
              ^world.objects.object <obj2>
              ^action-context <context>)
   (<o> ^name copy-action-context
        ^action-context.<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^id <pred-id>
          ^{2}.id <obj2-id>)
   (<obj2> ^id <obj2-id>)
-->
   (<context> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^id <pred-id>
              ^2 <obj2>)
}