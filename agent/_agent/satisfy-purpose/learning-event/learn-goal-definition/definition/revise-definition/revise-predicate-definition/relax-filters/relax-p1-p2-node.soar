sp {relax-filter*apply*relax*p1*p2*action-argument*different
   (state <s> ^name relax-filters
   	      ^type p1-p2-node
	      ^default-value-node <def>
	      ^grounded-predicate <gp>
	      ^grounded-action.<aarg> <obj>)
   (<def> ^<aarg> <val>)
   (<val> ^<name> <label>)
   (<obj> ^property <prop>)
   (<prop> ^name <name>
     	   ^label {<nlabel> <> <label>})
-->
   (<s> ^relax <aarg>)
}

sp {relax-filter*apply*relax*p1*p2*value*different
   (state <s> ^name relax-filters
   	      ^type p1-p2-node
	      ^default-value-node <def>
	      ^grounded-predicate <gp>
	      ^goal-argument <garg>)
   (<def> ^value <val>)
   (<val> ^<name> <label>)
   (<gp> ^<garg> <obj>)
   (<obj> ^property <prop>)
   (<prop> ^name <name>
     	   ^label {<nlabel> <> <label> })
-->
   (<s> ^relax value)
}

sp {relax-filter*apply*both*relax
   (state <s> ^name relax-filters
   	      ^type p1-p2-node
	      ^relax value
	      ^relax {<aarg> <> value}
	      ^goal-argument <garg>
	      ^grounded-action <ga>
	      ^grounded-predicate <gp>
	      ^superstate <ss>)
    (<gp> ^<garg> <val>)
    (<ss> ^operator.information <info>
    	  ^predicate-definition.<garg> <node>
	  -^updated-node <xnode>)
    (<info> ^_node <xnode>)
-->
    (<ss> ^add-default <and>
    	  ^dont-relax <info>)
    (<and> ^grounded-action <ga>
	   ^goal-argument <garg>
	   ^default-value-node <node>
	   ^value <val>
	   ^_node <xnode>)
}

sp {relax-filter*apply*one*relax
   (state <s> ^name relax-filters
   	      ^relax <one>
	      -^relax {<two> <> <one>})
-->
   (<s> ^single relax)
}


sp {relax-filter*apply*relax*p1-p2*value
   (state <s> ^name relax-filters
   	      ^type p1-p2-node
	      ^relax value
	      ^single relax
	      ^default-value-node <def>
	      ^grounded-predicate <gp>
	      ^goal-argument <garg>
	      ^smem.command <scomm>)
   (<def> ^value <val>)
   (<val> ^<name> <label>)
   (<gp> ^<garg> <obj>)
   (<obj> ^property <prop>)
   (<prop> ^name <name>
     	   ^label {<nlabel> <> <label> })
-->
   (<val> ^<name> <label> -)
   (<scomm> ^store <val>)
}

sp {relax-filter*apply*relax*p1-p2*action-argument
   (state <s> ^name relax-filters
   	      ^type p1-p2-node
	      ^relax <aarg>
	      ^single relax
	      ^default-value-node <def>
	      ^goal-argument <garg>
	      ^grounded-action.<aarg> <obj>
	      ^smem.command <scomm>)
   (<def> ^<aarg> <val>)
   (<val> ^<name> <label>)
   (<obj> ^property <prop>)
   (<prop> ^name <name>
     	   ^label {<nlabel> <> <label>})
-->
   (<val> ^<name> <label> -)
   (<scomm> ^store <val>)
}

sp {relax-filter*apply*relax*p1-p2*non-existant
   (state <s> ^name relax-filters
   	      ^type p1-p2-node
	      ^default-value-node <def>
	      ^grounded-predicate non-existant
	      ^grounded-action.<aarg> <obj>
	      ^smem.command <scomm>)
   (<def> ^<aarag> <val>)
   (<val> ^<name> <label>)
   (<obj> ^property <prop>)
   (<prop> ^name <name>
     	   ^label {<nlabel> <> <label>})
-->
   (<val> ^<name> <label> -)
   (<scomm> ^store <val>)
}
	      
  




