sp {relax-filter*apply*relax*state
   (state <s> ^name relax-filters
   	      ^type state-node
	      ^smem.command <scomm>
	      ^default-value-node <def>
	      ^grounded-predicate <gp>)
   (<def> ^{<arg> << p1 >>} <val>)
   (<gp> ^<arg> <obj>)
   (<obj> ^property <prop>)
   (<prop> ^name <name>
   	   ^label <label>)
   (<val> ^<name> {<nlabel> <> <label>})
-->
   (<val> ^<name> <nlabel> -)
   (<scomm> ^store <val>)
}

sp {relax-filter*apply*relax*state*non-existant
   (state <s> ^name relax-filters
   	      ^type state-node
	      ^smem.command <scomm>
	      ^default-value-node <def>
	      ^grounded-predicate non-existant
	      ^superstate <ss>
	      ^_node <xnode>)
   (<ss> ^predicate-definition <pdef>
   	 ^superstate <sss>)
   (<sss> ^goal-definition <gid>
   	  ^revise-predicate-definition <rpd>)
   (<gid> ^<predicate> {<pdef2> <> <pdef>})
   (<rpd> ^failure-details.predicate-definition <pdef2>
   	  ^grounded-predicate <gp>)
   (<pdef2> ^<arg> <xnode>)
   (<gp> ^<arg> <obj>)
   (<def> ^p1 <val>)
   (<obj> ^property <prop>)
   (<prop> ^name <name>
   	   ^label <label>)
   (<val> ^<name> {<nlabel> <> <label>})
-->
   (<val> ^<name> <nlabel> -)
   (<scomm> ^store <val>)
}