sp {mNL-Soar*propose*comprehension
   (state <s> ^name rosie
              ^io.input-link.language.sentence <sentence>)
   (<sentence> -^processed-sentence true)
-->
   (<s> ^operator <op> + =)
   (<op> ^name comprehension
         ^sentence <sentence>)
}

sp {mNL-Soar*propose*comprehension*internal
   (state <s> ^world-usage internal
              ^current-sentence-number <csn>
             -^terminated-sentence <cs>)
-->
   (<s> ^operator <op> + =, <) # allow I/O
   (<op> ^name comprehension)
}
## For alternative structures that could be retried, keep the most recent.

sp {apply*comprehension*save-most-recent-alternative-structure
   (state <s> ^operator.name comprehension
              ^segment <seg>)
   (<seg> ^not-merged-receiver <nmr>)
   (<nmr> ^lt.alternative-structure)
-->
   (<seg> ^alternative-structure-receiver <nmr>)}

sp {rosie*apply*interaction*stored-new-unknowns*create-message
   (state <s> ^name interaction
              ^operator <o>
              ^top-state <ts>)
   (<ts> ^interaction.status <is>
         ^unprocessed-next nil
             ^dialog-context.new-unknown #<unknown>
              -^dialog-context.learning-predicate.name)
   (<o> ^name pop-segment )#^change-type terminate-segment)
             # ^stored-sentence <sentence>)
  # (<sentence> -^processed-sentence true)
-->
#    (interrupt)
    (<is> ^new-message <nw>)
}
sp {rosie*apply*interaction*stored-new-unknowns*unknown-word-failure
    :o-support
   (state <s> ^name rosie
              ^interaction.status.new-message <nw>
              ^unprocessed-next nil
              ^dialog-context.new-unknown <word>
             -^dialog-context.learning-predicate.name)
-->
   (<nw> ^interaction-status.failure <f>)
   (<f> ^type unknown-word ^word <word>)
}
sp {mNL-Soar*propose*comprehension*stored
   (state <s> ^name rosie
              ^unprocessed-next nil
             -^dialog-context.new-unknown
              -^dialog-context.learning-predicate.name
              ^stored-sentence <sentence>)
   (<sentence> -^processed-sentence true)
-->
#    (interrupt)
   (<s> ^operator <op> + =)
   (<op> ^name comprehension
         ^sentence <sentence>)
}

#also check for new-unknown?
sp {mNL-Soar*propose*comprehension*another-sentence
   (state <s> ^name rosie
              ^unprocessed-next nil
              ^next-stored-sentence <sentence2>
              ^top-state.dialog-context.learning-predicate.name)
   (<sentence2> -^processed-sentence true)
-->
   (<s> ^operator <op> + =)
   (<op> ^name comprehension
         ^sentence <sentence2>)
}

sp {rosie*store-sentence*remove-processed*next-stored-sentence
    :o-support
   (state <s> ^name rosie
              -^unprocessed-next nil
              ^top-state <ts>
              ^next-stored-sentence <st>)
   (<ts> ^dialog-context.learning-predicate <lp2>)
   (<st> ^next <n1>)
   (<n1> ^next <n2> ^processed <p> ^first-word <fw>) 
  -{(<ts> ^dialog-context.learning-predicate {<lp1> <> <lp2>})} #only one left
-->
    (<n1> ^processed <p> -) 
    (<n1> ^first-word <fw> -) 
    (<s> ^unprocessed-next <n2>)
}


sp {rosie*store-sentence*remove-processed
    :o-support
   (state <s> ^name rosie
              -^unprocessed-next nil
              -^top-state.dialog-context.learning-predicate.name
              ^stored-sentence <st>)
  # (<o> ^name interpret-unknown-word)
   (<st> ^next <n1>)
   (<n1> ^next <n2> ^processed <p> ^first-word <fw>) 
-->
    (<n1> ^processed <p> -) 
    (<n1> ^first-word <fw> -) 
    (<s> ^unprocessed-next <n2>)
}

sp {rosie*interpret-unknown-word*store-sentence*remove-processed2
    :o-support
   (state <s> ^name rosie
              ^unprocessed-next <n1>)
  #            ^operator <o>)
  # (<o> ^name interpret-unknown-word)
   (<n1> ^next <n2> ^processed <p>) 
-->
    (<n1> ^processed <p> -)
    (<s> ^unprocessed-next <n1> -)
    (<s> ^unprocessed-next <n2>)
}
   

sp {apply*comprehension*save-most-recent-alternative-meaning
   (state <s> ^operator.name comprehension
              ^segment <seg>)
   (<seg> ^merged-receiver <nmr>)
   (<nmr> ^lt.alternative-meaning)
-->
   (<seg> ^alternative-meaning-receiver <nmr>)}
   
   
