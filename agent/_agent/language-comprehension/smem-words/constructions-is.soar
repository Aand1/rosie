
# The green block is {big} {a rabbit} {in the pantry}
smem --add {
           (<sentence> ^construction |*-DP-is-ADJ/DP/PP/U/Dummy|
                       ^structure-type CP
                       ^current-word IS-V
                       ^message-type object-description
                       ^prior-word DP
                       ^prior-word-first true
                       ^assigners <isa> <is-is> <isab> <isb> <isc> <isd> <ise> <isf>)  # why is this here - there is no semantic
           (<isa> ^structure-type DP
                  ^parent <sentence>
                  ^relative-position before
                  ^syntactic-structure head
                  ^semantic-structure object
                  ^required true)
           (<is-is> ^structure-type IS-V
                   # ^lexical-item-spelling |is|
                    ^parent <sentence>
                    ^syntactic-structure predicate
                    ^semantic-structure assignment
                    ^before-type T
                    ^required true
                    ^referent <iso1>)
          (<iso1> ^id soar-assign)
          (<isab> ^structure-type ADV  # NOT - semantic-value is negation
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true
                #  ^semantic-modifier <isc> ...
                  )
           (<isb> ^structure-type ADJ
                  ^exclusive <isc> <isd> <ise> <isf> 
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isc> ^structure-type DP
                  ^exclusive <isb> <isd> <ise> <isf> 
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isd> ^structure-type N   # In case just get |The red block is rabbit.|
                  ^exclusive <isb> <isc> <ise> <isf> 
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<ise> ^structure-type PP
                  ^exclusive <isb> <isc> <isd> <isf> 
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
           (<isf> ^structure-type U
                  ^exclusive <isb> <isc> <isd> <ise> 
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure predicate
                  ^optional true)
 }

## [Wait until] the chicken is cooked.
smem --add {
           (<sentence> ^construction |DP-is-ADJ/DP/PP|
                       ^structure-type C
                       ^current-word IS-V
                       ^message-type object-description
                       ^prior-word DP
                       ^prior-word-first false
                       ^assigners <isa> <is-is> <isab> <isb> <isc> <isd> 
                       ^converts-to CP) 
           (<isa> ^structure-type DP
                  ^parent <sentence>
                  ^relative-position before
                  ^syntactic-structure head
                  ^semantic-structure object
                  ^required true)
           (<is-is> ^structure-type IS-V
                   # ^lexical-item-spelling |is|
                    ^parent <sentence>
                    ^syntactic-structure predicate
                    ^semantic-structure assignment
                    ^before-type T
                    ^required true
                  ^referent <iso1>)
           (<iso1> ^id soar-assign)
          (<isab> ^structure-type ADV  # NOT - semantic-value is negation
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier)
           (<isb> ^structure-type ADJ
                  ^exclusive <isc> <isd> 
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isc> ^structure-type DP
                  ^exclusive <isb> <isd> 
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isd> ^structure-type PP
                  ^exclusive <isb> <isc> 
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
}


## If first word is unknown - see |*-U-is-DP-T| in constructions-unknown-words.

# Green is a color. Medium is a size. - Already known
smem --add {
           (<sentence> ^construction |*-ADJ-is-DP|
                       ^structure-type CP
                       ^current-word IS-V
                       ^prior-word ADJ
                       ^prior-word-first true
                       ^message-type adjective-definition
                       ^assigners <isa> <isb> <isc>) #<isd> )
           (<isa> ^structure-type ADJ
                  ^before-type IS-V
                  ^parent <sentence>
                  ^syntactic-structure head
                  ^semantic-structure object-feature
                  ^referent-type literal
                  ^required true)
           (<isb> ^structure-type IS-V
                  ^after <isa>
                  ^before <isc>
                 # ^lexical-item-spelling |is|
                  ^parent <sentence>
                  ^syntactic-structure predicate
                  ^semantic-structure assignment
                  ^before-type T
                  ^required true
                  ^referent <iso1>)
           (<iso1> ^id soar-assign)
           (<isc> ^structure-type DP
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^required true)
#           (<isd> ^structure-type T
#                  ^required true
#                  ^syntactic-structure terminator
#                  ^parent <sentence>)
}

# Sphere is a shape. - Already known
smem --add {
           (<sentence> ^construction |*-N-is-DP|
                       ^structure-type CP
                       ^current-word IS-V
                       ^prior-word N
                       ^prior-word-first true
                       ^message-type adjective-definition
                       ^assigners <isa> <isb> <isc> )#<isd> )
           (<isa> ^structure-type N
                  ^before-type IS-V
                  ^parent <sentence>
                  ^syntactic-structure head
                  ^semantic-structure object-feature
                  ^referent-type literal
                  ^required true)
           (<isb> ^structure-type IS-V
                  ^after <isa>
                  ^before <isc>
                #  ^lexical-item-spelling |is|
                  ^parent <sentence>
                  ^syntactic-structure predicate
                  ^semantic-structure assignment
                  ^before-type T
                  ^required true
                  ^referent <iso1>)
           (<iso1> ^id soar-assign)
           (<isc> ^structure-type DP
                  ^parent <sentence>
                  ^after <isb>
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^required true)
#           (<isd> ^structure-type T
#                  ^required true
#                  ^syntactic-structure terminator
#                  ^parent <sentence>)
}


# This is red / a block / in the pantry.
### Should extend so can handle unknown...
smem --add {
           (<sentence> ^construction |*-This-is-DP/ADJ/PP|
                       ^structure-type CP
                       ^message-type object-description
                       ^current-word IS-V
                       ^prior-word THIS
                       ^prior-word-first true
                       ^assigners <isa> <isb> <isc> <isd> <ise>)#<isf>)
            (<isa> ^structure-type THIS
                  ^before-type IS-V
                  ^parent <sentence>
                  ^syntactic-structure head
                  ^semantic-structure object
                  ^specifier definite                  
                  ^demonstrative true
                  ^required true)
           (<isb> ^structure-type IS-V
                  ^before <isc> 
                  ^before <isd>
                  ^before <ise>
                  ^parent <sentence>
                  ^syntactic-structure predicate
                  ^semantic-structure assignment
                  ^before-type T
                  ^required true
                  ^referent <iso1>)
           (<iso1> ^id soar-assign)
           (<isc> ^structure-type DP
                  ^after <isb>
                  ^exclusive <isd> <ise>
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true
                  ^referent-type literal)
           (<isd> ^structure-type ADJ
                  ^after <isb>
                  ^exclusive <isc> <ise>
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true
                  ^referent-type literal)
           (<ise> ^structure-type PP
                  ^after <isb>
                  ^exclusive <isc> <isd>
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure location
                  ^optional true)
#           (<isf> ^structure-type T
#                  ^required true
#                  ^syntactic-structure terminator
#                  ^parent <sentence>)
}
# What is in the pantry?
smem --add {
           (<sentence> ^construction |*-What-is-PP-QT|
                       ^current-word IS-V
                       ^prior-word |what|
                       ^prior-word-first true
                       ^assigners <isb> <isc> <isd>
                       ^message-type what-is-question
                       ^structure-type S)
           (<isb> ^structure-type IS-V
                  ^before <isb>
                 # ^lexical-item-spelling |is|
                  ^parent <sentence>
                  ^syntactic-structure predicate
                  ^semantic-structure what-question
                  ^before-type T
                  ^required true)
           (<isc> ^structure-type PP
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure relation
                  ^constraint <con2>
                  ^required true)
           (<con2> ^type location)
           (<isd> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator
                  ^parent <sentence>)
}
# Where is the green block?
smem --add {
           (<sentence> ^construction |*-Where-is-DP-QT|
                       ^current-word IS-V
                       ^prior-word |where|
                       ^prior-word-first true
                       ^message-type where-is-question
                       ^assigners <isb> <isc> <isd>
                       ^structure-type S)
           (<isb> ^structure-type IS-V
                  ^before <isb>
                #  ^lexical-item-spelling |is|
                  ^parent <sentence>
                  ^syntactic-structure predicate
                  ^semantic-structure where-question
                  ^before-type T
                  ^required true)
           (<isc> ^structure-type DP
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure object
                  ^constraint <con2>
                  ^required true)
           (<con2> ^type object)
           (<isd> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator
                  ^parent <sentence>)
}


# There are zero locations that are not below a block.
### Should extend so can handle unknown...
smem --add {
           (<sentence> ^construction |*-There-is-DP/ADJ/PP|
                       ^structure-type CP
                       ^message-type object-description
                       ^current-word IS-V
                       ^prior-word |there|
                       ^prior-word-first true
                       ^assigners <isb> <isc> <isd> <ise>)#<isf>)
          (<isb> ^structure-type IS-V
                  ^before <isc> 
                  ^before <isd>
                  ^before <ise>
                  ^parent <sentence>
                  ^syntactic-structure predicate
                  ^semantic-structure assignment
                  ^before-type T
                  ^required true
                  ^referent <iso1>)
           (<iso1> ^id soar-assign)
           (<isc> ^structure-type DP
                  ^after <isb>
                  ^exclusive <isd> <ise>
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isd> ^structure-type ADJ
                  ^after <isb>
                  ^exclusive <isc> <ise>
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true
                  ^referent-type literal)
           (<ise> ^structure-type PP
                  ^after <isb>
                  ^exclusive <isc> <isd>
                  ^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure location
                  ^optional true)
#           (<isf> ^structure-type T
#                  ^required true
#                  ^syntactic-structure terminator
#                  ^parent <sentence>)
}
