
# The green block is {big} {a rabbit} {in the pantry}
smem --add {
           (<sentence> ^construction |*-DP-is-ADJ/DP/PP/C-ADJP-CONJP|
                       ^structure-type CP
                       ^current-word IS-V
                       ^message-type object-description
                       ^prior-word DP
                       ^prior-word-first true
                       ^assigners <isa> <is-is> <isab> <isb> <isc> <isd> <ise> <isf> <isg> <ish>) 
           (<isa> ^structure-type DP
                  ^relative-position before
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
           (<is-is> ^structure-type IS-V
                    ^syntactic-structure predicate
                    ^before <ish>
                    ^required true)
          (<isab> ^structure-type ADV  # NOT - semantic-value is negation
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier
                  ^optional true
                  )
           (<isb> ^structure-type ADJ
                  ^exclusive <isc> <isd> <ise> <isf> <isg> <ish>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal-lti
                  ^optional true)
           (<isc> ^structure-type DP
                  ^exclusive <isb> <isd> <ise> <isf> <isg> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal-lti
                  ^optional true)
           (<isd> ^structure-type N   # In case just get |The red block is rabbit.|
                  ^exclusive <isb> <isc> <ise> <isf> <isg> 
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal-lti
                  ^optional true)
           (<ise> ^structure-type PP
                  ^exclusive <isb> <isc> <isd> <isf> <isg> 
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
           (<isf> ^structure-type U
                  ^exclusive <isb> <isc> <isd> <ise> <isg> 
                  ^predicted-structure-type ADJ
                  ^relative-position after
                  ^referent-type literal-lti
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isg> ^structure-type C-ADJ-P
                  ^exclusive <isb> <isc> <isd> <ise> <isf> <ish>
                  ^relative-position after
                  ^referent-type literal-lti
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
          (<ish> ^structure-type CONJP
                  ^after <isc> <isd> <ise> <isf> <isg>
                  ^syntactic-structure predicate
                  ^semantic-structure *copy*
                  ^optional true)
 }

## [Wait until] the chicken is cooked.
smem --add {
           (<sentence> ^construction |DP-is-ADJ/DP/PP|
                       ^structure-type C
                       ^current-word IS-V
                       ^message-type object-description
                       ^prior-word DP
                       ^prior-word-first false
                       ^assigners <isa> <is-is> <isab> <isb> <isc> <isd> 
                       ^converts-to CP) 
           (<isa> ^structure-type DP
                 #^parent <sentence>
                  ^relative-position before
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^required true)
           (<is-is> ^structure-type IS-V
                   # ^lexical-item-spelling |is|
                   #^parent <sentence>
                    ^syntactic-structure predicate
                    ^required true)
          (<isab> ^structure-type ADV  # NOT - semantic-value is negation
                 #^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure adverb-modifier
                  ^semantic-structure modifier)
           (<isb> ^structure-type ADJ
                  ^exclusive <isc> <isd> 
                 #^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isc> ^structure-type DP
                  ^exclusive <isb> <isd> 
                 #^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isd> ^structure-type PP
                  ^exclusive <isb> <isc> 
                 #^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)
}


## If first word is unknown - see |*-U-is-DP-T| in constructions-unknown-words.

# Green is a color. Medium is a size. - Already known
smem --add {
           (<sentence> ^construction |*-ADJ-is-DP|
                       ^structure-type CP
                       ^current-word IS-V
                       ^prior-word ADJ
                       ^prior-word-first true
                       ^message-type adjective-definition #ignore
                       ^assigners <isa> <isb> <isc>) #<isd> )
           (<isa> ^structure-type ADJ
                  ^before <isb>
                 #^parent <sentence>
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^referent-type literal-lti
                  ^required true)
           (<isb> ^structure-type IS-V
                  ^after <isa>
                  ^before <isc>
                 # ^lexical-item-spelling |is|
                 #^parent <sentence>
                  ^syntactic-structure predicate
                  ^required true)
           (<isc> ^structure-type DP
                 #^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^required true)
#           (<isd> ^structure-type T
#                  ^required true
#                  ^syntactic-structure terminator
#                 #^parent <sentence>)
}

# Sphere is a shape. - Already known
smem --add {
           (<sentence> ^construction |*-N-is-DP|
                       ^structure-type CP
                       ^current-word IS-V
                       ^prior-word N
                       ^prior-word-first true
                       ^message-type adjective-definition
                       ^assigners <isa> <isb> <isc> )#<isd> )
           (<isa> ^structure-type N
                  ^before <isb>
                 #^parent <sentence>
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^referent-type literal-lti
                  ^required true)
           (<isb> ^structure-type IS-V
                  ^after <isa>
                  ^before <isc>
                #  ^lexical-item-spelling |is|
                 #^parent <sentence>
                  ^syntactic-structure predicate
                  ^required true)
           (<isc> ^structure-type DP
                 #^parent <sentence>
                  ^after <isb>
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^required true)
#           (<isd> ^structure-type T
#                  ^required true
#                  ^syntactic-structure terminator
#                 #^parent <sentence>)
}


# This is red / a block / in the pantry / smaller than
### Should extend so can handle unknown...
#smem --add {
#           (<sentence> ^construction |*-This-is-DP/ADJ/PP/U-CONJP|
#                       ^structure-type C
#                       ^converts-to CP
#                       ^message-type object-description
#                       ^current-word IS-V
#                       ^prior-word |this|
#                       ^prior-word-first true
#                       ^assigners <isb> <isc> <isd> <ise> <isf> <isg> <ish>)
#            (<isa> ^structure-type THIS
#                  ^before <isb>
#                 #^parent <sentence>
#                  ^syntactic-structure head
#                  ^semantic-structure arg1
#                  ^specifier definite                  
#                  ^demonstrative true
#                  ^required true)
#           (<isb> ^structure-type IS-V
#                  ^before <isc> 
#                  ^before <isd>
#                  ^before <ise>
#                 #^parent <sentence>
#                  ^syntactic-structure predicate
#                  ^required true)
#           (<isc> ^structure-type DP
#                  ^after <isb>
#                  ^exclusive <isd> <ise> <isf>  <isg>
#                 #^parent <sentence>
#                  ^relative-position after
#                  ^syntactic-structure predicate
#                  ^semantic-structure predicate
#                  ^optional true
#                  ^referent-type literal-lti)
#           (<isd> ^structure-type ADJ
#                  ^after <isb>
#                  ^exclusive <isc> <ise> <isf> <isg>
#                 #^parent <sentence>
#                  ^relative-position after
#                  ^syntactic-structure predicate
#                  ^semantic-structure predicate
#                  ^referent-type literal-lti
#                  ^optional true)
#           (<ise> ^structure-type PP
#                  ^after <isb>
#                  ^exclusive <isc> <isd> <isf> <isg>
#                 #^parent <sentence>
#                  ^relative-position after
#                  ^syntactic-structure complement
#                  ^semantic-structure arg2
#                  ^optional true)
#           (<isf> ^structure-type U
#                  ^exclusive <isc> <isd> <ise> <isg>
#                 #^parent <sentence>
#                  ^predicted-structure-type ADJ
#                  ^relative-position after
#                  ^referent-type literal-lti
#                  ^syntactic-structure predicate
#                  ^semantic-structure predicate
#                  ^optional true)
#         (<isg> ^structure-type C-ADJ-P  
#                  ^after <isb>
#                  ^exclusive <isc> <isd> <ise> <isf> 
#                 #^parent <sentence>
#                  ^relative-position after
#                  ^referent-type literal-lti
#                  ^syntactic-structure predicate
#                  ^semantic-structure predicate
#                  ^optional true)
#           (<ish> ^structure-type CONJP
#                  ^after <isc> <isd> <ise> <isf>
#                 #^parent <sentence>
#                  ^syntactic-structure predicate
#                  ^semantic-structure *copy*
#                  ^optional true)
#}
# What is in the pantry?
smem --add {
           (<sentence> ^construction |*-What-is-PP/DP-QT|
                       ^current-word IS-V
                       ^prior-word |what|
                       ^prior-word-first true
                       ^assigners <isb> <isc> <isd> <ise>
                       ^message-type what-is-question
                       ^structure-type S)
           (<isb> ^structure-type IS-V
                  ^syntactic-structure predicate
                  ^semantic-structure what-question
                  ^required true)
           (<isc> ^structure-type PP
                  ^exclusive <isd>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure relation
                  ^constraint <con2>
                  ^optional true)
           (<con2> ^type location)     
           (<isd> ^structure-type DP
                  ^exclusive <isc>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^optional true)    
           (<ise> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator)
}

# What <predicate> is DP?  What color is this? What size is the red triangle?
# syntactic-referent-type N/ADJ
smem --add {
           (<sentence> ^construction |*-What-N-is-DP-QT|
                       ^current-word N
                       ^prior-word |what|
                       ^prior-word-first true
                       ^assigners <isa> <isb> <isc> <isd> <ise>
                       ^message-type predicate-question
                       ^structure-type S)
           (<isa> ^structure-type N
                  ^before <isb>
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^before <ise>
                  ^required true)
           (<isb> ^structure-type IS-V
                  ^syntactic-structure nil
                  ^semantic-structure nil
                  ^before <ise>
                  ^required true)
           (<isc> ^structure-type DP
                  ^exclusive <isd>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^constraint <con2>
                  ^optional true)
           (<con2> ^type object)
           (<isd> ^structure-type THIS
                  ^exclusive <isc>
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^specifier definite                  
                  ^demonstrative true
                  ^optional true)           
           (<ise> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator)
}

# Where is the green block?
smem --add {
           (<sentence> ^construction |*-Where-is-DP-QT|
                       ^current-word IS-V
                       ^prior-word |where|
                       ^prior-word-first true
                       ^message-type where-is-question
                       ^assigners <isb> <isc> <isd>
                       ^structure-type S)
           (<isb> ^structure-type IS-V
                  ^before <isb>
                  ^syntactic-structure predicate
                  ^semantic-structure where-question
                  ^before <isd>
                  ^required true)
           (<isc> ^structure-type DP
                  ^relative-position after
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^constraint <con2>
                  ^required true)
           (<con2> ^type object)
           (<isd> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator)
}


# There are zero locations that are not below a block.
### Should extend so can handle unknown...
smem --add {
           (<sentence> ^construction |*-There-is-DP/ADJ/PP|
                       ^structure-type CP
                       ^message-type object-description
                       ^current-word IS-V
                       ^prior-word |there|
                       ^prior-word-first true
                       ^assigners <isb> <isc> <isd> <ise>)#<isf>)
          (<isb> ^structure-type IS-V
                  ^before <isc> 
                  ^before <isd>
                  ^before <ise>
                 #^parent <sentence>
                  ^syntactic-structure predicate
                  ^required true)
           (<isc> ^structure-type DP
                  ^after <isb>
                  ^exclusive <isd> <ise>
                 #^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true)
           (<isd> ^structure-type ADJ
                  ^after <isb>
                  ^exclusive <isc> <ise>
                 #^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true
                  ^referent-type literal)
           (<ise> ^structure-type PP
                  ^after <isb>
                  ^exclusive <isc> <isd>
                 #^parent <sentence>
                  ^relative-position after
                  ^syntactic-structure complement
                  ^semantic-structure arg2
                  ^optional true)
#           (<isf> ^structure-type T
#                  ^required true
#                  ^syntactic-structure terminator
#                 #^parent <sentence>)
}


# Is the green sphere on the table?
# Is the read arch to the right of the green sphere?
# Is this red?
# Is the large sphere green? - 104 
# Is this a sphere?
# Is the large orange block a sphere?

### Should extend so can handle unknown...
smem --add {
           (<sentence> ^construction |*-Is-DP-DP/ADJ/PP?|
                       ^structure-type S
                       ^message-type object-question
                       ^current-word is
                       ^prior-word |*|
                       ^assigners <isb> <isd> <ise> <isf> <isg>)
           (<isb> ^structure-type DP
                  ^before <isd> <ise> <isf>
                  ^syntactic-structure head
                  ^semantic-structure arg1
                  ^specifier definite                  
                  ^demonstrative true
                  ^optional true)
                      
           (<isd> ^structure-type DP
                  ^exclusive <ise> <isf> 
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^optional true
  #                ^referent-type literal-lti
                  )
           (<ise> ^structure-type ADJ
                  ^after <isb>
                  ^exclusive <isd> <isf>
                  ^syntactic-structure predicate
                  ^semantic-structure predicate
                  ^referent-type literal-lti
                  ^optional true)
           (<isf> ^structure-type PP
                  ^exclusive <isd> <ise>
                  ^syntactic-structure complement
                  ^semantic-structure relation
                  ^optional true)

           (<isg> ^structure-type QT
                  ^required true
                  ^syntactic-structure terminator)

}
