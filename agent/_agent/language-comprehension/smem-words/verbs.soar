## Example Verbs: Move, Store, Put {down}, Pick {up}, Open, Close, Turn {on/off}, Cook, Discard, Serve, Organize, Set, Clean {up}
##        is, are
#Action verbs: run, hop, think, dream, imagine [have a direct object, sometimes indirect object]
# Linking Verbs: is, are, seems,  [have a predicate noun or predicate adjective]


smem --add {
           
############################
   #### VERBS
           
            ## MOVE
           (<move> ^spelling |move|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <a1> <a2>
                   ^referent <oo1>
                   ^converts-to  VP)
           (<oo1> ^id <move-lti>)
           (<a1> ^structure-type DP
                 ^parent <move>
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^constraint <con1> <con11>
                 ^required true)
           (<con1> ^movable true)
           (<con11> ^type object)
           (<a2> ^structure-type PP
                 ^parent <move>
                 ^relative-position after
                 ^syntactic-structure complement2
                 ^semantic-structure arg2
                 ^required true)
           (<move-lti> ^name move1)
           
   ## STORE
           (<store> ^spelling |store|
                    ^structure-type V
                    ^semantic-structure action
                    ^tense present
                    ^number singular
                    ^assigners <a42> <a43>
                    ^referent <o41>
                    ^converts-to  VP)
           (<o41> ^id <store-lti>)
          (<store-lti> ^name store1)  
          (<a42> ^structure-type DP
                  ^syntactic-structure head 
                  ^parent <store>
                  ^semantic-structure arg1
                  ^relative-position after
                  ^constraint <con41> <con411>
                  ^required true)
           (<con41> ^movable true)
           (<con411> ^type object)
           (<a43> ^structure-type PP     
                  ^parent <store>
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2 
                  ^optional true)
          (<store-lti> ^name store1)       
   ## PUT
           
           (<put> ^spelling |put|
                  ^structure-type V
                  ^semantic-structure action
                  ^tense present
                  ^number singular
                  ^assigners <puta1> <puta2>
                  ^referent <puto1>
                  ^converts-to  VP)
           (<puto1> ^id <put-lti>)
           (<put-lti> ^name soar-putdown1)
           (<puta1> ^structure-type DP
                    ^parent <put>
                    ^relative-position after
                    ^syntactic-structure head # was complement
                    ^semantic-structure arg1
                    ^constraint <putcon1> <putcon11>
                    ^required true)
           (<putcon1> ^movable true)
           (<putcon11> ^type object)
           (<puta2> ^structure-type PP
                    ^parent <put>
                    ^relative-position after
                    ^syntactic-structure complement2
                    ^semantic-structure arg2
                    ^required true)
           
     ## pick
           
           (<pick> ^spelling |pick|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <picka2>
                   ^referent <picko1>
                   ^converts-to  VP)
           (<picko1> ^id <pick-lti>)
           (<pick-lti> ^name pickup1)
           (<picka2> ^structure-type DP
                     ^parent <pick>
                     ^relative-position after
                     ^syntactic-structure head # was complement
                     ^semantic-structure arg1
                     ^constraint <pickcon2> <pickcon21>
                     ^optional true)
           (<pickcon2> ^movable true)
           (<pickcon21> ^type object)
           
              
   ## Stack - can take a conjunction of objects to stack
           
           (<stack> ^spelling |stack|
                  ^structure-type V
                  ^semantic-structure action
                  ^tense present
                  ^number singular
                  ^assigners <stack1> <stack2> <stack3> <stack4> <stack5>
                  ^referent <stacko1>
                  ^converts-to VP)
           (<stacko1> ^id <stack-lti>)
           (<stack-lti> ^name stack1)
           (<stack1> ^structure-type DP
                     ^parent <stack>
                     ^relative-position after
                     ^syntactic-structure head
                     ^semantic-structure arg1
                     ^constraint <stackcon1> <stackcon2>
                     ^repeatable true
                     ^before <stack3>
                     ^optional true)
           (<stackcon1> ^movable true)
           (<stackcon2> ^type object)
           (<stack2> ^structure-type COMMA
                     #^lexical-item-spelling |,|
                     ^parent <stack>
                    # ^after <stack2>
                     ^syntactic-structure nil
                     ^repeatable true
                     ^optional true)         
           (<stack3> ^structure-type CONJ
                     #^lexical-item-spelling |and|
                     ^parent <stack>
                     #^after <stack1>
                     ^syntactic-structure nil
                     ^optional true)
           (<stack4> ^structure-type DP
                     ^parent <stack>
                     ^after <stack3>
                     ^syntactic-structure complement
                     ^semantic-structure arg1
                     ^constraint <stackcon1> <stackcon2>
                     ^optional true)                   
           (<stack5> ^structure-type PP
                     ^parent <stack>
                     ^after-type DP
                     ^syntactic-structure complement2
                     ^semantic-structure arg2
                     ^optional true)
           
           ## open
           
           (<open> ^spelling |open|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <opena2>
                   ^referent <openo1>
                   ^converts-to  VP)
           (<openo1> ^id <open-lti>)
           (<open-lti> ^name open1)
           (<opena2> ^structure-type DP
                     ^parent <open>
                     ^relative-position after
                     ^syntactic-structure complement
                     ^semantic-structure arg1
                     ^optional true)
           
        ## close
           
           (<close> ^spelling |close|
                    ^structure-type V
                    ^semantic-structure action
                    ^tense present
                    ^number singular
                    ^assigners <closea2>
                    ^referent <closeo1>
                    ^converts-to  VP)
           (<closeo1> ^id <close-lti>)
           (<close-lti> ^name close1)
           (<closea2> ^structure-type DP
                      ^parent <close>
                      ^relative-position after
                      ^syntactic-structure complement
                      ^semantic-structure arg1
                      ^optional true)
  ## discard
           
           (<discard> ^spelling |discard|
                      ^structure-type V
                      ^semantic-structure action
                      ^tense present
                      ^number singular
                      ^assigners <a42x> <a43x>
                      ^referent <o41x>
                      ^converts-to  VP)
           (<o41x> ^id <discard-lti>)
           (<discard-lti> ^name discard1)
           (<a42x> ^structure-type DP
                   ^syntactic-structure complement
                   ^parent <discard>
                   ^semantic-structure arg1
                   ^relative-position after
                   ^constraint <con41x> <con411x>
                   ^required true)
           (<con41x> ^movable true)
           (<con411x> ^type object)
           (<a43x> ^structure-type PP     # This should be an assigner of pantry1
                   ^parent <discard>
                   ^relative-position after
                   ^syntactic-structure complement2
                   ^semantic-structure arg2 
                   ^optional true)
           
        ## cook
           
           (<cook> ^spelling |cook|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <cooka2>
                   ^referent <cooko1>
                   ^converts-to  VP)
           (<cooko1> ^id <cook-lti>)
           (<cook-lti> ^name cook1)
           (<cooka2> ^structure-type DP
                     ^parent <cook>
                     ^relative-position after
                     ^syntactic-structure complement
                     ^semantic-structure arg1
                     ^constraint <cookcon2> <cookcon21>
                     ^optional true)
           (<cookcon2> ^movable true)
           (<cookcon21> ^type object)
           
        ## serve
           
           (<serve> ^spelling |serve|
                    ^structure-type V
                    ^semantic-structure action
                    ^tense present
                    ^number singular
                    ^assigners <servea2>
                    ^referent <serveo1>
                    ^converts-to  VP)
           (<serveo1> ^id <serve-lti>)
           (<serve-lti> ^name serve1)
           (<servea2> ^structure-type DP
                      ^parent <serve>
                      ^relative-position after
                      ^syntactic-structure complement
                      ^semantic-structure arg1
                      ^constraint <servecon2> <servecon21>
                      ^optional true)
           (<servecon2> ^movable true)
           (<servecon21> ^type object)
           
        ## set
           
           (<set> ^spelling |set|
                  ^structure-type V
                  ^semantic-structure action
                  ^tense present
                  ^number singular
                  ^assigners <seta2>
                  ^referent <seto1>
                  ^converts-to  VP)
           (<seto1> ^id <set-lti>)
           (<set-lti> ^name set1)
           (<seta2> ^structure-type DP
                    ^parent <set>
                    ^relative-position after
                    ^syntactic-structure complement
                    ^semantic-structure arg1
                    ^constraint <setcon2> <setcon21>
                    ^optional true)
           (<setcon2> ^movable true)
           (<setcon21> ^type object)
           
           ## organize
           
           (<organize> ^spelling |organize|
                       ^structure-type V
                       ^semantic-structure action
                       ^tense present
                       ^number singular
                       ^assigners <organizea2>
                       ^referent <organizeo1>
                       ^converts-to VP)
           (<organizeo1> ^id <organize-lti>)
           (<organize-lti> ^name organize1)
           (<organizea2> ^structure-type DP
                         ^parent <organize>
                         ^relative-position after
                         ^syntactic-structure complement
                         ^semantic-structure arg1
                         ^optional true)
           
           ## clean
           
           (<clean> ^spelling |clean|
                    ^structure-type V
                    ^semantic-structure action
                    ^tense present
                    ^number singular
                    ^assigners <cleana2>
                    ^referent <cleano1>
                    ^converts-to  VP)
           (<cleano1> ^id <clean-lti>)
           (<clean-lti> ^name clean1)
           (<cleana2> ^structure-type DP
                      ^parent <clean>
                      ^relative-position after
                      ^syntactic-structure complement
                      ^semantic-structure arg1
                      ^optional true)

      ## turn
           (<turn> ^spelling |turn|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <turna1>
                               <turna2>
                               <turna3>
                   ^referent <turno1>
                   ^converts-to VP)
           (<turno1> ^id <turn-lti>)
           (<turn-lti> ^name turn1)
           (<turna1> ^structure-type DP
                     ^parent <turn>
                     ^relative-position after
                     ^syntactic-structure complement
                     ^semantic-structure arg1
                     ^before <turna2> 
                     ^before <turna3>
                     ^constraint <turncon1> 
                     ^optional true)
           (<turncon1> ^type location)
           (<turna2> ^structure-type ADJ
                     ^exclusive <turna3>
                     ^lexical-item-spelling |on| 
                     ^parent <turn>
                     ^relative-position after
                     ^after <turna1>
                     ^syntactic-structure adjunct
                     ^semantic-structure on-off-state
                     ^required true
                     ^referent-type literal)
           (<turna3> ^structure-type ADJ
                     ^exclusive <turna2>
                     ^lexical-item-spelling |off|
                     ^parent <turn>
                     ^relative-position after
                     ^after <turna1>
                     ^syntactic-structure adjunct
                     ^semantic-structure on-off-state
                     ^required true
                     ^referent-type literal)

            ## WAIT
           (<wait> ^spelling |wait|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <waita1> 
                   ^referent <wait1>
                   ^converts-to  VP)
           (<wait1> ^id <wait-lti>)
           (<wait-lti> ^name wait1)
           (<waita1> ^structure-type PP
                     ^parent <wait>
                     ^relative-position after
                     ^syntactic-structure complement2
                     ^semantic-structure arg1
                     ^required true)
}