## Example Verbs: Move, Store, Put {down}, Pick {up}, Open, Close, Turn {on/off}, Cook, Discard, Serve, Organize, Set, Clean {up}
##        is, are
#Action verbs: run, hop, think, dream, imagine [have a direct object, sometimes indirect object]
# Linking Verbs: is, are, seems,  [have a predicate noun or predicate adjective]


smem --add {
           
############################
   #### VERBS
        

   ## MOVE
           (<move> ^spelling |move|
                   ^referent <oo1>
                   ^super-type @T999)
           (<oo1> ^id @A1008)
        
   ## PUT
           (<put> ^spelling |put|
                    ^referent <oo3>
                    ^super-type @T999 
                   ^can-be-part-of |put-down|)
          (<oo3> ^id @A1000)  
            
   ## discard
           (<discard> ^spelling |discard|
                      ^referent <discard-r>
                      ^super-type @T998)
          (<discard-r> ^id @A1010)   
              
    ## pick
           (<pick> ^spelling |pick|
                  ^referent <oo4>
                  ^super-type @T998
                  ^can-be-part-of |pick-up|)
          (<oo4> ^id @A1001) 
          
    ## cook
           (<cook> ^spelling |cook|
                  ^referent <cook-r>
                  ^super-type @T998)
          (<cook-r> ^id @A1012)    
          
     ## serve
           (<serve> ^spelling |serve|
                  ^referent <serve-r>
                  ^super-type @T998)
          (<serve-r> ^id @A1017)   
                  
    ## open
           (<open> ^spelling |open|
                   ^referent <oo5>
                   ^super-type @T997                 
                   ^can-be-part-of |open-up|)
           (<oo5> ^id @A1003)                
           
     ## close           
           (<close> ^spelling |close|
                    ^referent <closeo1>
                    ^super-type @T997 
                    ^converts-to VP)
           (<closeo1> ^id @A1004)
           
    ## organize           
           (<organize> ^spelling |organize|
                    ^referent <organize-r>
                    ^super-type @T997 
                    ^converts-to  VP)
           (<organize-r> ^id @O8009)

    ## clean           
           (<clean> ^spelling |clean|
                    ^referent <clean-r>
                    ^super-type @T997 
                    ^converts-to  VP)
           (<clean-r> ^id @A10014)
 
    ## set           
           (<set> ^spelling |set|
                    ^referent <set-r>
                    ^super-type @T997 
                    ^converts-to  VP)
           (<set-r> ^id @A10013)
                     
    ## activate           
           (<activate> ^spelling |activate|
                    ^referent <activate-r>
                    ^super-type @T997 
                    ^converts-to  VP)
           (<activate-r> ^id @A10005)
                          
    ## STORE
          (<store> ^spelling |store|
                   ^referent <oo2>
                   ^super-type @T996)
          (<oo2> ^id @A1009)
          
                                    
    ## Point
          (<point> ^spelling |point|
                   ^referent <point-r>
                   ^super-type @T999)
          (<point-r> ^id @A1002)
          
     ## Stop
          (<stop> ^spelling |stop|
                   ^referent <stop-r>
                   ^super-type @T994)
          (<stop-r> ^id @A1006)
            
   ## Stack - can take a conjunction of objects to stack
           
           (<stack> ^spelling |stack|
                  ^structure-type V
                  ^semantic-structure action
                  ^tense present
                  ^number singular
                  ^assigners <stack1> <stack2> 
                  ^referent <stacko1>
                  ^converts-to VP)
           (<stacko1> ^id @A1011)
           (<stack1> ^structure-type DP
                    #^parent <stack>
                     ^relative-position after
                     ^syntactic-structure head
                     ^semantic-structure arg1
                     ^constraint <stackcon1> <stackcon2>
                     ^repeatable true
                     ^optional true)
           (<stackcon1> ^movable true)
           (<stackcon2> ^type object)
           (<stack2> ^structure-type CONJP
                     ^after <stack1>
                    #^parent <sentence>
                     ^syntactic-structure predicate
                     ^semantic-structure *copy*
                     ^repeatable true
                     ^optional true)
}           
 
smem --add { 
      ## turn
           (<turn> ^spelling |turn|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <turna1>
                               <turna2>
                               <turna3>
                   ^referent <turno1>
                   ^converts-to VP)
           (<turno1> ^id @A1015)
           (<turna1> ^structure-type DP
                    #^parent <turn>
                     ^relative-position after
                     ^syntactic-structure complement
                     ^semantic-structure arg1
                     ^before <turna2> 
                     ^before <turna3>
                     ^constraint <turncon1> 
                     ^optional true)
           (<turncon1> ^type location)
           (<turna2> ^structure-type ADJ
                     ^exclusive <turna3>
                     ^lexical-item-spelling |on| 
                    #^parent <turn>
                     ^relative-position after
                     ^after <turna1>
                     ^syntactic-structure adjunct
                     ^semantic-structure on-off-state
                     ^required true
                     ^referent-type literal)
           (<turna3> ^structure-type ADJ
                     ^exclusive <turna2>
                     ^lexical-item-spelling |off|
                    #^parent <turn>
                     ^relative-position after
                     ^after <turna1>
                     ^syntactic-structure adjunct
                     ^semantic-structure on-off-state
                     ^required true
                     ^referent-type literal)

            ## WAIT
           (<wait> ^spelling |wait|
                   ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <waita1> 
                   ^referent <wait1>
                   ^converts-to  VP)
           (<wait1> ^id @A1007)
           (<waita1> ^structure-type PP
                    #^parent <wait>
                     ^relative-position after
                     ^syntactic-structure complement2
                     ^semantic-structure arg1
                     ^required true)
}
        

### VERB such as Move, Put, Store - has a object (DP) it is moving and a destination specified by a PP
         
smem --add {            
           (@T999 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <VT1> <VT2>
                   ^converts-to  VP)
          (<VT1> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^constraint <con1> <con11>
                 ^required true)
           (<con1> ^movable true)
           (<con11> ^type object)
           (<VT2> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^required true)
}
         
## Has single argument, which is a movable object it is manipulating

smem --add {            
           (@T998 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <VT1> 
                   ^converts-to  VP)
          (<VT1> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^constraint <con1> <con11>
                 ^required true)
           (<con1> ^movable true)
           (<con11> ^type object)
}
   
## Has single argument, such as Set or Organize, not necessarily a movable object.
smem --add {            
           (@T997 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <VT1> 
                   ^converts-to  VP)
          (<VT1> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^required true)
}        

## Has optional second argument (Store)

smem --add {            
           (@T996  ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners <VT1> <VT2>
                   ^converts-to  VP)
          (<VT1> ^structure-type DP
                 ^relative-position after
                 ^syntactic-structure head
                 ^semantic-structure arg1
                 ^constraint <con1> <con11>
                 ^required true)
           (<con1> ^movable true)
           (<con11> ^type object)
           (<VT2> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^optional true)
}

### VERB such as Point a destination specified by a PP
         
smem --add {            
           (@T995 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular
                   ^assigners  <VT1> 
                   ^converts-to  VP)
           (<VT1> ^structure-type PP
                  ^relative-position after
                  ^syntactic-structure complement2
                  ^semantic-structure arg2
                  ^required true)
}

### VERB such as stop that has no arguments         
smem --add {            
           (@T994 ^structure-type V
                   ^semantic-structure action
                   ^tense present
                   ^number singular 
                   ^converts-to  VP)
}


#            ## MOVE
#           (<move> ^spelling |move|
#                   ^structure-type V
#                   ^semantic-structure action
#                   ^tense present
#                   ^number singular
#                   ^assigners  <a1> <a2>
#                   ^referent <oo1>
#                   ^converts-to  VP)
#           (<oo1> ^id <move-lti>)
#           (<a1> ^structure-type DP
#                #^parent <move>
#                 ^relative-position after
#                 ^syntactic-structure head
#                 ^semantic-structure arg1
#                ^constraint <con1> <con11>
#                 ^required true)
#           (<con1> ^movable true)
#          (<con11> ^type object)
#           (<a2> ^structure-type PP
#                #^parent <move>
#                 ^relative-position after
#                 ^syntactic-structure complement2
#                 ^semantic-structure arg2
#                 ^required true)
           
