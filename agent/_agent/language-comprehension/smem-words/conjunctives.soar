# Conjunctions: for, and, but, or, nor, because, while, if, whenever, so, and yet
#1. Coordinating conjunctions join things that are the same, and there are only seven of these. (for, and, nor, but, or, yet, so)
#2. Correlative conjunctions are always used in pairs. (either...or, both...and)
#3. Subordinating conjunctions join dependent clauses with independent clauses. There are many subordinating conjunctions. (because, while, whenever, since, if...)


## The DP being predicate causes an issue with "This is red and a triangle." The
## triangle will be ^arg1 and not ^predicate. This is because it conflicts with 
## the use in "Stack the red block, the green block, and the orange block." which 
## needs the conjunction DP's to be arg1.

smem --add {
           (<and> ^spelling |and|
                  ^referent nil
                  ^structure-type CONJ
                  ^converts-to CONJP
                  ^assigners <ass1> <ass2> <ass3>)
           (<ass1> ^structure-type ADJ
                   ^exclusive <ass2> <ass3>
                  #^parent <and>
                   ^relative-position after
                   ^syntactic-structure nil
                   ^semantic-structure predicate
                   ^referent-type literal-lti
                   ^optional true)
           (<ass2> ^structure-type DP
                   ^exclusive <ass1> <ass3>
                  #^parent <and>
                   ^relative-position after
                   ^syntactic-structure nil
                   ^semantic-structure arg1
                   ^optional true)
           (<ass3> ^structure-type PP
                   ^exclusive <ass1> <ass2> 
                  #^parent <and>
                   ^relative-position after
                   ^syntactic-structure complement
                   ^semantic-structure arg2
                   ^optional true)
}

smem --add {
           (<and>  ^spelling |,|
                   ^referent nil
                   ^structure-type CONJ
                   ^converts-to CONJP                  
                   ^prior-word-first false
                   ^assigners <ass1> <ass2> <ass3>)
          (<ass1> ^structure-type ADJ
                   ^exclusive <ass2> 
                  #^parent <and>
                   ^relative-position after
                   ^syntactic-structure nil
                   ^semantic-structure predicate
                   ^referent-type literal-lti
                   ^optional true)
           (<ass2> ^structure-type DP
                   ^exclusive <ass1> 
                  #^parent <and>
                   ^relative-position after
                   ^syntactic-structure nil
                   ^semantic-structure arg1
                   ^optional true)
           (<ass3> ^structure-type CONJP
                   ^relative-position after
                  # ^after <ass1> <ass2>
                  #^parent <and>
                   ^syntactic-structure predicate
                   ^semantic-structure *copy*
                   ^optional true)
}

smem --add {
           (<and> ^current-word |and|
                  ^prior-word |,|
                  ^spelling |, and|
                  ^referent nil
                  ^structure-type CONJ
                  ^converts-to CONJP
                  ^assigners <ass1> <ass2> <ass3>)
           (<ass1> ^structure-type ADJ
                   ^exclusive <ass2> <ass3>
                  #^parent <and>
                   ^relative-position after
                   ^syntactic-structure nil
                   ^semantic-structure predicate
                   ^referent-type literal-lti
                   ^optional true)
           (<ass2> ^structure-type DP
                   ^exclusive <ass1> <ass3>
                  #^parent <and>
                   ^relative-position after
                   ^syntactic-structure nil
                   ^semantic-structure arg1
                   ^optional true)
           (<ass3> ^structure-type PP
                   ^exclusive <ass1> <ass2> 
                  #^parent <and>
                   ^relative-position after
                   ^syntactic-structure complement
                   ^semantic-structure arg2
                   ^optional true)
}

#smem --add {
#           (<and> ^spelling |and|
#                  ^referent nil
#                  ^structure-type CONJ)
#}
#
#smem --add {(<adj-list> ^construction |CONJ-ADJ|
#                        ^structure-type CONJ-ADJ
#                        ^current-word CONJ
#                        ^prior-word ADJ
#                        ^prior-word-first false   # by having both - means it doesn't matter whether first or not.
#                        ^assigners <ass2> <ass4>)
##          (<ass1> ^structure-type ADJ
##                 #^parent <adj-list>
##                  ^before <ass2>
##                  ^syntactic-structure nil)    
#          (<ass2> ^structure-type CONJ
#                 #^parent <adj-list>
##                  ^after <ass1>
#                  ^syntactic-structure nil)         
#           (<ass3> ^structure-type ADJ
#                  #^parent <adj-list>
#                   ^after <ass2>
#                   ^syntactic-structure nil
#                   ^semantic-structure predicate
#                   ^required true)
#}

smem --add {
           (<VP-AND> ^construction |*-VP-AND|
                   ^structure-type CP-AND
                   ^current-word |and|
                   ^prior-word VP
                   ^prior-word-first true
                   ^message-type command	
                   ^assigners <ass1> )
           (<ass1> ^structure-type VP
                   ^required true
                   ^syntactic-structure sentence
                   ^semantic-structure *copy*
                  #^parent <VP-AND>
                   )
}

### Command VP-T - for (and) Store the red block.
#smem --add {
#           (<VP-T> ^construction |VP-T (CP)|
#                   ^structure-type CP-T
#                   ^current-word T
#                   ^prior-word VP
#                   ^prior-word-first false	
#                   ^message-type command	
#                   ^assigners <ass1>) #<ass2>)
#           (<ass1> ^structure-type VP
#                   ^required true
#                  # ^before-type T
#                   ^syntactic-structure predicate
#                   ^semantic-structure *copy*
#                  #^parent <VP-T>)
#        #   (<ass2> ^structure-type T
#        #           ^after <ass1>
#        #           ^after-type VP
#        #           ^required true
##                #   ^syntactic-structure terminator
#        #          #^parent <VP-T>)
#}

smem --add {
           (<CP-AND-CP> ^construction |CP-AND-VP-T|
                        ^structure-type S 
                        ^current-word VP
                        ^prior-word CP-AND
                        ^prior-word-first false   # by having both - means it doesn't matter whether first or not.
                        ^prior-word-first true	
                        ^assigners <ass1> <ass2> <ass3>)
           (<ass1> ^structure-type CP-AND
                   ^required true
                   ^syntactic-structure sentence
                   ^semantic-structure first-CP
                  #^parent <CP-AND-CP>
                   )
           (<ass2> ^structure-type VP
                   ^after <ass1>
                   ^required true
                 #  ^syntactic-structure terminator
                   ^semantic-structure second-CP
                  #^parent <CP-AND-CP>
                   )
          (<ass3> ^structure-type T
                  ^after <ass2>
                  ^required true
                  ^syntactic-structure terminator
                 #^parent <CP-AND-CP>
                  )
}

smem --add {
           (<CP-AND-CP> ^construction |CP-AND-CP-T|
                        ^structure-type S #CP
                        ^current-word CONJ
                        ^prior-word CP
                        ^prior-word-first false   # by having both - means it doesn't matter whether first or not.
                        ^prior-word-first true	
                        ^assigners <ass1> <ass2> <ass3> <ass4>)
           (<ass1> ^structure-type CP
                   ^required true
                   ^syntactic-structure sentence
                   ^semantic-structure first-CP
                   ^before-type CONJ
                   ^before <ass3>
                  #^parent <CP-AND-CP>
                   )
           (<ass2> ^structure-type CONJ
                   ^after <ass1>
                   ^required true
                   ^syntactic-structure CONJ
                  #^parent <CP-AND-CP>
                   )
           (<ass3> ^structure-type CP
                   ^after <ass1>
                   ^required true
                   ^syntactic-structure sentence
                   ^semantic-structure second-CP
                   ^after-type CONJ
                   ^before-type T
                  #^parent <CP-AND-CP>
                   )
           (<ass4> ^structure-type T
                   ^after <ass3>
                   ^required true
                   ^syntactic-structure terminator
                  #^parent <CP-AND-CP>
                   )
}