sp {termination-processing*propose*create-new-adjective
 #  :interrupt
   (state <s> ^name termination-processing
             -^stored-message <sem>
              ^segment.semantics <sem>)
   (<sem> ^message-type adjective-definition
          ^object-feature-instance <spell>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-new-adjective
         ^perceptual-feature (make-constant-symbol <spell>))
}
sp {termination-processing*compare*create-new-adjective
   (state <s> ^name termination-processing
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name create-new-adjective)
   (<op2> ^name print-semantics)
-->
   (<s> ^operator <op1> > <op2>)
}

# but not shapes - those become nouns
sp {termination-processing*apply*create-new-adjective
   (state <s> ^operator <op>
              ^segment.semantics <sem>
              ^smem.command <cmd>)
   (<op> ^name create-new-adjective
         ^perceptual-feature <pf>)
   (<sem> ^predicate { <> shape <pred> })
-->
   (<sem> ^feature-value <pf>
          ^feature-type <pred>)
   (<s> ^stored-message <sem>)
   (<cmd> ^store <nw>)
   (<nw> ^spelling <spell>
         ^structure-type ADJ
         ^pos adjective
         ^object-feature <pred>
         ^perceptual-feature <pf>)
   (write (crlf) |Create new adjective | <pf> | of type | <pred>)
}

sp {termination-processing*apply*create-new-adjective*shapes
   (state <s> ^operator <op>
              ^segment.semantics <sem>
              ^smem.command <cmd>)
   (<op> ^name create-new-adjective)
   (<sem> ^unknown <spell>
          ^predicate shape)
-->
   (<sem> ^object-feature-instance <x>
          ^adj-assignment.name soar-assign
          ^predicate shape)
   (<x> ^shape <pf>) 
   (<s> ^stored-message <sem>)
   (<cmd> ^store <nw>)
   (<nw> ^spelling <spell>
         ^structure-type N
         ^semantic-entity-type object
         ^pos noun
         ^number singular
         ^object-feature shape
         ^perceptual-feature <pf>)
   (write (crlf) |Create new noun | <pf> | of type shape.|)
}


