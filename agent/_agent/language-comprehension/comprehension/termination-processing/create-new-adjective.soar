sp {termination-processing*propose*create-new-adjective
  # :interrupt
   (state <s> ^name termination-processing
             -^stored-message <sem>
              ^segment.semantics <sem>)
   (<sem> ^message-type adjective-definition
          ^<< arg1 new-word predicate >> <nw>
          ^predicate.id.name { <> shape-lti1 <> shape <> name <> action <> relation })  ## Color size
   (<nw> -^structure-type
         ^id <id>
         ^spelling <spell>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-new-adjective
         ^id <id> 
         ^spelling <spell>
         ^structure-type ADJ)
}

sp {termination-processing*propose*create-new-adjective-verb
 # :interrupt
   (state <s> ^name termination-processing
             -^stored-message <sem>
              ^segment.semantics <sem>)
   (<sem> ^message-type adjective-definition
          ^<< arg1 new-word predicate >> <nw>)
   (<sem> ^predicate.id.name action)
   (<nw> -^structure-type
         ^id <id>
         ^spelling <spell>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-new-adjective
         ^id <id> 
         ^spelling <spell>
         ^structure-type V) 
}

sp {termination-processing*propose*create-new-relation
 # :interrupt
   (state <s> ^name termination-processing
             -^stored-message <sem>
              ^segment.semantics <sem>)
   (<sem> ^message-type adjective-definition
          ^<< arg1 new-word predicate >> <nw>)
   (<sem> ^predicate.id.name relation)
   (<nw> -^structure-type
         ^id <id>
         ^spelling <spell>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-new-adjective
         ^id <id> 
         ^spelling <spell>
         ^structure-type P) 
}

sp {termination-processing*propose*create-new-noun
 # :interrupt
   (state <s> ^name termination-processing
             -^stored-message <sem>
              ^segment.semantics <sem>)
   (<sem> ^message-type adjective-definition
          ^<< arg1 new-word predicate >> <nw>)
   (<sem> ^predicate.id.name << name shape shape-lti1 >>)
   (<nw> -^structure-type
         ^id <id>
         ^spelling <spell>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-new-adjective
         ^id <id> 
         ^spelling <spell>
         ^structure-type N) 
}

sp {termination-processing*propose*create-new-adjective*seen-word-before-but-not-defined
 #:interrupt
   (state <s> ^name termination-processing
             -^stored-message <sem>
              ^segment.semantics <sem>)
   (<sem> ^message-type adjective-definition
          ^new-word <nw> 
          ^arg1 <ofih>)
   (<ofih> ^spelling <spell>
          -^object-feature
          -^name
           ^structure-type <stype>)
  (<nw> -^structure-type
         ^id <id>
		 ^spelling <spell>)
 -->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-new-adjective
         ^id <id>
         ^spelling <spell>
         ^structure-type ADJ)  
}

sp {termination-processing*apply*create-new-adjective*update-semantic-structure
   (state <s> ^operator <op>
              ^top-state <ss>
              ^segment.semantics <sem>)
   (<ss> ^smem.command <cmd>)
   (<sem> ^new-word <nw>
          ^predicate <pred>
         -^arg1)
   (<op> ^name create-new-adjective
         ^id.name  <pf>
         ^structure-type <type>
         ^spelling <spell>)
   (<nw> -^structure-type
         ^id <nid>)
   (<pred> ^id <id2> )
   (<id2> ^name <pred-name>)
   (<nw> ^spelling <spell>)
-->      
   (write (crlf) |Update | <type> |: | <pf> | of type | <pred-name>)
   (<sem> ^arg1 <pf>)
   (<nw> ^structure-type <type>)
   (<nid> ^property <id2>)
   (<cmd> ^store <nw> <nid>)
}

sp {termination-processing*apply*create-new-adjective*update-semantic-structure2
 #  :interrupt
   (state <s> ^operator <op>
              ^top-state <ss>
              ^segment.semantics <sem>)
   (<ss> ^smem.command <cmd>)
   (<sem> ^<< arg1 predicate arg2 >> <nw>
         -^new-word <nw>
          ^predicate <pred>)
   (<op> ^name create-new-adjective
         ^id <id> 
         ^structure-type <type>
         ^spelling <spell>)
   (<pred> ^id <id2> )
   (<id2> ^name <pred-name>)
   (<id> ^name <name>)
   (<nw> ^spelling <spell>)
-->      
   (write (crlf) |Update | <type> |: | <name> | of type | <pred-name>)
   (<cmd> ^store <nw> <id>)
   (<nw> ^structure-type <type>)
   (<id> ^property <id2>)
}


sp {termination-processing*apply*create-new-adjective*update-semantic-structure3
 #  :interrupt
   (state <s> ^operator <op>
              ^top-state <ss>
              ^segment.semantics <sem>)
   (<ss> ^smem.command <cmd>)
   (<sem> -^<< arg1 predicate arg2 >> <nw>
          ^new-word <nw>
          ^predicate <pred>)
   (<op> ^name create-new-adjective
         ^id <id> 
         ^structure-type <type>
         ^spelling <spell>)
   (<pred> ^id <id2> )
   (<id2> ^name <pred-name>)
   (<id> ^name <name>)
   (<nw> ^spelling <spell>)
-->      
   (write (crlf) |Update | <type> |: | <name> | of type | <pred-name>)
   (<nw> ^structure-type <type>)   
   (<id> ^property <id2>)
   (<cmd> ^store <nw> <id>)
}

sp {termination-processing*apply*create-new-adjective*update-semantic-structure4
 #  :interrupt
   (state <s> ^operator <op>
              ^top-state <ss>
              ^segment.semantics <sem>)
   (<ss> ^smem.command <cmd>)
   (<sem> ^<< arg1 arg2 >> <nw>
          ^new-word <nw>
          ^predicate <pred>)
   (<op> ^name create-new-adjective
         ^id <id> 
         ^structure-type <type>
         ^spelling <spell>)
   (<pred> ^id <id2> )
   (<id2> ^name <pred-name>)
   (<id> ^name <name>)
   (<nw> ^spelling <spell>)
-->      
   (write (crlf) |Update | <type> |: | <name> | of type | <pred-name>)
   (<nw> ^structure-type <type>)   
   (<id> ^property <id2>)
   (<cmd> ^store <nw> <id>)
}

### Remove index-word-failure because this sentence is defining it.
sp {termination-processing*apply*remove-interaction-status
 #  :interrupt
   (state <s> ^operator <op>
              ^segment.semantics <sem>)
   (<op> ^name create-new-adjective)
   (<sem> ^interaction-status <status>)
   (<status> ^failure <failure>)
   (<failure> ^type << unknown-word index-word-failure >>)
-->
   (<sem> ^interaction-status <status> -)
   (<status> ^failure <failure> -)
}


