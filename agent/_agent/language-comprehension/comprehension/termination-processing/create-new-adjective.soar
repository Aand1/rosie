sp {termination-processing*propose*create-new-adjective
   #:interrupt
   (state <s> ^name termination-processing
             -^stored-message <sem>
              ^segment.semantics <sem>)
   (<sem> ^message-type adjective-definition
          ^new-word <nw>
          ^predicate { <> shape-lti1 <> name })
   (<nw> ^structure-type U
         ^id <id>
		 ^spelling <spell>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-new-adjective
         ^perceptual-feature <id> #(make-constant-symbol <spell>)
         ^spelling <spell>
         ^structure-type ADJ)
}

sp {termination-processing*propose*create-new-noun
 #  :interrupt
   (state <s> ^name termination-processing
             -^stored-message <sem>
              ^segment.semantics <sem>)
   (<sem> ^message-type adjective-definition
          ^new-word <nw>)
   (<sem> ^predicate << name shape >>)
   (<nw> ^structure-type U
         ^id <id>
		 ^spelling <spell>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-new-adjective
         ^perceptual-feature <id> #(make-constant-symbol <spell>)
         ^spelling <spell>
         ^structure-type N) 
}

sp {termination-processing*propose*create-new-adjective*seen-word-before-but-not-defined
  #:interrupt
   (state <s> ^name termination-processing
             -^stored-message <sem>
              ^segment.semantics <sem>)
   (<sem> ^message-type adjective-definition
          ^new-word <nw> 
          ^arg1 <ofih>)
   (<ofih> ^spelling <spell>
          -^object-feature
          -^perceptual-feature
           ^structure-type <stype>)
  (<nw> ^structure-type U
         ^id <id>
		 ^spelling <spell>)
 -->
   (<s> ^operator <op> + =, >)
   (<op> ^name create-new-adjective
         ^perceptual-feature <id> # (make-constant-symbol <spell>)
         ^spelling <spell>
         ^structure-type <stype>)  
}

sp {termination-processing*compare*create-new-adjective
   (state <s> ^name termination-processing
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name create-new-adjective)
   (<op2> ^name print-semantics)
-->
   (<s> ^operator <op1> > <op2>)
}


sp {termination-processing*apply*create-new-structure
   (state <s> ^operator <op>
              ^segment.semantics <sem>
              ^superstate <ss>)
   (<ss> ^smem.command <cmd>)
   (<op> ^name create-new-adjective
         ^perceptual-feature <pf>         
         ^spelling <spell>
         ^structure-type <type>)
   (<sem> ^predicate <pred>
         -^new-word.structure-type U)
   (<pred> ^id.name <pred-name>)
-->
   (<sem> ^arg1.id <pfx>
          ^predicate.id <predx>)
   (<pfx> ^name <pf>)
   (<predx> ^name <type>)
   (<s> ^stored-message <sem>)
   (<cmd> ^store <new> <predx> <pfx>)
   (<new> ^object-feature <pred-name>
          ^perceptual-feature <pf>
          ^structure-type <type>
          ^spelling <spell>)
   (write (crlf) |Create new | <type> |: | <pf> | of type | <pred-name>)
}

sp {termination-processing*apply*create-new-adjective*update-semantic-structure
   (state <s> ^operator <op>
              ^superstate <ss>
              ^segment.semantics <sem>)
   (<ss> ^smem.command <cmd>)
   (<sem> ^new-word <nw>
          ^predicate <pred>)
   (<op> ^name create-new-adjective
         ^perceptual-feature <pf>
         ^structure-type <type>)
   (<nw> ^structure-type U
         ^object-feature unknown)
   (<pred> ^id.name <pred-name>)
-->      
   (write (crlf) |Update | <type> |: | <pf> | of type | <pred-name>)
   (<sem> ^arg1 <pf>)
   (<nw> ^structure-type U -
                         <type>
         ^object-feature unknown -
                         <pred-name>)
   (<cmd> ^store <nw>)
}

### Remove index-word-failure because this sentence is defining it.
sp {termination-processing*apply*remove-interaction-status
 #  :interrupt
   (state <s> ^operator <op>
              ^segment.semantics <sem>)
   (<op> ^name create-new-adjective)
   (<sem> ^interaction-status <status>)
   (<status> ^type index-word-failure)
-->
   (<sem> ^interaction-status <status> -)
}


