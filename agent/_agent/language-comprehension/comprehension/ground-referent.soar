sp {comprehension*propose*ground-referent
   (state <s> ^name comprehension
              ^segment.last-merge <lm>)
   (<lm> ^assigner.parent-structure <a1>
         ^receiver <r1>)
   (<a1> ^structure-type DP
        -^head.lt-lexical-item.referent nil
        -^head.head.lt-lexical-item.referent nil
        -^ground-tested <r1>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name ground-referent
         ^constraints <a1>
         ^parameter <r1>)
}

sp {comprehension*propose*ground-referent*push*head
   (state <s> ^name comprehension
              ^segment.last-merge <lm>)
   (<lm> ^assigner.parent-structure <a1>
         ^receiver <r1>)
   (<r1> ^structure-type DP
        -^ground-tested <head>)
   (<a1> ^head <head>
        -^ground-tested <head>
        -^head.lt-lexical-item.referent nil
        -^head.head.lt-lexical-item.referent nil)
   (<head> ^structure-type DP
          -^ground-tested <head>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name ground-referent
         ^constraints <head>
         ^parameter <head>)
}

sp {comprehension*compare*ground-referent
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name ground-referent)
   (<op2> ^name << merge process-phrase-end >>)
-->
   (<s> ^operator <op1> > <op2>)
}
#
sp {apply*ground-referent*by-focus
   (state <s> ^operator <op>
              ^segment.last-merge <lm>)
   (<lm> ^assigner.parent-structure <a1>
         ^receiver <r1>)
   (<op> ^name ground-referent
         ^noun <noun>)
   (<a1> ^head <sub>)
   (<r1> ^lt-lexical-item.preset-semantic-structure <pss>)
   (<pss> ^semantic-structure << agent patient >>
          ^referent <sg>)
-->
   (write (crlf) |Lexical item grounded by: | <sg>)
   (<sub> ^ground-tested <r1>
          ^referent <sg>)
}

