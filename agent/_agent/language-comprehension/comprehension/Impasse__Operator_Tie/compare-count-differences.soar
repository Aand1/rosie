sp {selection*propose*compare-count-differences
   (state <s> ^name selection
              ^evaluation <e1> { < <e1> <e2> })
   (<e1> ^count-difference
        -^compared <e2>)
   (<e2> ^count-difference
        -^compared <e1>)
-->
   (<s> ^operator <op> + =)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
}

sp {apply*compare-count-differences*both-equal*not-zero
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^count-difference <cd1>
         ^final-referent-count <> 0
         ^superoperator <so1>)
   (<e2> ^count-difference <cd1>
         ^final-referent-count <> 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>)
   (<so2> ^assigner.decision-count < <dc>)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

sp {apply*compare-count-differences*both-go-to-zero
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation { <> <e1> <e2> })
   (<e1> ^final-referent-count 0
         ^superoperator <so1>)
   (<e2> ^final-referent-count 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>)
   (<so2> ^assigner.decision-count < <dc>)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}


sp {apply*compare-count-differences*one-isnt-zero*other-doesnt*not-grounded
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
   (<e1> ^superoperator.assigner.parent-structure.lt-lexical-item.referent nil
         ^superoperator <so1>)
   (<e2> ^final-referent-count <> 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>)
   (<so2> ^assigner.decision-count < <dc>)
-->
   (<ss> ^operator <so1> > <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}


sp {apply*compare-count-differences*one-isnt-zero*other-doesnt*not-grounded2
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
   (<e1> ^superoperator.assigner.parent-structure.lt-lexical-item.referent nil
         ^superoperator <so1>)
   (<e2> ^final-referent-count <> 0
         ^superoperator <so2>)
   (<so1> ^assigner.decision-count <dc>)
   (<so2> ^assigner.decision-count > <dc>)
-->
   (<ss> ^operator <so1> < <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

sp {apply*compare-count-differences*one-goes-to-zero*other-doesnt
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
   (<e1> ^final-referent-count 0
         ^superoperator <so1>
        -^superoperator.assigner.parent-structure.lt-lexical-item.referent nil )
   (<e2> ^final-referent-count <> 0
         ^superoperator <so2>)
-->
   (<ss> ^operator <so1> < <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}


sp {apply*compare-count-differences*one*prefer-larger-change
  # :interrupt
   (state <s> ^operator <op>
              ^superstate <ss>)
   (<op> ^name compare-count-differences
         ^evaluation <e1>
         ^evaluation <e2>)
   (<e1> ^count-difference <cd1>
         ^final-referent-count <> 0
         ^superoperator <so1>)
   (<e2> ^count-difference > <cd1>
         ^final-referent-count <> 0
         ^superoperator <so2>)
-->
   (<ss> ^operator <so1> < <so2>)
   (<e1> ^compared <e2>)
   (<e2> ^compared <e1>)
}

