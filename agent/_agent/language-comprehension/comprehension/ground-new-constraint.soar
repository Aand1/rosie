### NEEED to clean up and make more understandable.
# Probably add some elaborations.

sp {comprehension*propose*ground-new-constraint
   #:interrupt
   (state <s> ^name comprehension
              ^segment.new-constraint <nc>)
   (<nc> ^object <obj>)
  -(<obj> ^ground-tested <nc>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
}
sp {apply*ground-new-constraint*success
   (state <s> ^operator <op>
              ^segment <seg>
              ^top-state.world.predicates.predicate <wsr>)
   (<seg> ^new-constraint <nc>)
   (<wsr> ^name <sr>
          ^instance <pwsr>)
   (<pwsr> ^1 <r-1>
           ^2 <r-2>)
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object <pword>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<pword> ^referent.id <r-1>)  #removed object
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
-->
   (<seg> ^new-constraint <nc> -)
   (<pword> ^ground-tested <nc>)
   (write (crlf) |Successful relation grounding: | <r-1> | | <sr> | | <r-2>)
}

sp {apply*ground-new-constraint*success*new
   (state <s> ^operator <op>
              ^segment <seg>
              ^top-state.world.predicates.predicate <wsr>)
   (<seg> ^new-constraint <nc>)
   (<wsr> ^name <sr>
          ^instance <pwsr>)
   (<pwsr> ^1 <r-1>
           ^2 <r-2>)
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object <pword>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<pword> ^referent.id <r-1>)  #removed object
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
-->
   (<seg> ^new-constraint <nc> -)
   (<pword> ^ground-tested <nc>)
   (write (crlf) |Successful relation grounding: | <r-1> | | <sr> | | <r-2>)
}

sp {apply*ground-new-constraint*removed-failed
   (state <s> ^operator <op>
              ^segment.new-constraint <nc>
              ^top-state.world <w>)
  -{(<w> ^predicates.predicate <wsr>)
    (<wsr> ^name <sr>
           ^instance <pwsr>)
    (<pwsr> ^1 <r-1>
            ^2 <r-2>)}
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object <obj>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<obj> ^referent.id <r-1>)  #removed object
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
-->
   (<obj> ^referent <ref> -
          ^failed-constraint <fc>)
   (<fc> ^constraint <c>
         ^object <r-1>)
   (write (crlf) |Referent removed: | <r-1>)
}


sp {apply*ground-new-constraint*removed-failed2
   (state <s> ^operator <op>
              ^segment.new-constraint <nc>
              ^top-state.world <w>
              ^segment.not-merged-receiver <rec>)
   (<rec> ^semantics <sem>
          ^complement <obj>)
   (<sem> ^object <object>)
  -{(<w> ^predicates.predicate <wsr>)
    (<wsr> ^name <sr>
           ^instance <pwsr>)
    (<pwsr> ^1 <r-1>
            ^2 <r-2>)}
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object <obj>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<obj> ^referent <object>) # Removed .object
   (<object> ^id <r-1>) # not sure it needs the DP
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
-->
   (<sem> ^object <object> -)
   (<obj> ^referent <object> -
          ^failed-constraint <fc>)
   (<fc> ^constraint <c>
         ^object <r-1>)
   (write (crlf) |Referent removed: | <r-1>)
}

sp {apply*ground-new-constraint*removed-semantics-failed
   (state <s> ^operator <op>
              ^segment <seg>
              ^top-state.world <w>)
   (<seg> ^semantics <sem>
          ^new-constraint <nc>)
   (<sem> ^<anything> <x>)
   (<x> ^id <r-1>)   # removed ^object.id
  -{(<w> ^predicates.predicate <wsr>)
   (<wsr> ^name <sr>
          ^instance <pwsr>)
   (<pwsr> ^1 <r-1>
           ^2 <r-2>)}
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object <pword>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<pword> ^referent.id <r-1>) # not sure it needs the DP  - removed .object
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
-->
   (<sem> ^<anything> <x> -)
   (write (crlf) |Semantic referent removed: | <x>)
}

sp {apply*ground-new-constraint*failure
   (state <s> ^operator <op>
              ^segment <seg>
              ^top-state.world <w>)
   (<seg> ^new-constraint <nc>)
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object <pword>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<pword> ^referent <obj1>)
   (<obj1> ^id <r-1>)
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
  -{(<w> ^predicates.predicate <wsr>)
   (<wsr> ^name <sr>
          ^instance <pwsr>)
   (<pwsr> ^1 <r-1>
           ^2 <r-2>)}
   (<pword> ^lt.spelling <spelling>)
-->
   (<seg> ^new-constraint <nc> -)
   (<pword> ^ground-tested <nc>
            ^failed-constraint <fc>
            ^failed-grounding <fg>)
   (<fc> ^constraint <c>
         ^object <r-1>)
   (<fg> ^assigner-word <spelling>
         ^structure-type P
         ^relation <sr>
         ^lost-grounding <r-1>)
   (<pword> ^referent <obj1> -)
   (write (crlf) |Failed relation grounding: | <r-1> | | <sr> | | <r-2>)
   (write (crlf) |   Remove | <r-1> | as referent for | <pword> )
}

sp {apply*ground-new-constraint*failure*V
   (state <s> ^operator <op>
              ^segment <seg>
              ^top-state.world <w>)
   (<seg> ^new-constraint <nc>)
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object.PP.DP <pword>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<pword> ^referent <ref>)
   (<ref> ^id <r-1>)
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
  -{(<w> ^predicates.predicate <wsr>)
   (<wsr> ^name <sr>
          ^instance <pwsr>)
   (<pwsr> ^1 <r-1>
           ^2 <r-2>)}
   (<pword> ^spelling <spelling>)
-->
   (<seg> ^new-constraint <nc> -)
   (<pword> ^ground-tested <nc>
            ^failed-constraint.object <r-1>
            ^failed-grounding <fg>)
   (<fg> ^assigner-word <spelling>
         ^structure-type P
         ^relation <sr>
         ^lost-grounding <r-1>)
   (<pword> ^referent <ref> -)
   (write (crlf) |Failed relation grounding: | <r-1> | | <sr> | | <r-2>)
   (write (crlf) |   Remove | <r-1> | as referent for | <pword> )
}


############ No need to ground constraint to verb
#sp {apply*ground-new-constraint*verb-nothing
#   (state <s> ^operator <op>
#              ^new-constraint <nc>)
#   (<op> ^name ground-new-constraint
#         ^constraint <nc>)
#   (<nc> ^constraint <con>
#         ^object <obj>)
#   (<con> ^preposition.lt <prep>)
#   (<obj> ^structure-type V)
#-->
#   (<s> ^new-constraint <nc> -)
#   (<obj> ^ground-tested <nc>)
#   (write (crlf) |No need to test constraint on verb.|)
#}


sp {apply*ground-new-constraint*remove-no-referent
 # :interrupt
   (state <s> ^operator <op>
              ^segment <seg>
              ^top-state.world <w>)
   (<seg> ^last-merge.receiver <lmr>
          ^new-constraint <nc>)
   (<w> ^predicates.predicate <wsr>)
   (<wsr> ^name <sr>
          ^instance <pwsr>)
   (<pwsr> ^1 <r-1>
           ^2 <r-2>)
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object <pword>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
  -{(<pword> ^referent.id <r-1>)}
-->
   (<seg> ^new-constraint <nc> -)
   (<pword> ^ground-tested <nc>
            ^ground-tested <lmr>)
   (write (crlf) |No grounding for | <nc>)
}


sp {apply*ground-new-constraint*remove-no-referent2
   (state <s> ^operator <op>
              ^segment <seg>
              ^top-state.world <w>)
   (<seg> ^last-merge.receiver <lmr>
          ^new-constraint <nc>)
 -{(<w> ^predicates.predicate <wsr>)
   (<wsr> ^name <sr>
          ^instance <pwsr>)
   (<pwsr> ^1 <r-1>
           ^2 <r-2>)}
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object <pword>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
   (<pword> ^referent.id <r-1>)
-->
   (<seg> ^new-constraint <nc> -)
   (<pword> ^ground-tested <nc>
            ^ground-tested <lmr>)
   (write (crlf) |No grounding for | <nc>)
}


sp {apply*ground-new-constraint*remove-no-referent3
   (state <s> ^operator <op>
              ^segment <seg>
              ^top-state.world <w>)
   (<seg> ^last-merge.receiver <lmr>
          ^new-constraint <nc>)
  -{(<w> ^predicates.predicate <wsr>)
   (<wsr> ^name <sr>
          ^instance <pwsr>)
   (<pwsr> ^1 <r-1>
           ^2 <r-2>)}
   (<op> ^name ground-new-constraint
         ^constraint <nc>)
   (<nc> ^object <pword>
         ^constraint <c>)
   (<c> ^relation <spr>)
   (<spr> ^arg2.id <r-2>
          ^id.name <sr>)
  -{(<pword> ^referent.id <r-1>)}
-->
   (<seg> ^new-constraint <nc> -)
   (<pword> ^ground-tested <nc>
            ^ground-tested <lmr>)
   (write (crlf) |No grounding for | <nc>)
}

### This probably doesn't work!
sp {apply*ground-new-constraint*referent-nil
  # :interrupt
   (state <s> ^operator <op>
              ^segment <seg>)   
   (<seg> ^last-merge.receiver <lmr>
          ^new-constraint <nc>
          ^semantics <sem>)
   (<op> ^name ground-new-constraint
          ^constraint <nc>)
   (<nc> ^object <pword>
         ^constraint.relation <rel>)
   (<pword> ^head.lt <lli>)
   (<lli> ^semantic-value <sv>
          ^referent nil)
   (<rel> ^lt.relation <r>  # of1
           ^head.head.lt <lthead>)
   (<lthead> ^referent nil
             ^semantic-value <r-2>)
-->
   (<seg> ^new-constraint <nc> -)
   (<pword> ^ground-tested <nc>
            ^ground-tested <lmr>)
   (<sem> ^relation <rx>)
   (<rx> ^entity1 <sv>
        ^relation <r>
        ^entity2 <r-2>)
   (write (crlf) |Add relation to semantics: | <sv> |: | <r> | | <r-2>)
}