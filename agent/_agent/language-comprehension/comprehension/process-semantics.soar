## New version of process-semantics.
## Puts semantics on assigner.parent-receiver.semantics - need to create for every receiver.
##    So previously computed semantics for receiver structures are accessible via receiver.semantics 

###### Semantic Conversion

################Elaborations  ##############################

sp {elaborate*assigner
   (state <s> ^name comprehension
              ^segment.merged-assigner <ass>)
-->
   (<s> ^assigner <ass>)}


#####!! ADD assigner to operator so bind to a specific assigner!

################################################################################

## Standard case where there is a referent on receiver.
## Not sure about always having the "object" available...

sp {propose*process-semantics*referent
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver.referent { <> nil <sg> }  ##JEL 12/20
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <ss> }) 
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

## There is not a referent on receiver and have known lt semantic structure to attach it.
sp {propose*process-semantics*no-local-referent*lt-referent
 #  :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <ss> })
   (<mre> ^lt.referent { <> nil <sg> }
         -^referent)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*default*referent*nil
 #  :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <ss> })
   (<mre> -^referent <sg>
           ^lt <lli>)
   (<lli> ^spelling <sg>
          ^referent nil
         -^semantic-value)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*no-referent*constraint
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
        -^referent-type << literal-lti literal >>)
   (<mre> ^constraint <sg>
         -^lt.referent <> nil
         -^referent
         -^semantics)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}
### LITERAL
sp {propose*process-semantics*referent-type*literal*with-constraint
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal)
   (<mre> ^constraint <sg>
         -^referent)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*referent-type*literal*no-constraint
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal)
   (<mre> -^constraint <con>
          -^referent
           ^lt  <lli>)
   (<lli> -^referent <> nil
           ^spelling <sg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*referent-type*literal*no-constraint*literal*lt-referent
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal)
   (<mre> -^constraint <con>
          -^referent
           ^lt  <lli>)
   (<lli> ^referent { <> nil <sg> })
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

##### Literal LTI

sp {propose*process-semantics*referent-type*literal-lti*with-constraint
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <con>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal-lti)
   (<mre> ^constraint <con> 
         -^referent)
   (<con> ^property.name { << shape size color >> <property> } 
          ^name <sg>)
   (<sg> -^name)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^special literal-lti
         ^assigner <ass>
         ^attribute <ss>
         ^value-id <con>)}

sp {propose*process-semantics*referent-type*literal-lti*with-constraint*name
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <id>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal-lti)
   (<mre> ^constraint <con> 
         -^referent)
   (<con> ^property.name { << shape size color >> <property> } 
          ^id <id>)
   (<id> ^name)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^special literal-lti
         ^assigner <ass>
         ^attribute <ss>
         ^value-id <id>)}

sp {propose*process-semantics*referent-type*literal-lti*no-constraint*relation
  # :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <rel>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal-lti)
   (<mre> -^constraint <con>
          -^referent
           ^lt  <lli>
          -^head.referent)
   (<lli> -^referent <> nil
           ^relation <rel>
          -^name
          -^id)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^special literal-lti
         ^assigner <ass>
         ^attribute <ss>
         ^value-id <rel>)}

sp {propose*process-semantics*referent-type*literal-lti*no-constraint
  # :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal-lti)
   (<mre> -^constraint <con>
          -^referent
           ^lt  <lli>)
   (<lli> -^referent <> nil
          -^relation <rel>
          -^name
          -^id
           ^spelling <sg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^special literal-lti
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*referent-type*literal-lti*no-constraint*id
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <lli>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal-lti)
   (<mre> -^constraint <con>
          -^referent
           ^lt  <lli>)
   (<lli> -^referent <> nil
           ^id <id>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^special literal-lti
         ^assigner <ass>
         ^attribute <ss>
         ^value-special <lli>)}  ## Was ^value-id <id>


sp {propose*process-semantics*referent-type*literal-lti*no-constraint*name
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <lli>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal-lti)
   (<mre> -^constraint <con>
          -^referent
           ^lt  <lli>)
   (<lli> -^referent <> nil
          -^id
           ^name <pf>) 
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
        # ^special literal-lti
         ^assigner <ass>
         ^attribute <ss>
         ^value-id <lli>)}

sp {propose*process-semantics*referent-type*literal-lti*no-constraint*literal*lt-referent
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent-type literal-lti)
   (<mre> -^constraint <con>
          -^referent
           ^lt  <lli>)
   (<lli> ^referent { <> nil <sg> })
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^special literal-lti
         ^assigner <ass>
         ^attribute <ss>
         ^value-id <sg>)}

### Referent nil
sp {propose*process-semantics*referent-nil
 #  :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver.lt <lli>
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <ss> }) 
   (<lli> ^referent nil
          ^semantic-value <sg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*referent-nil*deeper
#   :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <ss> })
   (<mre> ^head.lt <lli>
         -^complement.head.head.lt.semantic-value)
   (<lli> ^referent nil
          ^semantic-value <sg>)
-->   
   (write (crlf) |propose*process-semantics*referent-nil*deeper - OK?|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

#######################################
### Semantic Structure included in receiver

sp {propose*process-semantics*receiver
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mr>
         -^processed-semantics <sg>)
   (<mr> ^lt <lt>)
   (<lt> ^semantic-structure { <> *copy* <ss> }
         ^referent { <> nil <sg> }) 
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}


################################
## Prepositions
##

## Semantic structure comes from parent of assigner
sp {propose*process-semantics*preposition-relation*head*referent
  # :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <ss> })
   (<mre> ^lt.relation <spr>
          ^head.referent <sg>)
-->
   (write (crlf) |propose*process-semantics*preposition-relation*head*referent - OK|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sp-x>)
   (<sp-x> ^id <spr>
           ^arg2 <sg>)}

sp {propose*process-semantics*relation*head-head-lt-semantic-value
   #:interrupt
   (state <s> ^name comprehension
               ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure relation)
   (<mre> ^lt.relation <spr>
          ^head.head.lt.semantic-value <sg>)
-->
   (write (crlf) |propose*process-semantics*relation*head-head-lt-semantic-value - ok|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute relation
         ^relation <srx>)
   (<srx> ^id <spr>
          ^arg2 <sg>)}

## Pulls up a spatial relation embedding in a following clause, such as to the left (of the stove)
sp {propose*process-semantics*relation*semantics
   #:interrupt
   (state <s> ^name comprehension
               ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure relation )
   (<mre> ^head.semantics. { <spr> relation } <sg>)
-->
   (write (crlf) |propose*process-semantics*relation*head-head-lt-semantic-value - ok|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <spr>
         ^value <sg>)}

# For when merging "of the game" with the preceeding "name/action/.." 

sp {propose*process-semantics*DP-with-of-DP
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <ss> })
   (<mre> ^structure-type DP
          ^complement.head.head.lt.semantic-value <sg>
          ^head.lt.semantic-value.id <name-id>)
-->
   (write (crlf) |propose*process-semantics*DP-with-of-DP - OK|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sr>)
   (<sr> ^id <name-id>
         ^arg2 <sg>)}


# For when merging "for two minutes" with the preceeding "wait" 

sp {propose*process-semantics*PP-with-of-PP-DP
  #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <ss> }) 
   (<mre> ^structure-type PP
          ^head.head.lt.semantic-value.id <minutes>
          ^head.lt.semantic-value <sg>)  #two
-->
   (write (crlf) |propose*process-semantics*PP-with-of-PP-DP - OK|)
      (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^relation <sr>)
   (<sr> ^id <minutes>
         ^arg2 <sg>)}

### Need to be able to process without ^object 
###  That gets filled in by later PP - later semantic structure "of the stove"
#
#sp {propose*process-semantics*PP-with-of-PP-DP2
#  #:interrupt
#   (state <s> ^name comprehension
#              ^assigner <ass>)
#   (<ass> ^merged-receiver <mre> 
#         -^processed-semantics <sg>
#          ^lt.semantic-structure <ss>) 
#   (<mre> ^structure-type DP
#          ^head.lt <lt>)
#   (<lt> ^semantic-structure <sss>
#         ^<sss> <sg>)  #two
#-->
#   (write (crlf) |propose*process-semantics*PP-with-of-PP-DP2 - OK?|)
#      (<s> ^operator <op> + =, >)
#   (<op> ^name process-semantics
#         ^assigner <ass>
#         ^attribute <ss>
#         ^relation <sr>)
#   (<sr> ^<sss> <sg>)}

###### Need to splice into preceeding structure - Should be a general copy up...
# For when merging "of the garbage" with the preceeding "to the left of" which is already associated with a verb.
sp {propose*process-semantics*PP-with-left-of-PP
 #  :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <obj>
          ^lt.semantic-structure { <> *copy* <ss> }
          ^parent-receiver.head.lt <hlli>)
   (<hlli> ^semantic-entity-type relation
           ^relation <left-of1>)
   (<mre> ^structure-type PP
          ^head.referent <obj>
          ^lt.relation.name of1)  #JEL - 1/9/15 added .name
-->
   (write (crlf) |propose*process-semantics*PP-with-left-of-PP - Check-fix.|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute relation
         ^relation <sr>)
   (<sr> ^id <left-of1>
         ^arg2 <obj>)}

sp {propose*process-semantics*PP-with-left-of-PP2
   #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <obj>
          #^lt.semantic-structure { <> *copy* <ss> }
          ^parent-receiver.head.lt <hlli>)
   (<hlli> ^semantic-entity-type relation
           ^semantic-structure <ss>
           ^relation <left-of1>)
   (<mre> ^structure-type PP
          ^head.referent <obj>
          ^lt.relation.name of1)   #JEL - 1/9/15 added .name
-->
   (write (crlf) |propose*process-semantics*PP-with-left-of-PP2 - Check-fix.|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute relation
         ^relation <sr>)
   (<sr> ^id <left-of1>
         ^arg2 <obj>)}
#excise propose*process-semantics*PP-with-left-of-PP
########### ADJECTIVES

sp {propose*process-semantics*default*adjunct
  # :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <adj>
          ^lt.semantic-structure { <> *copy* <ss> }) 
   (<mre> -^referent <sg>
           ^adjunct.lt.relation <adj>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute adjunct
         ^value <adj>)}

sp {propose*process-semantics*adjective
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <id>
          ^lt.semantic-structure { <> *copy* <ss> }) 
   (<mre> -^referent
           ^lt <lli>)
   (<lli> ^structure-type ADJ
          ^object-feature <of>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <lli>)}

sp {propose*process-semantics*adjective*unknown-name
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <ss>
          ^lt.semantic-structure { <> *copy* <ss> }) 
   (<mre> -^referent 
           ^lt <lli>)
   (<lli> ^structure-type ADJ
         -^name <pf>
          ^object-feature { <> unknown <of> })
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <xx>
         ^extra-attribute <of>)}

sp {propose*process-semantics*adjective*unknown-object-feature
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <lli>
          ^lt.semantic-structure { <> *copy* <ss> }) 
   (<mre> -^referent 
           ^lt <lli>)
   (<lli> ^structure-type ADJ
          ^spelling <word>
         -^name 
         -^id.property)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <lli>)}

sp {propose*process-semantics*semantic*unknown
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre> 
         -^processed-semantics <lli>
          ^lt <lla>)
   (<lla> ^semantic-structure { <> *copy* <ss> }
         -^referent-type << literal literal-lti >>)
   (<mre> -^referent <sg>
           ^lt <lli>)
   (<lli> -^structure-type
          ^spelling <word>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <lli>)}

############ Copy Semantics
# will copy all of the substructures from semantics <sg> to the next higher level
sp {propose*process-semantics*copy
  # :interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> -^processed-semantics *copy*
           ^merged-receiver.semantics <sg>
           ^lt.semantic-structure *copy*) 
  -{(<ass> ^merged-receiver.semantics <sg>)  # So only get one match if there are multiple attributes to copy.
    (<sg> -^<att>)} 
--> 
   (write (crlf) |propose*process-semantics*copy|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^copy-semantics true
         ^assigner <ass>)}

# will create ^<att> <sg> from the semantics <sg> pointer (but not copy the the substructure) 
sp {propose*process-semantics*use-semantics
   #:interrupt
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver.semantics <sg>
         -^processed-semantics <sg>
          ^lt.semantic-structure { <> *copy* <ss> }) 
-{(<sg> ^relation  <x>)
  (<ass> ^lt.semantic-structure << relation arg1 >>)}
  -{(<ass> ^merged-receiver.semantics <sg>)
    (<sg> -^<att>)}
-->
   (write (crlf) |propose*process-semantics*use-semantics|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*semantics*relation
   (state <s> ^name comprehension
              ^assigner <ass>)
   (<ass> ^merged-receiver <mre>
         -^processed-semantics <sg>
          ^lt.semantic-structure <ss>) 
   (<mre> ^semantics <sem>
          ^<< complement head >>.lt <lt>)  ## New JEL
   (<sem> ^of-relation <sg>)
   (<lt> ^semantic-structure <att>
         ^<att> <left-of1>)
-->
   (write (crlf) |propose*process-semantics*relation|)
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^assigner <ass>
         ^attribute <att>
         ^<att> <sr>
         ^semantics <sem> <left-of1>)
   (<sr> ^id <left-of1>
         ^arg2 <sg>)}

############ MONITOR

sp {monitor*process-semantics*semantic
   (state <s> ^name comprehension
              ^assigner.merged-receiver.referent <ref>)
   (<ref> ^object) 
   -->
   (write (crlf) |Referent with object: | <ref>)
   (interrupt)}

######################### Control Knowledge

sp {comprehension*compare*process-semantics
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name process-semantics)
   (<op2> ^name <<  process-phrase-end failed-referent-grounding process-missing-assigner merge comprehend-word >>)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*process-semantics*prefer-specific
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name process-semantics
          ^relation)
   (<op2> ^name process-semantics
         -^relation)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*process-semantics*prefer-specific2
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name process-semantics
         -^copy-semantics true)
   (<op2> ^name process-semantics
          ^copy-semantics true)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {evaluate-operator*reject*process-semantics
   (state <s> ^name evaluate-operator
              ^operator <op1> +)
   (<op1> ^name process-semantics)
-->
   (<s> ^operator <op1> -)
}

