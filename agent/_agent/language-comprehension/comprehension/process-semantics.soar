###### Semantic Conversion
sp {propose*process-semantics*semantic
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>)
   (<receiver-item> ^referent <sg>)
  -(<sem> ^<ss> <sg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*semantic*indirect-head
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>
                   -^parent-structure.complement2.lt-lexical-item.spatial-relation)
   (<receiver-item> ^head.referent <sg>)
  -(<sem> ^<ss> <sg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*semantic-not-grounded
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>)
   (<receiver-item> ^lt-lexical-item <lli>)
   (<lli> ^referent nil
          ^semantic-value <sv>)
  -(<sem> ^<ss> <sg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^value <sv>)}

sp {propose*process-semantics*semantic-not-grounded2
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>)
   (<receiver-item> ^<< noun head >>.lt-lexical-item <lli>)
   (<lli> ^referent nil
          ^semantic-value <sv>)
  -(<sem> ^<ss> <sg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^value <sv>)}

sp {propose*process-semantics*semantic-not-grounded3
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner <lla>)
   (<lla> ^referent nil
          ^semantic-structure <ss>)
   (<receiver-item> ^constraint <sv>)
  -(<sem> ^<ss> <sg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^type grounded3
         ^attribute <ss>)}

sp {propose*process-semantics*semantic-not-grounded3-elaborate
   (state <s> ^name comprehension
              ^segment <seg>
              ^operator <op>)
   (<op> ^name process-semantics
         ^type grounded3)
   (<seg> ^last-merge <lm>)
   (<lm> ^receiver.constraint <sv>)
-->
   (<op> ^value <sv>)}


sp {propose*process-semantics*semantic*to-preposition-verb
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^parent-structure <ps>)
   (<ps> ^lt-lexical-item <lli>
         ^head.referent <sg>
         ^structure-type << V VP C CP >>)
   (<lli> ^semantic-structure <ss>
         -^referent <sg>
          ^spatial-relation <sp>)
  -{(<sem> ^<ss>.spatial-relation <xx>)
    (<xx> ^relation <sp>
          ^object <sg>)}
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^spatial-relation <sr>)
   (<sr> ^relation <sp>
         ^object <sg>)}


sp {propose*process-semantics*semantic*to-preposition-verb-y
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^assigner <assigner-item>)
   (<assigner-item> ^parent-structure <ps>
                    ^lt-lexical-assigner <lli>)
   (<ps> ^complement <com>
         ^structure-type << V VP C CP >>)
   (<com> ^lt-lexical-item.spatial-relation <sp-r>
          ^head.referent <sg>)
   (<lli> ^semantic-structure <ss>
         -^referent <sg>
         -^spatial-relation <sp>)
  -{(<sem> ^<ss>.spatial-relation <xx>)
    (<xx> ^relation <sp>
          ^object <sg>)}
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^spatial-relation <sp-x>)
   (<sp-x> ^relation <sp-r>
           ^object <sg>)}


sp {propose*process-semantics*semantic*to-preposition-verb-x
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg>  ^semantics <sem>
           ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^parent-structure <ps>)
   (<ps> ^lt-lexical-item <lli>
         ^spatial-relation <srr>
         ^structure-type << V VP C CP >>)
   (<receiver-item> ^head.referent <sg>)
   (<lli> ^semantic-structure <ss>
         #-^referent
         -^spatial-relation)
   (<srr> ^object <sg>
          ^relation <sr>)
  -{(<sem> ^action-adjunct.spatial-relation <xx>)
    (<xx> ^relation <sr>
          ^object <sg>)}
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute action-adjunct
         ^spatial-relation <srx>)
   (<srx> ^relation <sr>
          ^object <sg>)}

sp {propose*process-semantics*semantic*to-preposition-verb-z
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^parent-structure <ps>
                    ^lt-lexical-assigner <lla>)
   (<ps> ^lt-lexical-item <lli>
         ^spatial-relation.relation <sp>
         ^<< complement2 >>.head.referent <sg>
         ^structure-type << V VP C CP >>)
   (<lla> ^semantic-structure <ss>
         -^referent <sg>)
  -{(<sem> ^<ss>.spatial-relation <xx>)
    (<xx> ^relation <sp>
          ^object <sg>)}
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^spatial-relation <sr>)
   (<sr> ^relation <sp>
         ^object <sg>)}

sp {propose*process-semantics*semantic*to-preposition-verb-q
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^parent-structure <ps>
                    ^lt-lexical-assigner <lla>)
   (<ps> ^lt-lexical-item <lli>
         ^complement2.lt-lexical-item.spatial-relation <sp>
         ^complement2.head.referent <sg>
         ^structure-type << V VP C CP >>)
   (<lla> ^semantic-structure <ss>
         -^referent <sg>)
  -{(<sem> ^<ss>.spatial-relation <xx>)
    (<xx> ^relation <sp>
          ^object <sg>)}
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^spatial-relation <sr>)
   (<sr> ^relation <sp>
         ^object <sg>)}

sp {propose*process-semantics*semantic*to-preposition-verb*default
 #  :interrupt
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>)
   (<receiver-item> -^referent <sg>
                     ^lt-lexical-item.referent <sg>)
  -(<sem> ^<ss> <sg>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^value <sg>)}

sp {propose*process-semantics*semantic*to-preposition-verb*default*adjunct
  # :interrupt
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>)
   (<receiver-item> -^referent <sg>
                     ^adjunct.lt-lexical-item.spatial-relation <adj>)
  -(<sem> ^adjunct <adj>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute adjunct
         ^value <adj>)}

sp {propose*process-semantics*semantic*to-preposition-verb*is*adjective
   (state <s>  ^name comprehension
               ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>)
   (<receiver-item> -^referent <sg>
                     ^lt-lexical-item <lli>)
   (<lli> ^structure-type ADJ
          ^perceptual-feature <pf>
          ^object-feature <of>)
  -(<sem> ^<ss>.<of> <pf>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^value <xx>
         ^extra-attribute <of>
         ^extra-value <pf>)}

sp {propose*process-semantics*semantic*to-preposition-verb*is*adjective*unknown-perceptual-feature
   (state <s>  ^name comprehension
               ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>)
   (<receiver-item> -^referent <sg>
                     ^lt-lexical-item <lli>)
   (<lli> ^structure-type ADJ
         -^perceptual-feature <pf>
          ^object-feature <of>)
  -(<sem> ^<ss>.<of> unknown)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^value <xx>
         ^extra-attribute <of>
      #  ^extra-value <pf>
                          )}

sp {propose*process-semantics*semantic*to-preposition-verb*is*adjective*unknown-object-feature
   (state <s>  ^name comprehension
               ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>)
   (<receiver-item> -^referent <sg>
                     ^lt-lexical-item <lli>)
   (<lli> ^structure-type ADJ
          ^spelling <word>
         -^perceptual-feature <pf>
         -^object-feature <of>)
  -(<sem> ^<ss> <word>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^value <word>
                )}


sp {propose*process-semantics*semantic*unknown
   (state <s>  ^name comprehension
               ^segment <seg>)
   (<seg> ^semantics <sem>
          ^last-merge <lm>)
   (<lm> ^receiver <receiver-item>
         ^assigner <assigner-item>)
   (<assigner-item> ^lt-lexical-assigner.semantic-structure <ss>)
   (<receiver-item> -^referent <sg>
                     ^lt-lexical-item <lli>)
   (<lli> ^structure-type U
          ^spelling <word>)
  -(<sem> ^<ss> <word>)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name process-semantics
         ^attribute <ss>
         ^value <word>
                )}
#########################

sp {comprehension*compare*process-semantics
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name process-semantics)
   (<op2> ^name <<  process-phrase-end process-missing-assigner merge comprehend-word >>)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {apply*process-semantics*simple
   (state <s> ^operator <op>
              ^segment <seg>)
   (<seg> ^semantics <sem>)
   (<op> ^name process-semantics
         ^attribute <att>
         ^value <value>
        -^extra-value
        -^extra-attribute <of>
        -^spatial-relation <sr>)
-->
   (write (crlf) | Add to Semantics: ^|  <att> | | <value>)
   (<sem> ^<att> <value>)
}

sp {apply*process-semantics*semi-complex
   (state <s> ^operator <op>
              ^segment.semantics <sem>)
   (<op> ^name process-semantics
         ^attribute <att>
         ^value <value>
         ^extra-attribute <of>
        -^extra-value <pf>)
-->
   (write (crlf) | Add to Semantics: ^|  <att> |.| <of> | unknown.|)
   (<sem> ^<att> <value>)
   (<value> ^<of> unknown)
}

sp {apply*process-semantics*complex
   (state <s> ^operator <op>
              ^segment.semantics <sem>)
   (<op> ^name process-semantics
         ^attribute <att>
         ^value <value>
         ^extra-attribute <of>
         ^extra-value <pf>)
-->
   (write (crlf) | Add to Semantics: ^|  <att> |.| <of> | | <pf>)
   (<sem> ^<att> <value>)
   (<value> ^<of> <pf>)
}

sp {apply*process-semantics*relation
   #:interrupt
   (state <s> ^operator <op>
              ^segment.semantics <sem>)
   (<op> ^name process-semantics
         ^attribute <att>
         ^spatial-relation <sr>)
   (<sr> ^relation <sp>
         ^object <sg>)
-->
   (write (crlf) | Add to Semantics: ^|  <att> | | <sp> | (| <sg> |)|)
   (<sem> ^<att> <xx>)
   (<xx> ^spatial-relation <sr>)
   (<sr> ^relation <sp>
         ^object <sg>)}

