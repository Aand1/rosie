#### Test sentences for ROSIE - 
#    Built by the SentencesToSoar tool Tue Sep 29 10:20:16 EDT 2015
#    from file 'crazy-eights.exp.txt'.
learn --off
#   Apply initialize-rosie to set up the state.
sp {apply*initialize-rosie*sentence-number
   (state <s> ^name rosie
              ^operator.name initialize-rosie)
-->
   (<s> ^current-sentence-number 1
        ^max-sentence-number 17
        ^failure-count 0
        ^success-count 0)
}


#   The name of the game is crazy-eights.
sp {elaborate*state*sentence*the-name-of-the-game-is-crazy-eights
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 1)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S137>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The name of the game is crazy-eights.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |name|
         ^next <w2>)
   (<w2> ^spelling |of|
         ^next <w3>)
   (<w3> ^spelling |the|
         ^next <w4>)
   (<w4> ^spelling |game|
         ^next <w5>)
   (<w5> ^spelling |is|
         ^next <w6>)
   (<w6> ^spelling |crazy-eights|
         ^next <w7>)
   (<w7> ^spelling |.|
         ^next nil)
   (<S137> ^arg1 <S256>
           ^message-type object-description
           ^predicate <N10067>)
   (<S256> ^2 <S257>
           ^handle of1
           ^item-type predicate)
   (<S257> ^2 <N10047>
           ^handle name1)
   (<N10047> ^handle game1
             ^property <C27>)
   (<C27> ^handle concept
           ^type conceptual)
   (<N10067> #^handle crazy-eights1
             ^item-type predicate
             ^word-structure <N10066>)
   (<N10066> ^referent <R10176>
              ^spelling crazy-eights)
   (<R10176> ^handle crazy-eights1
              ^word-structure <N10066>)
}


#   If the rank of one of your cards is equal to the rank of the top card then you can play your card.
sp {elaborate*state*sentence*if-the-rank-of-one-of-your-cards-is-equal-to-the-rank-of-the-top-card-then-you-can-play-your-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 2)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S314>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If the rank of one of your cards is equal to the rank of the top card then you can play your card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |the|
         ^next <w2>)
   (<w2> ^spelling |rank|
         ^next <w3>)
   (<w3> ^spelling |of|
         ^next <w4>)
   (<w4> ^spelling |one|
         ^next <w5>)
   (<w5> ^spelling |of|
         ^next <w6>)
   (<w6> ^spelling |your|
         ^next <w7>)
   (<w7> ^spelling |cards|
         ^next <w8>)
   (<w8> ^spelling |is|
         ^next <w9>)
   (<w9> ^spelling |equal|
         ^next <w10>)
   (<w10> ^spelling |to|
         ^next <w11>)
   (<w11> ^spelling |the|
         ^next <w12>)
   (<w12> ^spelling |rank|
         ^next <w13>)
   (<w13> ^spelling |of|
         ^next <w14>)
   (<w14> ^spelling |the|
         ^next <w15>)
   (<w15> ^spelling |top|
         ^next <w16>)
   (<w16> ^spelling |card|
         ^next <w17>)
   (<w17> ^spelling |then|
         ^next <w18>)
   (<w18> ^spelling |you|
         ^next <w19>)
   (<w19> ^spelling |can|
         ^next <w20>)
   (<w20> ^spelling |play|
         ^next <w21>)
   (<w21> ^spelling |your|
         ^next <w22>)
   (<w22> ^spelling |card|
         ^next <w23>)
   (<w23> ^spelling |.|
         ^next nil)
   (<S314> ^if-subclause <S519>
           ^message-type conditional
           ^then-subclause <S866>)
   (<S519> ^arg1 <R10337>
           ^predicate <S675>)
   (<R10337> ^handle rank1
             ^property <P4000>
             ^relation <S498>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
   (<S498> ^2 <R10333>
           ^handle of1)
   (<R10333> ^number 1
             ^relation <S493>)
   (<S493> ^2 <P90123>
           ^handle of1)
   (<P90123> #^handle new-object-id2
             ^item-type card
             ^possessive true
             ^predicates <P90124>
             ^predicates-copied true)
   (<S675> ^2 <R10458>
           ^handle equal
           ^item-type predicate)
   (<R10458> ^handle rank1
             ^item-type object
             ^predicates <P90228>
             ^predicates-copied true
             ^property <P4000>
             ^relation <S669>
             ^visibility not-visible)
   (<P90228> ^category object
             ^dialog-object true)
   (<S669> ^2 <P90200>
           ^handle of1)
   (<P90200> #^handle new-object-id3
             ^item-type card
             ^predicates <P90201>
             ^predicates-copied true)
   (<P90201> ^category card
             ^dialog-object true
             ^handle top
             ^name top
             ^visibility not-visible)
   (<S866> ^action <N10161>
           ^action-modifier <N10159>
           ^agent <R10047>
           ^arg1 <P90242>)
   (<N10161> ^handle play
             ^item-type action
             ^procedural <E12>
             ^type action)
   (<E12> ^op_name initiate-play1)
   (<N10159> ^handle can)
   (<R10047> ^arm <A10082>
             ^handle rosie
             ^item-type object
             ^predicates <P90068>)
   (<A10082> ^action wait)
   (<P90068> ^handle rosie)
   (<P90242> #^handle new-object-id4
             ^item-type card
             ^possessive true
             ^predicates <P90243>
             ^predicates-copied true)
   (<P90243> ^category card
             ^dialog-object true
             ^visibility not-visible)
}


#   If the suit of one of your cards is equal to the suit of the top card then you can play your card.
sp {elaborate*state*sentence*if-the-suit-of-one-of-your-cards-is-equal-to-the-suit-of-the-top-card-then-you-can-play-your-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 3)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S893>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If the suit of one of your cards is equal to the suit of the top card then you can play your card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |the|
         ^next <w2>)
   (<w2> ^spelling |suit|
         ^next <w3>)
   (<w3> ^spelling |of|
         ^next <w4>)
   (<w4> ^spelling |one|
         ^next <w5>)
   (<w5> ^spelling |of|
         ^next <w6>)
   (<w6> ^spelling |your|
         ^next <w7>)
   (<w7> ^spelling |cards|
         ^next <w8>)
   (<w8> ^spelling |is|
         ^next <w9>)
   (<w9> ^spelling |equal|
         ^next <w10>)
   (<w10> ^spelling |to|
         ^next <w11>)
   (<w11> ^spelling |the|
         ^next <w12>)
   (<w12> ^spelling |suit|
         ^next <w13>)
   (<w13> ^spelling |of|
         ^next <w14>)
   (<w14> ^spelling |the|
         ^next <w15>)
   (<w15> ^spelling |top|
         ^next <w16>)
   (<w16> ^spelling |card|
         ^next <w17>)
   (<w17> ^spelling |then|
         ^next <w18>)
   (<w18> ^spelling |you|
         ^next <w19>)
   (<w19> ^spelling |can|
         ^next <w20>)
   (<w20> ^spelling |play|
         ^next <w21>)
   (<w21> ^spelling |your|
         ^next <w22>)
   (<w22> ^spelling |card|
         ^next <w23>)
   (<w23> ^spelling |.|
         ^next nil)
   (<S893> ^if-subclause <S1098>
           ^message-type conditional
           ^then-subclause <S1445>)
   (<S1098> ^arg1 <R10748>
            ^predicate <S1254>)
   (<R10748> ^handle suit1
             ^relation <S1077>)
   (<S1077> ^2 <R10744>
            ^handle of1)
   (<R10744> ^number 1
             ^relation <S1072>)
   (<S1072> ^2 <P90265>
            ^handle of1)
   (<P90265> #^handle new-object-id5
             ^item-type card
             ^possessive true
             ^predicates <P90266>
             ^predicates-copied true)
   (<S1254> ^2 <R10869>
            ^handle equal
            ^item-type predicate)
   (<R10869> ^handle suit1
             ^item-type object
             ^predicates <P90382>
             ^predicates-copied true
             ^property <P4000>
             ^relation <S1248>
             ^visibility not-visible)
   (<P90382> ^category object
             ^dialog-object true)
   (<S1248> ^2 <P90200>
            ^handle of1)
   (<P90200> #^handle new-object-id3
             ^item-type card
             ^predicates <P90201>
             ^predicates-copied true)
   (<P90201> ^category card
             ^dialog-object true
             ^handle top
             ^name top
             ^visibility not-visible)
   (<S1445> ^action <N10278>
            ^action-modifier <N10276>
            ^agent <R10047>
            ^arg1 <P90396>)
   (<N10278> ^handle play
             ^item-type action
             ^procedural <E12>
             ^type action)
   (<E12> ^op_name initiate-play1)
   (<N10276> ^handle can)
   (<R10047> ^arm <A10082>
             ^handle rosie
             ^item-type object
             ^predicates <P90068>)
   (<A10082> ^action wait)
   (<P90068> ^handle rosie)
   (<P90396> #^handle new-object-id6
             ^item-type card
             ^possessive true
             ^predicates <P90397>
             ^predicates-copied true)
   (<P90397> ^category card
             ^dialog-object true
             ^visibility not-visible)
}


#   If one of your cards is a wild card then you can play the card.
sp {elaborate*state*sentence*if-one-of-your-cards-is-a-wild-card-then-you-can-play-the-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 4)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S1472>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If one of your cards is a wild card then you can play the card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |one|
         ^next <w2>)
   (<w2> ^spelling |of|
         ^next <w3>)
   (<w3> ^spelling |your|
         ^next <w4>)
   (<w4> ^spelling |cards|
         ^next <w5>)
   (<w5> ^spelling |is|
         ^next <w6>)
   (<w6> ^spelling |a|
         ^next <w7>)
   (<w7> ^spelling |wild|
         ^next <w8>)
   (<w8> ^spelling |card|
         ^next <w9>)
   (<w9> ^spelling |then|
         ^next <w10>)
   (<w10> ^spelling |you|
         ^next <w11>)
   (<w11> ^spelling |can|
         ^next <w12>)
   (<w12> ^spelling |play|
         ^next <w13>)
   (<w13> ^spelling |the|
         ^next <w14>)
   (<w14> ^spelling |card|
         ^next <w15>)
   (<w15> ^spelling |.|
         ^next nil)
   (<S1472> ^if-subclause <S1609>
            ^message-type conditional
            ^then-subclause <S1872>)
   (<S1609> ^arg1 <R11110>
            ^predicate <N10348>
            ^predicate <N10351>)
   (<R11110> ^number 1
             ^relation <S1588>)
   (<S1588> ^2 <P90411>
            ^handle of1)
   (<N10348> ^handle wild
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
   (<N10351> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
   (<S1872> ^action <N10362>
            ^action-modifier <N10360>
            ^agent <R10047>
            ^arg1 <P90411>)
   (<N10362> ^handle play
             ^item-type action
             ^procedural <E12>
             ^type action)
   (<E12> ^op_name initiate-play1)
   (<N10360> ^handle can)
   (<R10047> ^arm <A10082>
             ^handle rosie
             ^item-type object
             ^predicates <P90068>)
   (<A10082> ^action wait)
   (<P90068> ^handle rosie)
   (<P90411> #^handle new-object-id7
             ^item-type card
             ^possessive true
             ^predicates <P90412>
             ^predicates-copied true)
   (<P90412> ^category card
             ^dialog-object true
             ^multiple true
             ^visibility not-visible)
}


#   If a card in your hand is a wild card then you can play the card.
sp {elaborate*state*sentence*if-a-card-in-your-hand-is-a-wild-card-then-you-can-play-the-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 5)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S1899>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card in your hand is a wild card then you can play the card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |in|
         ^next <w4>)
   (<w4> ^spelling |your|
         ^next <w5>)
   (<w5> ^spelling |hand|
         ^next <w6>)
   (<w6> ^spelling |is|
         ^next <w7>)
   (<w7> ^spelling |a|
         ^next <w8>)
   (<w8> ^spelling |wild|
         ^next <w9>)
   (<w9> ^spelling |card|
         ^next <w10>)
   (<w10> ^spelling |then|
         ^next <w11>)
   (<w11> ^spelling |you|
         ^next <w12>)
   (<w12> ^spelling |can|
         ^next <w13>)
   (<w13> ^spelling |play|
         ^next <w14>)
   (<w14> ^spelling |the|
         ^next <w15>)
   (<w15> ^spelling |card|
         ^next <w16>)
   (<w16> ^spelling |.|
         ^next nil)
   (<S1899> ^if-subclause <S2065>
            ^message-type conditional
            ^then-subclause <S2328>)
   (<S2065> ^arg1 <P90486>
            ^predicate <N10437>
            ^predicate <N10440>)
   (<P90486> #^handle new-object-id8
             ^item-type card
             ^predicates <P90487>
             ^predicates-copied true
             ^relation <S2044>)
   (<P90487> ^category card
             ^dialog-object true)
   (<S2044> ^2 <R11432>
            ^handle in1)
   (<R11432> ^handle hand1
             ^item-type object
             ^possessive true
             ^predicates <P90482>
             ^predicates-copied true
             ^property <P4000>
             ^visibility not-visible)
   (<P90482> ^category object
             ^dialog-object true)
   (<N10437> ^handle wild
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
   (<N10440> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
   (<S2328> ^action <N10451>
            ^action-modifier <N10449>
            ^agent <R10047>
            ^arg1 <P90486>)
   (<N10451> ^handle play
             ^item-type action
             ^procedural <E12>
             ^type action)
   (<E12> ^op_name initiate-play1)
   (<N10449> ^handle can)
   (<R10047> ^arm <A10082>
             ^handle rosie
             ^item-type object
             ^predicates <P90068>)
   (<A10082> ^action wait)
   (<P90068> ^handle rosie)
}


#   The goal is that your hand is empty.
sp {elaborate*state*sentence*the-goal-is-that-your-hand-is-empty
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 6)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S2351>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The goal is that your hand is empty.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |goal|
         ^next <w2>)
   (<w2> ^spelling |is|
         ^next <w3>)
   (<w3> ^spelling |that|
         ^next <w4>)
   (<w4> ^spelling |your|
         ^next <w5>)
   (<w5> ^spelling |hand|
         ^next <w6>)
   (<w6> ^spelling |is|
         ^next <w7>)
   (<w7> ^spelling |empty|
         ^next <w8>)
   (<w8> ^spelling |.|
         ^next nil)
   (<S2351> ^arg1 <N10485>
            ^message-type object-description
            ^subclause <S2425>)
   (<N10485> ^handle goal
             ^property <C27>)
   (<C27> ^handle concept
           ^type conceptual)
   (<S2425> ^arg1 <R11763>
            ^predicate <N10526>)
   (<R11763> #^handle hand1
             ^item-type object
             ^possessive true
             ^predicates <P90557>
             ^predicates-copied true)
   (<P90557> ^category object
             ^dialog-object true)
   (<N10526> ^handle empty
             ^item-type predicate
             ^property <C12>)
   (<C12> ^handle property
           ^type visual)
}


#   If your hand is empty then you win.
sp {elaborate*state*sentence*if-your-hand-is-empty-then-you-win
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 7)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S2582>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If your hand is empty then you win.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |your|
         ^next <w2>)
   (<w2> ^spelling |hand|
         ^next <w3>)
   (<w3> ^spelling |is|
         ^next <w4>)
   (<w4> ^spelling |empty|
         ^next <w5>)
   (<w5> ^spelling |then|
         ^next <w6>)
   (<w6> ^spelling |you|
         ^next <w7>)
   (<w7> ^spelling |win|
         ^next <w8>)
   (<w8> ^spelling |.|
         ^next nil)
   (<S2582> ^if-subclause <S2692>
            ^message-type conditional
            ^then-subclause <S2805>)
   (<S2692> ^arg1 <R11881>
            ^predicate <N10561>)
   (<R11881> #^handle hand1
             ^item-type object
             ^possessive true
             ^predicates <P90571>
             ^predicates-copied true)
   (<P90571> ^category object
             ^dialog-object true)
   (<N10561> ^handle empty
             ^item-type predicate
             ^property <C12>)
   (<C12> ^handle property
           ^type visual)
   (<S2805> ^action <N10569>
            ^agent <R10047>)
   (<N10569> ^handle win
             ^item-type action
             ^procedural <E13>
             ^type action)
   (<E13> ^op_name initiate-win1)
   (<R10047> ^arm <A10082>
             ^handle rosie
             ^item-type object
             ^predicates <P90068>)
   (<A10082> ^action wait)
   (<P90068> ^handle rosie)
}


#   If you have no cards then you win.
sp {elaborate*state*sentence*if-you-have-no-cards-then-you-win
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 8)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S2849>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If you have no cards then you win.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |you|
         ^next <w2>)
   (<w2> ^spelling |have|
         ^next <w3>)
   (<w3> ^spelling |no|
         ^next <w4>)
   (<w4> ^spelling |cards|
         ^next <w5>)
   (<w5> ^spelling |then|
         ^next <w6>)
   (<w6> ^spelling |you|
         ^next <w7>)
   (<w7> ^spelling |win|
         ^next <w8>)
   (<w8> ^spelling |.|
         ^next nil)
   (<S2849> ^if-subclause <S2930>
            ^message-type conditional
            ^then-subclause <S3064>)
   (<S2930> ^action <N10592>
            ^agent <R10047>
            ^arg1 <P90636>)
   (<N10592> ^handle has
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-has1)
   (<R10047> ^handle rosie)
   (<P90636> #^handle new-object-id9
             ^item-type card
             ^predicates <P90637>
             ^predicates-copied true)
   (<P90637> ^category card
             ^dialog-object true
             ^multiple true
             ^number 0
             ^visibility not-visible)
   (<S3064> ^action <N10616>
            ^agent <R10047>)
   (<N10616> ^handle win
             ^item-type action
             ^procedural <E13>
             ^type action)
   (<E13> ^op_name initiate-win1)
}


#   The goal is that you have zero cards.
sp {elaborate*state*sentence*the-goal-is-that-you-have-zero-cards
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 9)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S3108>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |The goal is that you have zero cards.|)
   (<w0> ^spelling |the|
         ^next <w1>)
   (<w1> ^spelling |goal|
         ^next <w2>)
   (<w2> ^spelling |is|
         ^next <w3>)
   (<w3> ^spelling |that|
         ^next <w4>)
   (<w4> ^spelling |you|
         ^next <w5>)
   (<w5> ^spelling |have|
         ^next <w6>)
   (<w6> ^spelling |zero|
         ^next <w7>)
   (<w7> ^spelling |cards|
         ^next <w8>)
   (<w8> ^spelling |.|
         ^next nil)
   (<S3108> ^arg1 <N10638>
            ^message-type object-description
            ^subclause <S3182>)
   (<N10638> ^handle goal
             ^property <C27>)
   (<C27> ^handle concept
           ^type conceptual)
   (<S3182> ^action <N10659>
            ^agent <R10047>
            ^arg1 <P90701>)
   (<N10659> ^handle has
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-has1)
   (<R10047> ^handle rosie)
   (<P90701> #^handle new-object-id10
             ^item-type card
             ^predicates <P90702>
             ^predicates-copied true)
   (<P90702> ^category card
             ^dialog-object true
             ^multiple true
             ^number 0
             ^visibility not-visible)
}


#   If an opponent has zero cards then you lose.
sp {elaborate*state*sentence*if-an-opponent-has-zero-cards-then-you-lose
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 10)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S3335>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If an opponent has zero cards then you lose.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |an|
         ^next <w2>)
   (<w2> ^spelling |opponent|
         ^next <w3>)
   (<w3> ^spelling |has|
         ^next <w4>)
   (<w4> ^spelling |zero|
         ^next <w5>)
   (<w5> ^spelling |cards|
         ^next <w6>)
   (<w6> ^spelling |then|
         ^next <w7>)
   (<w7> ^spelling |you|
         ^next <w8>)
   (<w8> ^spelling |lose|
         ^next <w9>)
   (<w9> ^spelling |.|
         ^next nil)
   (<S3335> ^if-subclause <S3445>
            ^message-type conditional
            ^then-subclause <S3579>)
   (<S3445> ^action <N10696>
            ^agent <P90714>
            ^arg1 <P90761>)
   (<N10696> ^handle has
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-has1)
   (<P90714> #^handle new-object-id11
             ^item-type object
             ^predicates <P90715>
             ^predicates-copied true)
   (<P90715> ^category object
             ^dialog-object true
             ^handle opponent1
             ^name opponent1)
   (<P90761> #^handle new-object-id12
             ^item-type card
             ^predicates <P90762>
             ^predicates-copied true)
   (<P90762> ^category card
             ^dialog-object true
             ^multiple true
             ^number 0
             ^visibility not-visible)
   (<S3579> ^action <N10722>
            ^agent <R10047>)
   (<N10722> ^handle lose
             ^item-type action
             ^procedural <E14>
             ^type action)
   (<E14> ^op_name initiate-lose1)
   (<R10047> ^arm <A10082>
             ^handle rosie
             ^item-type object
             ^predicates <P90068>)
   (<A10082> ^action wait)
   (<P90068> ^handle rosie)
}


#   If an opponent has an empty hand then you lose.
sp {elaborate*state*sentence*if-an-opponent-has-an-empty-hand-then-you-lose
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 11)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S3623>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If an opponent has an empty hand then you lose.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |an|
         ^next <w2>)
   (<w2> ^spelling |opponent|
         ^next <w3>)
   (<w3> ^spelling |has|
         ^next <w4>)
   (<w4> ^spelling |an|
         ^next <w5>)
   (<w5> ^spelling |empty|
         ^next <w6>)
   (<w6> ^spelling |hand|
         ^next <w7>)
   (<w7> ^spelling |then|
         ^next <w8>)
   (<w8> ^spelling |you|
         ^next <w9>)
   (<w9> ^spelling |lose|
         ^next <w10>)
   (<w10> ^spelling |.|
         ^next nil)
   (<S3623> ^if-subclause <S3733>
            ^message-type conditional
            ^then-subclause <S3884>)
   (<S3733> ^action <N10751>
            ^agent <P90781>
            ^arg1 <P90795>)
   (<N10751> ^handle has
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-has1)
   (<P90781> #^handle new-object-id13
             ^item-type object
             ^predicates <P90782>
             ^predicates-copied true)
   (<P90782> ^category object
             ^dialog-object true
             ^handle opponent1
             ^name opponent1)
   (<P90795> #^handle new-object-id14
             ^item-type object
             ^predicates <P90796>
             ^predicates-copied true)
   (<P90796> ^category object
             ^dialog-object true
             ^handle hand1
             ^name hand1
             ^property empty)
   (<S3884> ^action <N10781>
            ^agent <R10047>)
   (<N10781> ^handle lose
             ^item-type action
             ^procedural <E14>
             ^type action)
   (<E14> ^op_name initiate-lose1)
   (<R10047> ^arm <A10082>
             ^handle rosie
             ^item-type object
             ^predicates <P90068>)
   (<A10082> ^action wait)
   (<P90068> ^handle rosie)
}


#   If a card has a value of eight then it is wild.
sp {elaborate*state*sentence*if-a-card-has-a-value-of-eight-then-it-is-wild
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 12)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S3928>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card has a value of eight then it is wild.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |has|
         ^next <w4>)
   (<w4> ^spelling |a|
         ^next <w5>)
   (<w5> ^spelling |value|
         ^next <w6>)
   (<w6> ^spelling |of|
         ^next <w7>)
   (<w7> ^spelling |eight|
         ^next <w8>)
   (<w8> ^spelling |then|
         ^next <w9>)
   (<w9> ^spelling |it|
         ^next <w10>)
   (<w10> ^spelling |is|
         ^next <w11>)
   (<w11> ^spelling |wild|
         ^next <w12>)
   (<w12> ^spelling |.|
         ^next nil)
   (<S3928> ^if-subclause <S4038>
            ^message-type conditional
            ^then-subclause <S4210>)
   (<S4038> ^action <N10810>
            ^agent <P90815>
            ^arg1 <S4130>
            ^arg1 <N10825>)
   (<N10810> ^handle has
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-has1)
   (<P90815> #^handle new-object-id15
             ^item-type card
             ^predicates <P90816>
             ^predicates-copied true)
   (<P90816> ^category card
             ^dialog-object true)
   (<S4130> ^2 <S4131>
            ^handle of1
            ^item-type predicate)
   (<S4131> ^2 <R12908>
            ^handle value)
   (<R12908> ^number 8)
   (<N10825> ^handle value
             ^property <C27>
             ^relation <S4128>)
   (<C27> ^handle concept
           ^type conceptual)
   (<S4128> ^2 <R12908>
            ^handle of1)
   (<S4210> ^arg1 <P90815>
            ^predicate <N10853>)
   (<N10853> ^handle wild
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
}


#   If the value of a card is eight then the card is a wild card.
sp {elaborate*state*sentence*if-the-value-of-a-card-is-eight-then-the-card-is-a-wild-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 13)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S4271>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If the value of a card is eight then the card is a wild card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |the|
         ^next <w2>)
   (<w2> ^spelling |value|
         ^next <w3>)
   (<w3> ^spelling |of|
         ^next <w4>)
   (<w4> ^spelling |a|
         ^next <w5>)
   (<w5> ^spelling |card|
         ^next <w6>)
   (<w6> ^spelling |is|
         ^next <w7>)
   (<w7> ^spelling |eight|
         ^next <w8>)
   (<w8> ^spelling |then|
         ^next <w9>)
   (<w9> ^spelling |the|
         ^next <w10>)
   (<w10> ^spelling |card|
         ^next <w11>)
   (<w11> ^spelling |is|
         ^next <w12>)
   (<w12> ^spelling |a|
         ^next <w13>)
   (<w13> ^spelling |wild|
         ^next <w14>)
   (<w14> ^spelling |card|
         ^next <w15>)
   (<w15> ^spelling |.|
         ^next nil)
   (<S4271> ^if-subclause <S4434>
            ^message-type conditional
            ^then-subclause <S4582>)
   (<S4434> ^arg1 <S4435>
            ^predicate <P11018>)
   (<S4435> ^2 <S4436>
            ^handle of1
            ^item-type predicate)
   (<S4436> ^2 <P90857>
            ^handle value)
   (<P11018> ^handle 8
              ^item-type predicate
              ^property <P11000>)
   (<P11000> ^handle number
              ^item-type property
              ^type number)
   (<S4582> ^arg1 <P90857>
            ^predicate <N10933>
            ^predicate <N10930>)
   (<P90857> #^handle new-object-id16
             ^item-type card
             ^predicates <P90858>
             ^predicates-copied true)
   (<P90858> ^category card
             ^dialog-object true)
   (<N10933> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
   (<N10930> ^handle wild
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
}


#   If a card is on the deck and it is not below another card then it is the top card.
sp {elaborate*state*sentence*if-a-card-is-on-the-deck-and-it-is-not-below-another-card-then-it-is-the-top-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 14)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S4677>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card is on the deck and it is not below another card then it is the top card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |is|
         ^next <w4>)
   (<w4> ^spelling |on|
         ^next <w5>)
   (<w5> ^spelling |the|
         ^next <w6>)
   (<w6> ^spelling |deck|
         ^next <w7>)
   (<w7> ^spelling |and|
         ^next <w8>)
   (<w8> ^spelling |it|
         ^next <w9>)
   (<w9> ^spelling |is|
         ^next <w10>)
   (<w10> ^spelling |not|
         ^next <w11>)
   (<w11> ^spelling |below|
         ^next <w12>)
   (<w12> ^spelling |another|
         ^next <w13>)
   (<w13> ^spelling |card|
         ^next <w14>)
   (<w14> ^spelling |then|
         ^next <w15>)
   (<w15> ^spelling |it|
         ^next <w16>)
   (<w16> ^spelling |is|
         ^next <w17>)
   (<w17> ^spelling |the|
         ^next <w18>)
   (<w18> ^spelling |top|
         ^next <w19>)
   (<w19> ^spelling |card|
         ^next <w20>)
   (<w20> ^spelling |.|
         ^next nil)
   (<S4677> ^if-subclause <S4874>
            ^message-type conditional
            ^then-subclause <S5119>)
   (<S4874> ^subclause <S4949>
            ^subclause <S4787>)
   (<S4949> ^arg1 <P90933>
            ^modifier <N11001>
            ^predicate <S5040>)
   (<N11001> ^handle negation)
   (<S5040> ^2 <P91016>
            ^handle below1
            ^item-type predicate)
   (<P91016> #^handle new-object-id18
             ^item-type card
             ^predicates <P91017>
             ^predicates-copied true
             ^specifier distinct)
   (<P91017> ^category card
             ^dialog-object true)
   (<S4787> ^arg1 <P90933>
            ^predicate <S4861>)
   (<S4861> ^2 <R13422>
            ^handle on1
            ^item-type predicate)
   (<R13422> ^handle deck
             ^item-type object
             ^predicates <P90990>
             ^predicates-copied true
             ^property <P4000>
             ^visibility not-visible)
   (<P90990> ^category object
             ^dialog-object true)
   (<S5119> ^arg1 <P90933>
            ^predicate <N11041>
            ^predicate <N11044>)
   (<P90933> #^handle new-object-id17
             ^item-type card
             ^predicates <P90934>
             ^predicates-copied true)
   (<P90934> ^category card
             ^dialog-object true)
   (<N11041> ^handle top
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
   (<N11044> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
}


#   If a card is on the deck and the card is not below another card then the card is the top card.
sp {elaborate*state*sentence*if-a-card-is-on-the-deck-and-the-card-is-not-below-another-card-then-the-card-is-the-top-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 15)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S5214>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card is on the deck and the card is not below another card then the card is the top card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |is|
         ^next <w4>)
   (<w4> ^spelling |on|
         ^next <w5>)
   (<w5> ^spelling |the|
         ^next <w6>)
   (<w6> ^spelling |deck|
         ^next <w7>)
   (<w7> ^spelling |and|
         ^next <w8>)
   (<w8> ^spelling |the|
         ^next <w9>)
   (<w9> ^spelling |card|
         ^next <w10>)
   (<w10> ^spelling |is|
         ^next <w11>)
   (<w11> ^spelling |not|
         ^next <w12>)
   (<w12> ^spelling |below|
         ^next <w13>)
   (<w13> ^spelling |another|
         ^next <w14>)
   (<w14> ^spelling |card|
         ^next <w15>)
   (<w15> ^spelling |then|
         ^next <w16>)
   (<w16> ^spelling |the|
         ^next <w17>)
   (<w17> ^spelling |card|
         ^next <w18>)
   (<w18> ^spelling |is|
         ^next <w19>)
   (<w19> ^spelling |the|
         ^next <w20>)
   (<w20> ^spelling |top|
         ^next <w21>)
   (<w21> ^spelling |card|
         ^next <w22>)
   (<w22> ^spelling |.|
         ^next nil)
   (<S5214> ^if-subclause <S5411>
            ^message-type conditional
            ^then-subclause <S5722>)
   (<S5411> ^subclause <S5519>
            ^subclause <S5324>)
   (<S5519> ^arg1 <P91044>
            ^modifier <N11119>
            ^predicate <S5610>)
   (<N11119> ^handle negation)
   (<S5610> ^2 <P91176>
            ^handle below1
            ^item-type predicate)
   (<P91176> #^handle new-object-id20
             ^item-type card
             ^predicates <P91177>
             ^predicates-copied true
             ^specifier distinct)
   (<P91177> ^category card
             ^dialog-object true)
   (<S5324> ^arg1 <P91044>
            ^predicate <S5398>)
   (<S5398> ^2 <R13422>
            ^handle on1
            ^item-type predicate)
   (<R13422> ^handle deck
             ^item-type object
             ^predicates <P90990>
             ^predicates-copied true
             ^property <P4000>
             ^visibility not-visible)
   (<P90990> ^category object
             ^dialog-object true)
   (<S5722> ^arg1 <P91044>
            ^predicate <N11169>
            ^predicate <N11166>)
   (<P91044> #^handle new-object-id19
             ^item-type card
             ^predicates <P91045>
             ^predicates-copied true)
   (<P91045> ^category card
             ^dialog-object true)
   (<N11169> ^handle card
             ^item-type predicate
             ^property <P7000>)
   (<P7000> ^handle category
             ^item-type property
             ^type visual)
   (<N11166> ^handle top
             ^item-type predicate
             ^property <P4000>)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
}


#   If a card is in your hand then it is your card.
sp {elaborate*state*sentence*if-a-card-is-in-your-hand-then-it-is-your-card
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 16)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S5817>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If a card is in your hand then it is your card.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |a|
         ^next <w2>)
   (<w2> ^spelling |card|
         ^next <w3>)
   (<w3> ^spelling |is|
         ^next <w4>)
   (<w4> ^spelling |in|
         ^next <w5>)
   (<w5> ^spelling |your|
         ^next <w6>)
   (<w6> ^spelling |hand|
         ^next <w7>)
   (<w7> ^spelling |then|
         ^next <w8>)
   (<w8> ^spelling |it|
         ^next <w9>)
   (<w9> ^spelling |is|
         ^next <w10>)
   (<w10> ^spelling |your|
         ^next <w11>)
   (<w11> ^spelling |card|
         ^next <w12>)
   (<w12> ^spelling |.|
         ^next nil)
   (<S5817> ^if-subclause <S5927>
            ^message-type conditional
            ^then-subclause <S6082>)
   (<S5927> ^arg1 <P91251>
            ^predicate <S6003>
            ^predicate <S6002>)
   (<P91251> #^handle new-object-id21
             ^item-type card
             ^predicates <P91252>
             ^predicates-copied true)
   (<P91252> ^category card
             ^dialog-object true)
   (<S6003> ^2 <N11205>
            ^handle hand1
            ^item-type predicate)
   (<N11205> ^handle owned-by-you1)
   (<S6002> ^2 <R14227>
            ^handle in1
            ^item-type predicate)
   (<R14227> ^handle hand1
             ^item-type object
             ^possessive true
             ^predicates <P91269>
             ^predicates-copied true
             ^property <P4000>
             ^visibility not-visible)
   (<P91269> ^category object
             ^dialog-object true)
   (<P4000> ^handle name
             ^item-type property
             ^type visual)
   (<S6082> ^arg1 <P91251>
            ^predicate <N11235>)
   (<N11235> ^handle owned-by-you1
             ^item-type predicate)
}


#   If two cards have the same value then they have the same rank.
sp {elaborate*state*sentence*if-two-cards-have-the-same-value-then-they-have-the-same-rank
   (state <s> ^name comprehension
              ^superstate <ss>
              ^segment <seg>)
   (<ss> ^current-sentence-number 17)
-->
   (<seg> ^input-sentence <first>
          ^current-word <first>
          ^original-sentence <first>
          ^expected <S6160>)
   (<first> ^spelling |*|
            ^next <w0>
            ^complete-sentence |If two cards have the same value then they have the same rank.|)
   (<w0> ^spelling |if|
         ^next <w1>)
   (<w1> ^spelling |two|
         ^next <w2>)
   (<w2> ^spelling |cards|
         ^next <w3>)
   (<w3> ^spelling |have|
         ^next <w4>)
   (<w4> ^spelling |the|
         ^next <w5>)
   (<w5> ^spelling |same|
         ^next <w6>)
   (<w6> ^spelling |value|
         ^next <w7>)
   (<w7> ^spelling |then|
         ^next <w8>)
   (<w8> ^spelling |they|
         ^next <w9>)
   (<w9> ^spelling |have|
         ^next <w10>)
   (<w10> ^spelling |the|
         ^next <w11>)
   (<w11> ^spelling |same|
         ^next <w12>)
   (<w12> ^spelling |rank|
         ^next <w13>)
   (<w13> ^spelling |.|
         ^next nil)
   (<S6160> ^if-subclause <S6270>
            ^message-type conditional
            ^then-subclause <S6417>)
   (<S6270> ^action <N11261>
            ^agent <P91339>
            ^arg1 <N11276>
            ^arg1 <N11279>)
   (<N11261> ^handle has
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<E11> ^op_name initiate-has1)
   (<P91339> ^item-type card
             ^predicates <P91340>
             ^predicates-copied true)
   (<P91340> ^category card
             ^dialog-object true
             ^multiple true
             ^number 2
             ^visibility not-visible)
   (<N11276> ^handle same
             ^property <C12>)
   (<C12> ^handle property
           ^type visual)
   (<N11279> ^handle value
             ^property <C27>)
   (<C27> ^handle concept
           ^type conceptual)
   (<S6417> ^action <N11289>
            ^agent <P91339>
            ^arg1 <R14573>)
   (<N11289> ^handle has
             ^item-type action
             ^procedural <E11>
             ^type action)
   (<R14573> #^handle rank1
             ^item-type object
             ^predicates <P91413>)
   (<P91413> ^category object
             ^shape rank1
             ^dialog-object true
             ^property same)
}


