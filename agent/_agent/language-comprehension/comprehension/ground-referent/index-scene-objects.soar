sp {ground-referent*propose*index-scene-object
#:interrupt
  (state <s> ^name ground-referent
             ^candidate-set <cand>
             ^constraint-lt <lli>)
   (<lli> -^demonstrative true
           ^specifier <specifier>)
  -(<cand> ^generated-candidates true)
-->
   (<s> ^operator <op> + =)
   (<op> ^name index-scene-objects
         ^specifier <specifier>)
}

sp {ground-referent*propose*index-scene-object*demonstrative
# :interrupt
   (state <s> ^name ground-referent
              ^candidate-set <cand>
              ^constraint-lt <lli>)
   (<lli> ^demonstrative true)
  -(<cand> ^generated-candidates true)
-->
   (<s> ^operator <op> + =)
   (<op> ^name index-scene-objects
         ^specifier demonstrative)
}

sp {ground-referent*propose*index-scene-object*no-specifier
#:interrupt
   (state <s> ^name ground-referent
              ^candidate-set <cand>
              ^constraint-lt <lli>)
   (<lli> -^demonstrative true
          -^specifier)
  -(<cand> ^generated-candidates true)
-->
   (<s> ^operator <op> + =)
   (<op> ^name index-scene-objects
         ^specifier definite)
}


############# APPLY #########

sp {ground-referent*apply*index-scene-objects*personal*create*candidates
   (state <s> ^operator <o>
              ^constraint-count <cc>
              ^candidate-set <cand>
              ^topstate.interaction.referents.objects.object <obj>)
   (<o> ^name index-scene-objects
        ^specifier personal)           
-->
   (<cand> ^proto-referent <pr>
        )#   ^generated-candidates true)
   (<pr> ^constraint-count <cc>
         ^object <obj>)
}

sp {ground-referent*apply*index-scene-objects*create*candidates
   (state <s> ^operator <o>
              ^candidate-set <cand>
              ^constraint-count <cc>
              ^top-state.world.objects.object <obj>)  ## OUCH!!
   (<o> ^name index-scene-objects
        ^specifier << definite universal indefinite >>)
-->
   (<cand> ^proto-referent <pr>)
          # ^generated-candidates true)
   (<pr> ^constraint-count <cc>
         ^object <obj>)
}

sp {ground-referent*apply*index-scene-objects*create*candidates*parallel
   (state <s> ^operator <o>
              ^candidate-set <cand>
              ^constraint-count <cc>)  ## OUCH!!
   (<o> ^name index-scene-objects)
-->
   (<cand> ^generated-candidates true)
}
##########

sp {ground-referent*apply*index-scene-objects*demonstrative*create*candidates
   (state <s> ^operator <o>
              ^candidate-set <cand>
              ^constraint-count <cc>
              ^top-state.world.objects.object <obj>)
   (<obj> ^predicates.indicated pointed)              
   (<o> ^name index-scene-objects
        ^specifier demonstrative)           
-->
 #  (write (crlf) |Pointing to: | <obj>)
   (<cand> ^proto-referent <pr>
      )  #   ^generated-candidates true)
   (<pr> ^constraint-count <cc>
         ^object <obj>)
}

sp {ground-referent*apply*index-scene-objects*demonstrative*create*candidates*failure
   (state <s> ^operator <o>
              ^candidate-set <cand>       
              ^superstate.operator <so>)
  -{(<s> ^top-state.world.objects.object <obj>)
    (<obj> ^predicates.indicated pointed)}            
    (<o> ^name index-scene-objects
         ^specifier demonstrative)
    (<so> ^parameter <p>
         ^constraints <c>)
-->
   (<c> ^failed-grounding <p>)   
   (write (crlf) |Nothing being pointed at: |)
   (<cand> ^generated-candidates true)
}
########

sp {ground-referent*apply*index-scene-objects-it*create*candidates
   (state <s> ^operator <o>
              ^constraint-count <cc>
              ^candidate-set <cand>
              ^top-state.saved-object-as-it <obj>)
   (<o> ^name index-scene-objects
        ^specifier it)           
-->
   (<cand> ^proto-referent <pr>
        )#   ^generated-candidates true)
   (<pr> ^constraint-count <cc>
         ^object <obj>)
}