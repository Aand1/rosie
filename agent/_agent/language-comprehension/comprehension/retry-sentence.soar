sp {comprehension*propose*retry-sentence
  #:interrupt
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^original-sentence <is>
          ^retried-once <x>
         -^retry-sentence true)
   (<is> ^processing-result failure
        -^processed-sentence true)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name retry-sentence)
}

sp {comprehension*compare*retry-sentence
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name retry-sentence)
   (<op2> ^name failed-comprehension)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*apply*retry-sentence*internal
 #:interrupt
   (state <s> ^operator.name retry-sentence
              ^top-state.world-usage internal
              ^segment <seg>)
   (<seg> ^retried-once <x>
          ^original-sentence <sentence>)
   (<sentence> ^processing-result failure)
-->
   (<sentence> ^processing-result failure -)
   (<s> ^segment <seg> -
        ^segment <nseg>)
   (<nseg> ^retry-sentence <x> 
           ^semantics <sem> 
           ^last-merge <lm>)
    (<lm> ^receiver nil 
          ^assigner nil 
          ^structure-type none)
}


sp {comprehension*apply*retry-sentence*external
   (state <s> ^operator.name retry-sentence
              ^top-state.world-usage external
              ^segment <seg>)
   (<seg> ^retried-once <x>
          ^original-sentence <sentence>)
   (<sentence> ^processing-result failure)
-->
   (<sentence> ^processing-result failure -)
   (<s> ^segment <seg> -
        ^segment <nseg>)
   (<nseg> ^input-sentence <sentence>
           ^current-word <sentence>
           ^original-sentence <sentence>
           ^retry-sentence <x>
           ^semantics <sss>  
           ^last-merge <lm>)
    (<lm> ^receiver nil 
          ^assigner nil 
          ^structure-type none)
}