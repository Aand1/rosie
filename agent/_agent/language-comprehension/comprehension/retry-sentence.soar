sp {comprehension*propose*retry-sentence
 #:interrupt
   (state <s> ^name comprehension
              ^segment <seg>)
   (<seg> ^original-sentence <is>
          ^retry-sentence <x>
         -^retried-sentence true)
    (<is> -^processed-sentence true)
-->
   (<s> ^operator <op> + =, >)
   (<op> ^name retry-sentence
         ^new-segment <nseg>)
}
#sp {comprehension*apply*retry-sentence*external*clear-processing-result
#   (state <s> ^operator.name retry-sentence
#              ^process-next.next nil
#              ^segment <seg>)
#   (<seg> ^retry-sentence <x>
#          ^original-sentence <sentence>)
#   (<sentence> ^processing-result failure)
#-->
#   (<sentence> ^processing-result failure -
#               ^processed true -)
#}
##JK remove processed true
#sp {comprehension*apply*retry-sentence*process-next
#   (state <s> ^operator.name retry-sentence
#              ^segment <seg>)
#   (<seg> ^retry-sentence <x>
#          ^original-sentence <sentence>)
#   (<sentence> ^next <n>)
#-->
#   (<s> ^process-next <n>)
#}
#sp {comprehension*apply*retry-sentence*process-next*remove
#   (state <s> ^operator.name retry-sentence
#              ^process-next <pn>
#              ^segment <seg>)
#   (<pn> ^next {<n> <> nil})
#-->
#    (<pn> ^processed true -)
#   (<s> ^process-next <n>)
#}
#sp {comprehension*apply*retry-sentence*process-next*nil
#   (state <s> ^operator.name retry-sentence
#              ^process-next <pn>
#              ^segment <seg>)
#   (<pn> ^next nil)
#-->
#   (<seg> ^retried-sentence true)
#   (<s> ^process-next <n>)
#}



sp {comprehension*compare*retry-sentence
   (state <s> ^name comprehension
              ^operator <op1> +
                        <op2> +)
   (<op1> ^name retry-sentence)
   (<op2> ^name failed-comprehension)
-->
   (<s> ^operator <op1> > <op2>)
}

sp {comprehension*apply*retry-sentence*internal
 #:interrupt
   (state <s> ^operator <o>
              ^top-state.world-usage internal
             # ^process-next.next nil
              ^segment <seg>)
   (<seg> ^retry-sentence <x>)
   (<o> ^name retry-sentence
        ^new-segment <nseg>)
-->
    #(interrupt)
   (<s> ^segment <seg> -
        ^segment <nseg>)
   (<nseg> #^retry-receiver <x> 
           ^semantics <sem> 
           ^last-merge <lm>
           ^retried-sentence true)
    (<lm> ^receiver nil 
          ^assigner nil 
          ^structure-type none)
}

sp {comprehension*apply*retry-sentence*external
   (state <s> ^operator <o>
              ^top-state.world-usage external
              ^segment <seg>)
    (<seg> #^retry-sentence <x>
          ^original-sentence <sentence>)
 	(<o> ^name retry-sentence
         ^new-segment <nseg>)
-->
   (<s> ^segment <seg> -
        ^segment <nseg>)
   (<nseg> ^input-sentence <sentence>
           ^current-word <sentence>
           ^original-sentence <sentence>
      #     ^retry-receiver <x>
           ^semantics <sss>  
           ^last-merge <lm>
           ^retried-sentence true)
    (<lm> ^receiver nil 
          ^assigner nil 
          ^structure-type none)
}

sp {comprehension*apply*retry-sentence*copy-retry
 #:interrupt
   (state <s> ^operator <o>
              ^segment <seg>)
   (<seg> ^retry-sentence <x>)
   (<o> ^name retry-sentence
        ^new-segment <nseg>)
-->
   (<nseg> ^retry-receiver <x>)
}

sp {comprehension*apply*retry-sentence*external*clear-processing-result
   (state <s> ^operator.name retry-sentence
              ^top-state.world-usage external
              ^segment <seg>)
   (<seg> ^retry-sentence <x>
          ^original-sentence <sentence>)
   (<sentence> ^processing-result failure)
-->
   (<sentence> ^processing-result failure -
               ^processed true -)
}