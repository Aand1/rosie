sp {top-statel*elaborate*lti-store
   (state <s> ^superstate nil)
-->
   (<s> ^lti-store <store>)
   (<store> ^to-get <get>)
   (<get> ^handle cook1 pick-up1 put-down1 turn-on1 turn-off1 on2 off2 closed1 open1 cooked1 raw1)
}

sp {top-state*elaborate*smem-query*lti-store
   (state <s> ^superstate nil
              ^lti-store.to-get.handle <handle>
             -^lti-store.<handle> <lti>)
-->
   (<s> ^smem-query <q>)
   (<q> ^cue <cue>
        ^depth 8)
   (<cue> ^handle <handle>)
}

sp {top-state*elaborate*smem-query*lti-store*result
   :o-support
   (state <s> ^superstate nil
              ^smem-query <q>
              ^lti-store <store>)
   (<q> ^cue.handle <handle>
        ^result <lti>)
   (<store> ^to-get.handle <handle>)
-->
   (<store> ^<handle> <lti>)
}

sp {top-state*elaborate*message-list
   (state <s> ^superstate nil
              ^turn-off ASEFASEF
              )
-->
   (<s> ^message-list <msgs>)
   (<msgs> ^message <m1> <m2> <m3> <m4> <m5>
           ^next <m1>)
   
   (<m1> ^message-num 1
         ^next <m2>)
   (<m2> ^message-num 2
         ^next <m3>)
   (<m3> ^message-num 3
         ^next <m4>)
   (<m4> ^message-num 4
         ^next <m5>)
   (<m5> ^message-num 5
         ^next none)
}

sp {DEBUG-RULE*top-state*propose*send-next-message
   (state <s> ^superstate nil
             -^interaction.status.new-message
              ^message-list.next { <next> <> none })
-->
   (<s> ^operator <o> + <)
   (<o> ^name send-next-message 
        ^message <next>)
}

sp {DEBUG-RULE*top-state*apply*send-next-message*create*message
   (state <s> ^superstate nil
              ^operator <o>
              ^interaction.status <status>
              ^message-list <msgs>)
   (<o> ^name send-next-message
        ^message <msg>)
   (<msg> ^next <next>
          ^structure <struct>)
-->
   (<msgs> ^next <msg> -
           ^next <next>)
   (<status> ^new-message <struct>)
}


sp {top-state*testing*elaborate*test-message*1
   (state <s> ^superstate nil
              ^message-list.message <msg>
              ^lti-store.pick-up1 <pickup>
              ^world.objects.object <steak>)
   (<msg> ^message-num 1)
   (<steak> ^handle 6)
-->
   (<msg> ^structure <st>)
   (<st> ^action <pickup> ^arg1 <steak> ^message-type command)
}

sp {top-state*testing*elaborate*test-message*2
   (state <s> ^superstate nil
              ^message-list.message <msg>
              ^lti-store.put-down1 <putdown>
              ^world.objects.object <steak>
              ^world.objects.object <oven>)
   (<msg> ^message-num 2)
   (<steak> ^handle 6)
   (<oven> ^handle 4)
-->
   (<msg> ^structure <st>)
   (<st> ^action <putdown> ^arg1 <steak> ^arg2 <rel> ^message-type command)
   (<rel> ^arg-type predicate ^handle on1 ^2 <oven>)
}

#(S297 ^action @A1012 ^arg1 O8059 ^message-type command)
#  (@A1012 ^handle cook ^item-type action)
#  (O8059 ^handle 6 ^item-type object ^predicates P90138 ^real true
#         ^svs-obj C181)
#    (P90138 ^arm-status not-grabbed ^category block1 ^cooked false
#           ^movable true ^object-handle 6 ^shape steak1 ^size medium1
#           ^visible true)
#    (C181 ^id bel-6 ^object-source belief ^type node)