#sp {top-state*state*no-change*propose*create*purpose
#   (state <s> ^top-state <s>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name create-purpose)
#}

sp {top-state*smem-query-cue*kitchen
   (state <s> ^superstate nil)
-->
   (<s> ^smem-query-cue <cue>)
   (<cue> ^handle kitchen1)
}

sp {top-state*elaborate*kitchen
   :o-support
   (state <s> ^superstate nil
              ^retrieved-lti-cue.retrieved-lti <lti>)
   (<lti> ^handle kitchen1)
-->
   (<s> ^kitchen <lti>)
}

sp {interaction*apply*interpret-message*replace*kitchen*arg1
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.kitchen <kitchen>)
   (<o> ^name interpret-message
        ^message <msg>)
   (<msg> ^message-type << command object-description >>
          ^arg1 <arg1>)
   (<arg1> ^item-type object
           ^predicates.handle kitchen1)
-->
   (<msg> ^arg1 <arg1> -
          ^arg1 <kitchen>)
}

sp {interaction*apply*interpret-message*replace*kitchen*arg2
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.kitchen <kitchen>)
   (<o> ^name interpret-message
        ^message <msg>)
   (<msg> ^message-type << command object-description >>
          ^{ << predicate arg2 >> } <pred>)
   (<pred> ^item-type predicate
           ^2 <arg2>)
   (<arg2> ^item-type object
           ^predicates.handle kitchen1)
-->
   (<pred> ^2 <arg2> -
          ^2 <kitchen>)
}

sp {interaction*apply*interpret-message*replace*kitchen*subclause*arg2
   (state <s> ^name interaction
              ^operator <o>
              ^top-state.kitchen <kitchen>)
   (<o> ^name interpret-message
        ^message <msg>)
   (<msg> ^message-type << command object-description >>
          ^subclause.{ << predicate arg2 >> } <pred>)
   (<pred> ^item-type predicate
           ^2 <arg2>)
   (<arg2> ^item-type object
           ^predicates.handle kitchen1)
-->
   (<pred> ^2 <arg2> -
          ^2 <kitchen>)
}

sp {top-state*prefer*others*over*create-purpose
   (state <s> ^top-state <s>
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name <> create-purpose)
   (<o2> ^name create-purpose)
-->
   (<s> ^operator <o1> > <o2>)
}
   

#sp {state*no-change*apply*create-purpose*1
#   (state <s> ^top-state <s>
#              ^operator.name create-purpose
#              ^interaction.changes <c>
#              ^world.objects.object <obj>
#             -^action-num)
#   (<obj> ^id 11)
#-->
#   (<c> ^new-segment-info <info>)
#   (<info> ^purpose <p>
#           ^originator instructor)
#   (<p> ^type action-command
#        ^parameters.action-command <cmd>
#        ^satisfaction.action-event.type pick-up1)
#   (<cmd> ^id @A1001
#          ^arg1 <obj>)
#   (<s> ^action-num 1)
#}

#sp {top-state*propose*action
#   (state <s> ^top-state <s>
#              ^interaction.stack.segment.purpose <p>)
#   (<p> ^type action-command)
#-->
#   (<s> ^operator <o> + >)
#   (<o> ^name action
#        ^purpose <p>)
#}


        

sp {state*no-change*apply*create-purpose*2
   (state <s> ^top-state <s>
              ^operator.name create-purpose
              ^interaction.changes <c>
              ^world.objects.object <obj1>
              ^world.objects.object <obj2>
              ^action-num 1)
   (<obj1> ^id 11)
   (<obj2> ^id 2)
-->
   (<c> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type action-command
        ^parameters <params>
        ^satisfaction.action-event.type putdown)
   (<params> ^object1 <obj1>
             ^object2 <obj2>)
   (<s> ^action-num 1 -
        ^action-num 2)
}
    