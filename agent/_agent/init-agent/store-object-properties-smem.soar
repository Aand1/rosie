sp {init-agent*propose*store-object-properties-smem
   (state <s> ^name init-agent
             -^stored-object-properties)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-object-properties-smem
        ^properties-to-store <pts>)
}

###### IMPORTANT #####
# We are expecting that wherever the default concepts are defined, 
# that the store-object-properties-smem operator is elaborated with the following structures:
# (<s> ^name store-object-properties-smem
#      ^properties-to-store <pts>)
# (<pts> ^property <prop>) # can be any number of these
# (<prop> ^property-name <prop-name>
#         ^property-type << visual linguistic measurable >>
#         ^adjective <word1> <word2> ...) # As many words as you want


   # Generate smem representation for visual and linguistic properties
sp {init-agent*elaborate*store-object-properties-smem*visual*linguistic*property*rep
   (state <s> ^name init-agent
              ^operator <o> +)
   (<o> ^name store-object-properties-smem
        ^properties-to-store.property <p>)
   (<p> ^property-name <name>
        ^property-type { <type> << visual linguistic >> })
-->
   (<p> ^smem-rep <rep>)
   (<rep> ^wme-type property ^name <name> ^type <type>)
}

# Generate smem representations for measurable properties
sp {init-agent*elaborate*store-object-properties-smem*measurable*property*rep
   (state <s> ^name init-agent
              ^operator <o> +)
   (<o> ^name store-object-properties-smem
        ^properties-to-store.property <p>)
   (<p> ^property-name <name>
        ^property-type measurable
        ^measure-location <loc>)
-->
   (<p> ^smem-rep <rep>)
   (<rep> ^wme-type property ^name <name> ^type measurable ^location <loc>)
}

# Store the properties in smem
sp {init-agent*apply*store-object-properties-smem*store*properties
   (state <s> ^name init-agent
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-object-properties-smem
        ^properties-to-store.property.smem-rep <prop>)
-->
   (<cmd> ^store <prop>)
}

# Generate and store smem representations for linguistic adjectives
sp {init-agent*apply*store-object-properties-smem*store*adjectives*linguistic
   (state <s> ^name init-agent
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-object-properties-smem
        ^properties-to-store.property <prop>)
   (<prop> ^smem-rep <prop-rep>
           ^property-type linguistic
           ^adjective <adj>)
-->
   (<cmd> ^store <word> <sense>)
   (<word> ^wme-type word ^word <adj> ^sense <sense>)
   (<sense> ^wme-type sense ^word <word> ^type adjective ^property <prop-rep>)
}

# Generate and store smem representations for visual and measurable adjectives
sp {init-agent*apply*store-object-properties-smem*store*adjectives*visual*measurable
   (state <s> ^name init-agent
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-object-properties-smem
        ^properties-to-store.property <prop>)
   (<prop> ^smem-rep <prop-rep>
           ^property-name <prop-name>
           ^property-type << measurable visual >>
           ^adjective <adj>)
-->
   (<cmd> ^store <word> <sense>)
   (<word> ^wme-type word ^word <adj> ^sense <sense>)
   (<sense> ^wme-type sense ^word <word> ^type adjective ^property <prop-rep> ^label (concat <prop-name> |-| <adj>))
}


# Generate and store smem representations for superlatives
sp {init-agent*apply*store-object-properties-smem*store*superlatives
   (state <s> ^name init-agent
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name store-object-properties-smem
        ^properties-to-store.property <prop>)
   (<prop> ^smem-rep <prop-rep>
           ^property-name <prop-name>
           ^property-type measurable
           ^superlative.<type> <sup>)
-->
   (<cmd> ^store <word> <sense>)
   (<word> ^wme-type word ^word <sup> ^sense <sense>)
   (<sense> ^wme-type sense ^word <word> ^type superlative ^property <prop-rep> ^value <type>)
}

# Mark that the properties have been stored
sp {init-agent*apply*store-object-properties*none*mark*stored
   (state <s> ^name init-agent
              ^operator <o>)
   (<o> ^name store-object-properties-smem
       -^properties-to-store.property)
-->
   (<s> ^stored-object-properties true)
}

sp {init-agent*apply*store-object-properties-smem*mark*stored
   (state <s> ^name init-agent
              ^operator.name store-object-properties-smem
              ^smem.result.success)
-->
   (<s> ^stored-object-properties true)
}

# Possible hack for disappearing LTI information, hopefully we don't need this
#sp {init-agent*apply*store-object-properties-smem*copy*lti
#   (state <s> ^name init-agent
#              ^operator.name store-object-properties-smem
#              ^agent-info.stored-properties <props>
#              ^smem.result.success <lti>)
#-->
#   (<props> ^retrieved <lti>)
#}
