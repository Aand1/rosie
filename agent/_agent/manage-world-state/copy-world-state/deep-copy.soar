sp {problem-space*state*deep-copy*elaborate*state*maps
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy deep)
-->
   (<state> ^object-map <map>
            ^predicate-map <pred-map>)
}

sp {problem-space*state*deep-copy*elaborate*default*souce*superstate
   (state <s> ^problem-space.state <state>
              ^superstate.world <world>)
   (<state> ^world-copy deep
           -^world-source <> <world>)
-->
   (<state> ^world-source <world>)
}

sp {problem-space*state*deep-copy*world*create*world
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy deep
            ^world-source <source>)
-->
   (<s> ^world <w>)
   (<w> ^objects <objs>
        ^predicates <preds>
        ^robot <robot>)
   (<robot> ^arm <arm>)
}

sp {problem-space*state*deep-copy*world*copy*robot
   (state <s> ^problem-space.state <state>
              ^world.robot <copy-robot>)
   (<state> ^world-copy deep
            ^world-source <source>)
   (<source> ^robot <src-robot>)
   (<src-robot> ^{<att-name> <> arm} <att-val>)
-->
   (<copy-robot> ^<att-name> <att-val>)
}

sp {problem-space*state*deep-copy*world*copy*robot*arm
   (state <s> ^problem-space.state <state>
              ^world.robot.arm <copy-arm>)
   (<state> ^world-copy deep
            ^world-source <source>)
   (<source> ^robot.arm <src-arm>)
   (<src-arm> ^{<att-name> <> arm <> predicates} <att-val>)
-->
   (<copy-arm> ^<att-name> <att-val>)
}

sp {problem-space*state*deep-copy*world*copy*object
   (state <s> ^problem-space.state <state>
              ^world.objects <objs>)
   (<state> ^world-copy deep
            ^world-source <source>
            ^object-map <map>)
   (<source> ^objects.object <src-obj>)
-->
   (<map> ^mapping <mapping>)
   (<mapping> ^source <src-obj> ^copy <copy-obj>)
   (<objs> ^object <copy-obj>)
   (<copy-obj> ^predicates <preds>)
}

sp {problem-space*state*deep-copy*world*copy*object*id
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy deep
            ^object-map.mapping <mapping>)
   (<mapping> ^source <src-obj> ^copy <copy-obj>)
   (<src-obj> ^id <id>)
-->
   (<copy-obj> ^id <id>)
}

sp {problem-space*state*deep-copy*world*copy*object*predicates
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy deep
            ^object-map.mapping <mapping>)
   (<mapping> ^source <src-obj> ^copy <copy-obj>)
   (<src-obj> ^predicates <src-preds>)
   (<copy-obj> ^predicates <copy-preds>)
   (<src-preds> ^<pred-name> <pred-val>)
-->
   (<copy-preds> ^<pred-name> <pred-val>)
}

sp {problem-space*state*deep-copy*world*copy*predicate
   (state <s> ^problem-space.state <state>
              ^world.predicates <preds>)
   (<state> ^world-copy deep
            ^world-source <source>
            ^predicate-map <map>)
   (<source> ^predicates.predicate <src-pred>)
-->
   (<map> ^mapping <mapping>)
   (<mapping> ^source <src-pred> ^copy <copy-pred>)
   (<preds> ^predicate <copy-pred>)
}

sp {problem-space*state*deep-copy*world*copy*predicate*info
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy deep
            ^predicate-map.mapping <mapping>)
   (<mapping> ^source <src-pred> ^copy <copy-pred>)
   (<src-pred> ^name <pred-name>
                 ^predicate-info <pred-info>)
-->
   (<copy-pred> ^name <pred-name>
                ^predicate-info <pred-info>)
}

sp {problem-space*state*deep-copy*world*copy*predicate*instance
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy deep
            ^predicate-map.mapping <mapping>
            ^object-map.mapping <obj1-mapping>
            ^object-map.mapping <obj2-mapping>)
   (<mapping> ^source <src-pred> ^copy <copy-pred>)
   (<src-pred> ^instance <src-instance>)
   (<src-instance> ^1 <src-obj1> ^2 <src-obj2>)
   (<obj1-mapping> ^source <src-obj1> ^copy <copy-obj1>)
   (<obj2-mapping> ^source <src-obj2> ^copy <copy-obj2>)
-->
   (<copy-pred> ^instance <copy-instance>)
   (<copy-instance> ^1 <copy-obj1> ^2 <copy-obj2>)
}

