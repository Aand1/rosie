
sp {anystate*reject*attend-to-scene-change*new-stable-object*moving*candidate
   (state <s> ^operator <o> +)
   (<o> ^name attend-to-scene-change
        ^change.type new-stable-object
        ^change.object.candidate-for-missing-object.moving-object true)
-->
   (<s> ^operator <o> -)
}

# Dont attend to a stale object if another has been flagged as a potential match
sp {anystate*reject*attend-to-scene-change*stale-object*still*candidates
   (state <s> ^operator <o> +
              ^topstate.scene-monitor.new-object.candidate-for-missing-object <obj>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type stale-object
        ^object <obj>)
-->
   (<s> ^operator <o> -)
   (<c> ^rejected true)
}

# If we're searching for the object, don't delete it yet
sp {anystate*reject*attend-to-scene-change*stale-object*searching-for-object
   (state <s> ^operator <o> +)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type stale-object
        ^object.searching-for-object true)
-->
   (<s> ^operator <o> -)
   (<c> ^rejected true)
}



# When we move an object, remove all internal links associated with it
sp {attend-to-scene-change*apply*attend-to-arm*stopped*remove*moved-object*internal-links
   (state <s> ^name attend-to-scene-change
              ^operator.name attend-to-arm
              ^io.input-link.self.action << wait failure >>
              ^topstate.scene-monitor.object <obj>)
   (<obj> ^wm-obj.moving-object true
          ^id <id>
          ^internal-link <id2>)
-->
   (<obj> ^internal-link <id2> -)
   (write |Moved object | <id> | and removed link to | <id2> (crlf))
}

sp {attend-to-scene-change*apply*attend-to-arm*stopped*remove*other*internal-links
   (state <s> ^name attend-to-scene-change
              ^operator.name attend-to-arm
              ^io.input-link.self.action << wait failure >>
              ^topstate.scene-monitor <mon>)
   (<mon> ^object <src-obj>
          ^object <dest-obj>)
   (<src-obj> ^wm-obj.moving-object true
              ^id <id>)
   (<dest-obj> ^internal-link <id>
               ^id <id2>)
-->
   (<dest-obj> ^internal-link <id> -)
   (write |Moved object | <id> | and removed link from | <id2> (crlf))
}

sp {anystate*reject*attend-to-scene-change*moving-object
   (state <s> ^operator <o> +)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^object.wm-obj.moving-object true)
-->
   (<s> ^operator <o> -)
   (<c> ^rejected true)
}

sp {anystate*reject*attend-to-scene-change*grabbed-object
   (state <s> ^operator <o> +
              ^robot-state.arm.grabbed <obj>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^object.wm-obj <obj>)
-->
   (<s> ^operator <o> -)
   (<c> ^rejected true)
}

## moving-object - a flag placed onto an object when we start moving it so it won't get deleted (only while arm is moving)
# LOOKAT
#sp {attend-to-scene-change*apply*attend-to-arm*mark*moving-object
#   (state <s> ^name attend-to-scene-change
#              ^operator.name attend-to-arm
#              ^current-action << grab move drop point >>
#              ^previous-action << wait >>
#              ^topstate.robot-state.arm <arm>
#              ^topstate.scene-monitor.object <obj>)
#   (<arm> ^moving-object <id>)
#   (<obj> ^id <id>)
#-->
#   (<obj> ^moving-object true)
#   (<arm> ^moving-object <id> -)
#}
#
#sp {attend-to-scene-change*apply*attend-to-arm*remove*moving-object
#   (state <s> ^name attend-to-scene-change
#              ^operator.name attend-to-arm
#              ^current-action << wait failure >>
#              ^previous-action << grab move drop point >>
#              ^topstate.scene-monitor.object <obj>)
#   (<obj> ^moving-object true)
#-->
#   (<obj> ^moving-object true -)
#}
#
## grabbed - mark the object as grabbed when it is currently held
#sp {attend-to-scene-change*apply*attend-to-arm*mark*grabbed
#   (state <s> ^name attend-to-scene-change
#              ^operator.name attend-to-arm
#              ^grabbed-id <> -1
#              ^topstate.scene-monitor.object <obj>
#              ^topstate.robot-state.arm <arm>)
#   (<obj> ^moving-object true)
#-->
#   (<arm> ^grabbed <obj>)
#}
#
#sp {attend-to-scene-change*apply*attend-to-arm*remove*grabbed
#   (state <s> ^name attend-to-scene-change
#              ^operator.name attend-to-arm
#              ^grabbed-id -1
#              ^topstate.robot-state.arm <arm>)
#   (<arm> ^grabbed <obj>)
#-->
#   (<arm> ^grabbed <obj> -)
#}
#
#sp {attend-to-scene-change*apply*attend-to-arm*remove*grabbed*not-moving
#   (state <s> ^name attend-to-scene-change
#              ^operator.name attend-to-arm
#              ^topstate.robot-state.arm <arm>)
#   (<arm> ^grabbed <obj>
#         -^moving-object <id>)
#   (<obj> -^moving-object true
#           ^id <id>)
#-->
#   (<arm> ^grabbed <obj> -)
#}

#sp {attend-to-scene-change*apply*attend-to-arm*copy*dropped*object
#   (state <s> ^name attend-to-scene-change
#              ^topstate.scene-monitor.object <obj>
#              ^operator.name attend-to-arm
#              ^grabbed-id -1
#              ^topstate.robot-state.arm.grabbed.id <id>)
#   (<obj> ^id <id>)
#-->
#   (<obj> ^mark-for-copying true)
#}
#
#sp {attend-to-scene-change*apply*attend-to-arm*grab*move*belief*object
#   (state <s> ^name attend-to-scene-change
#              ^operator <o>
#              ^io.input-link.self.pose <pose>
#              ^grabbed-id <> -1
#              ^topstate <top>)
#   (<pose> ^x <x> ^y <y> ^z <z>)
#   (<top> ^svs.command <cmd>
#          ^robot-state.arm <arm>
#          ^object <obj>)
#   (<obj> ^moving-object true
#          ^belief-obj.id <bel-id>)
#   (<arm> -^grabbed)
#-->
#   (<cmd> ^set_transform <xform>)
#   (<xform> ^id <bel-id>
#            ^position <pos>)
#   (<pos> ^x <x> ^y <y> ^z <z>)
#}
