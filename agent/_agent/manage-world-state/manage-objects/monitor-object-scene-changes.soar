#########################################################
# Change: new-object
#   Occurs when a new object comes on the svs link
#########################################################

sp {monitor-scene-changes*elaborate*scene-changes*new-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes <sc>
              ^scene-monitor.new-object <obj>)
   (<obj> ^perception-obj <perc-obj>
         -^status)
-->
   (<sc> ^change <change>)
   (<change> ^type new-object
             ^object <obj>)
}

sp {topstate*elaborate*scene-changes*change-info*new-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes.change-info <info>)
-->
   (<info> ^change <new-obj>)
   (<new-obj> ^name new-object
              ^op-name attend-to-new-object)
}

###########################################################################
#
# Change: stability-timer-satisfied
#   When the stability timer expires, then we need to check the new object out
#   If the object is stable, we know it's actually there (as opposed to noise)
#
##########################################################################

sp {topstate*elaborate*scene-changes*evaluate-new-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes <sc>
              ^scene-monitor.new-object <obj>)
   (<obj> ^stability-timer-satisfied true)
-->
   (<sc> ^change <change>)
   (<change> ^type stability-timer-satisfied
             ^object <obj>)
}

sp {topstate*elaborate*scene-changes*change-info*stability-timer-satisfied
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes.change-info <info>)
-->
   (<info> ^change <stability-timer-satisfied>)
   (<stability-timer-satisfied> ^name stability-timer-satisfied
                                ^op-name evaluate-stability)
}

############################################################################
##
## Change: new-stable-object
##   Once we're fairly certain an object exists, we still need to fit it into
##     out understainding of the world (identify it)
##
###########################################################################

sp {monitor-scene-changes*elaborate*scene-changes*new-stable-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes <sc>
              ^scene-monitor.new-object <obj>)
   (<obj> ^status unidentified)
-->
   (<sc> ^change <change>)
   (<change> ^type new-stable-object
             ^object <obj>)
}

sp {topstate*elaborate*scene-changes*change-info*new-stable-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes.change-info <info>)
-->
   (<info> ^change <new-stable-obj>)
   (<new-stable-obj> ^name new-stable-object
                     ^op-name evaluate-new-object)
}


###########################################################################
#
# Change: moved-object
#   If an object's position significantly changes, investigate
#
##########################################################################
sp {monitor-scene-changes*elaborate*scene-changes*moved-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes <sc>
              ^scene-monitor.object <obj>)
   (<obj> ^differences <diffs>)
   (<diffs> ^has-moved true
            ^is-occluded false)
-->
   (<sc> ^change <change>)
   (<change> ^type moved-object
             ^object <obj>)
}

sp {topstate*elaborate*scene-changes*change-info*moved-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes.change-info <info>)
-->
   (<info> ^change <moved-object>)
   (<moved-object> ^name moved-object
                   ^op-name check-for-occlusion)
}

###########################################################################
#
# Change: shrunken-object
#   If an object's volume drastrically lowers, investigate
#
##########################################################################
sp {monitor-scene-changes*elaborate*scene-changes*shurnken-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes <sc>
              ^scene-monitor.object <obj>)
   (<obj> ^differences <diffs>)
   (<diffs> ^has-shrunk true
            ^is-occluded false)
-->
   (<sc> ^change <change>)
   (<change> ^type shrunken-object
             ^object <obj>)
}

sp {topstate*elaborate*scene-changes*change-info*shrunken-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes.change-info <info>)
-->
   (<info> ^change <shrunk-obj>)
   (<shrunk-obj> ^name shrunken-object
                    ^op-name evaluate-shrunken-object)
}

###########################################################################
#
# Change: grown-object
#   If an object's volume drastrically increases, investigate
#
##########################################################################
sp {monitor-scene-changes*elaborate*scene-changes*grown-object
   (state <s> ^topstate <s>
              ^io.input-link.self.action wait
              ^scene-monitor.scene-changes <sc>
              ^scene-monitor.object <obj>)
   (<obj> ^differences <diffs>)
   (<diffs> ^has-grown true
           -^growth-wait true)
-->
   (<sc> ^change <change>)
   (<change> ^type grown-object
             ^object <obj>)
}

sp {topstate*elaborate*scene-changes*change-info*grown-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes.change-info <info>)
-->
   (<info> ^change <grown-obj>)
   (<grown-obj> ^name grown-object
                   ^op-name evaluate-grown-object)
}


    
#############################################################################
# Change: recheck-occlusion
#   Periodically check occluded objects to see if they are still occluded
#############################################################################

sp {monitor-scene-changes*elaborate*scene-changes*recheck-occlusion
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes <sc>
              ^scene-monitor.object <obj>)
   (<obj> ^differences <diffs>)
   (<diffs> ^occlusion-time-expired true)
-->
   (<sc> ^change <change>)
   (<change> ^type recheck-occlusion
             ^object <obj>)
}

sp {topstate*elaborate*scene-changes*change-info*recheck-occlusion
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes.change-info <info>)
-->
   (<info> ^change <recheck-occlusion>)
   (<recheck-occlusion> ^name recheck-occlusion
                        ^op-name check-for-occlusion)
}

#########################################################
# Change: stale-object
#   Occurs when an object on the svs link becomes stale
#########################################################

sp {monitor-scene-changes*elaborate*scene-changes*stale-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes <sc>
              ^scene-monitor.object <obj>)
   (<obj> ^differences <diffs>)
   (<diffs> ^is-stale true
            ^is-occluded false)
-->
   (<sc> ^change <change>)
   (<change> ^type stale-object
             ^object <obj>)
}

sp {topstate*elaborate*scene-changes*change-info*stale-object
   (state <s> ^topstate <s>
              ^scene-monitor.scene-changes.change-info <info>)
-->
   (<info> ^change <stale-obj>)
   (<stale-obj> ^name stale-object 
                ^op-name attend-to-stale-object)
}
