####################################################################
#
# Extracting relations on the top-state
# Given an object and a relation predicate handle
#   This code will take care of creating the svs filters needed
#   to extract the relation
# It will return all objects that are in the given relation
#   with the given object
# (E.G. given obj7 and relation 'on', returns all objects on obj7)
# 
# To use, simply create the following structure on top-state
# (state <s> ^perception-monitor.predicate-monitor <mon>)
#   (<mon> ^predicate-info <pred-info>)
#     (<pred-info> ^predicate-handle <pred-handle>
#                  ^object-test <test>)
#       (<test> ^object <obj>)
# 
# Result: creates a prediate on the top-state.world.predicates and copies instances
# (<world> ^predicates.predicate <pred>)
#   (<pred> ^handle <pred-handle>
#           ^instance <i>)
#     (<i> ^1 <obj1> ^2 <obj2>) # Such that <obj1> is REL to <obj2> (i.e. <obj1> is on <obj2>)
# 
####################################################################

sp {top-state*perception-monitor*predicate-monitor*object-test*elaborate*axis*filters
   (state <s> ^superstate nil
              ^perception-monitor.predicate-monitor.predicate-info <pred-info>)
   (<pred-info> ^smem-info.relation <r>
                ^object-test <test>)
   (<r> ^axis <axis>)
   (<test> ^object.svs-obj.id <id>)
-->
   (<test> ^<axis> <axis-filter>)
   (<axis-filter> ^type axis_relation_select
                  ^axis <axis>
                  ^a <a>)
   (<a> ^type node
        ^id <id>
        ^base a)
}

sp {top-state*perception-monitor*predicate-monitor*object-test*copy*relation*types
   (state <s> ^perception-monitor.predicate-monitor.predicate-info <pred-info>)
   (<pred-info> ^smem-info.relation <r>
                ^object-test <test>)
   (<test> ^<axis> <axis-filter>)
   (<r> ^axis <axis>
        ^type <type>)
-->
   (<axis-filter> ^<type> true )
}

sp {top-state*perception-monitor*predicate-monitor*object-test*copy*top*bottom
   (state <s> ^perception-monitor.predicate-monitor.predicate-info <pred-info>)
   (<pred-info> ^smem-info.relation <r>
                ^object-test <test>)
   (<test> ^<axis> <axis-filter>)
   (<r> ^axis <axis>
        ^bottom <bot> ^top <top>)
-->
   (<axis-filter> ^bottom <bot> ^top <top>)
}

# Link together the individual axis filters

# link outputs of y filter to inputs of x
sp {top-state*perception-monitor*predicate-monitor*object-test*connect*xy
   (state <s> ^perception-monitor.predicate-monitor.predicate-info <pred-info>)
   (<pred-info> ^object-test <test>)
   (<test> ^x <x> ^y <y>)
-->
   (<x> ^b <y>)
}

# link outputs of z filter to inputs of y
sp {top-state*perception-monitor*predicate-monitor*object-test*connect*yz
   (state <s> ^perception-monitor.predicate-monitor.predicate-info <pred-info>)
   (<pred-info> ^object-test <test>)
   (<test> ^y <y> ^z <z>)
-->
   (<y> ^b <z>)
}

# Feed in belief objects to inputs of z
sp {top-state*perception-monitor*predicate-monitor*object-test*connect*z*belief-nodes
   (state <s> ^perception-monitor.predicate-monitor.predicate-info <pred-info>)
   (<pred-info> ^object-test <test>)
   (<test> ^z <z>)
-->
   (<z> ^b <belief-nodes>)
   (<belief-nodes> ^type tag_select
                   ^a.type all_nodes
                   ^tag_name object-source
                   ^tag_value belief)
}

# Copy the extract command onto the svs.command link
sp {top-state*perception-monitor*predicate-monitor*object-test*put*on*svs*command
   (state <s> ^perception-monitor.predicate-monitor.predicate-info <pred-info>
              ^svs.command <cmd>)
   (<pred-info> ^object-test <test>)
   (<test> ^x <filter>)
-->
   (<cmd> ^extract <filter>)
   (<filter> ^mark test)
}

#TEMP HACK special handling for primitive svs filters linear and larger than
#larger-than and linear cannot be learned anyways...


sp {top-state*perception-monitor*predicate-monitor*larger-than
   (state <s> ^perception-monitor.predicate-monitor.predicate-info <pred-info>
              ^world.objects.object.svs-obj.id <id1>
              ^svs.command <cmd>)
   (<pred-info> ^predicate-handle larger-than1)
-->
   (<cmd> ^extract <filter>)
   (<filter> ^mark test)
   (<filter> ^a <belief-nodes> ^b <belief-nodes2> ^type larger_select)
   (<belief-nodes> ^type node ^id <id1>)
   (<belief-nodes2> ^type all_nodes)
   
#   (<belief-nodes> ^type tag_select
#                   ^a.type all_nodes
#                   ^tag_name object-source
#                   ^tag_value belief)
   
#   (<belief-nodes2> ^type tag_select
#                   ^a.type all_nodes
#                   ^tag_name object-source
#                   ^tag_value belief)
}
sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*larger-than
    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w> ^svs.command.extract <e>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle larger-than1)
    (<w> ^predicates.predicate <pred> ^objects <o1>)
    
    (<pred> ^handle larger-than1)
    (<e> ^result <r1> ^type larger_select)
    (<r1> ^record <r2>)
    (<r2> ^params <p4>)
    (<p4> ^a <id1> ^b <id2>)
    (<o1> ^object <obj2> ^object <obj1>)
    (<obj1> ^svs-obj.id <id1>)
    (<obj2> ^svs-obj.id <id2>)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <obj1> + ^2 <obj2> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded1
    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<w> ^predicates.predicate <pred> ^objects <o1>)
    
    (<pred> ^handle linear)
    (<o1> ^object <obj3> ^object <obj2> ^object <obj1>)
    (<obj1> ^handle 1)
    (<obj2> ^handle 2)
    (<obj3> ^handle 3)
    -->
    (<pred> ^instance <args>)
    (<args> ^1 <set>)
    (<set> ^object <obj1> <obj2> <obj3>)
}
sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded2
    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<w> ^predicates.predicate <pred> ^objects <o1>)
    
    (<pred> ^handle linear)
    (<o1> ^object <obj3> ^object <obj2> ^object <obj1>)
    (<obj1> ^handle 4)
    (<obj2> ^handle 5)
    (<obj3> ^handle 6)
    -->
    (<pred> ^instance <args>)
    (<args> ^1 <set>)
    (<set> ^object <obj1> <obj2> <obj3>)
}
sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded3
    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<w> ^predicates.predicate <pred> ^objects <o1>)
    
    (<pred> ^handle linear)
    (<o1> ^object <obj3> ^object <obj2> ^object <obj1>)
    (<obj1> ^handle 7)
    (<obj2> ^handle 8)
    (<obj3> ^handle 9)
    -->
    (<pred> ^instance <args>)
    (<args> ^1 <set>)
    (<set> ^object <obj1> <obj2> <obj3>)
}
sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded4
    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<w> ^predicates.predicate <pred> ^objects <o1>)
    
    (<pred> ^handle linear)
    (<o1> ^object <obj3> ^object <obj2> ^object <obj1>)
    (<obj1> ^handle 1)
    (<obj2> ^handle 4)
    (<obj3> ^handle 7)
    -->
    (<pred> ^instance <args>)
    (<args> ^1 <set>)
    (<set> ^object <obj1> <obj2> <obj3>)
}
sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded5
    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<w> ^predicates.predicate <pred> ^objects <o1>)
    
    (<pred> ^handle linear)
    (<o1> ^object <obj3> ^object <obj2> ^object <obj1>)
    (<obj1> ^handle 2)
    (<obj2> ^handle 5)
    (<obj3> ^handle 8)
    -->
    (<pred> ^instance <args>)
    (<args> ^1 <set>)
    (<set> ^object <obj1> <obj2> <obj3>)
}
sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded6
    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<w> ^predicates.predicate <pred> ^objects <o1>)
    
    (<pred> ^handle linear)
    (<o1> ^object <obj3> ^object <obj2> ^object <obj1>)
    (<obj1> ^handle 3)
    (<obj2> ^handle 6)
    (<obj3> ^handle 9)
    -->
    (<pred> ^instance <args>)
    (<args> ^1 <set>)
    (<set> ^object <obj1> <obj2> <obj3>)
}
sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded7
    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<w> ^predicates.predicate <pred> ^objects <o1>)
    
    (<pred> ^handle linear)
    (<o1> ^object <obj3> ^object <obj2> ^object <obj1>)
    (<obj1> ^handle 1)
    (<obj2> ^handle 5)
    (<obj3> ^handle 9)
    -->
    (<pred> ^instance <args>)
    (<args> ^1 <set>)
    (<set> ^object <obj1> <obj2> <obj3>)
}
sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded8
    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<w> ^predicates.predicate <pred> ^objects <o1>)
    
    (<pred> ^handle linear)
    (<o1> ^object <obj3> ^object <obj2> ^object <obj1>)
    (<obj1> ^handle 7)
    (<obj2> ^handle 5)
    (<obj3> ^handle 3)
    -->
    (<pred> ^instance <args>)
    (<args> ^1 <set>)
    (<set> ^object <obj1> <obj2> <obj3>)
}

#sp {top-state*perception-monitor*predicate-monitor*linear-with1
#   (state <s> ^perception-monitor.predicate-monitor.predicate-info <pred-info>
#              ^world.objects.object.svs-obj.id <id1>
#              ^svs.command <cmd>)
#   (<pred-info> ^predicate-handle linear-with1)
#-->
#   (<cmd> ^extract <filter>)
#   (<filter> ^mark test)
#   (<filter> ^a <belief-nodes> ^b <belief-nodes2> ^c <belief-nodes3> ^type linear_select)
#   (<belief-nodes> ^type node ^id <id1>)
#   (<belief-nodes2> ^type all_nodes)
#   (<belief-nodes3> ^type all_nodes)
#}
#
#sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear-with1
#    (state <s> ^superstate nil ^perception-monitor <p1> ^world <w> ^svs.command.extract <e>)
#    (<p1> ^predicate-monitor <p2>)
#    (<p2> ^predicate-info <pred-info>)
#    (<pred-info> ^predicate-handle linear-with1)
#    (<w> ^predicates.predicate <pred> ^objects <o1>)
#    
#    (<pred> ^handle linear-with1)
#    (<e> ^result <r1> ^type linear_select)
#    (<r1> ^record <r2>)
#    (<r2> ^params <p4>)
#    (<p4> ^<< a b c >> <id1> <> <id2>
#          ^<< a b c >> <id2> <> <id3> 
#          ^<< a b c >> <id3> <> <id1>)
#    (<o1> ^object <obj3> ^object <obj2> ^object <obj1>)
#    (<obj1> ^svs-obj.id <id1>)
#    (<obj2> ^svs-obj.id <id2>)
#    (<obj3> ^svs-obj.id <id3>)
#    -->
#    (<pred> ^instance <args> +)
#    (<args> ^1 <set>)
#    (<set> ^object <obj1> <obj2> <obj3>)
#}