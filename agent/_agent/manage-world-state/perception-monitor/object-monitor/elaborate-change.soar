#########################################################
#
# Change: new-object
# Params: perception-obj - the root identifier of the svs object
#   Occurs when a new object comes on the svs link
#
#########################################################

sp {top-state*perception-monitor*elaborate*change-info*new-object
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <new-obj>)
   (<new-obj> ^type new-object
              ^category object
              ^op-name attend-to-new-object)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*new-object
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>
              ^svs.spatial-scene.child <perc-obj>)
   (<perc-mon> ^changes <changes>
               ^object-monitor <obj-mon>)
   (<perc-obj> ^id { <perc-id> <> robot <> world })
   (<obj-mon> -^object-info.perception-id <perc-id>
              -^object-info.belief-id <perc-id>)
-->
   (<changes> ^change <change>)
   (<change> ^type new-object
             ^perception-obj <perc-obj>)
}

###########################################################################
#
# Change: new-stable-object
# Params: object-info
#   Once we're fairly certain an object exists, we still need to fit it into
#     out understainding of the world (identify it)
#
##########################################################################
#
#sp {top-state*perception-monitor*elaborate*change-info*attend-to-new-stable-object
#   (state <s> ^superstate nil
#              ^perception-monitor.change-info <info>)
#-->
#   (<info> ^change <new-stable-obj>)
#   (<new-stable-obj> ^type new-stable-object
#                     ^category object
#                     ^op-name attend-to-new-stable-object)
#}
#
#sp {top-state*perception-monitor*object-monitor*elaborate*change*new-stable-object
#   (state <s> ^superstate nil
#              ^perception-monitor <perc-mon>)
#   (<perc-mon> ^changes <changes>
#               ^object-monitor.object-info <obj-info>)
#   (<obj-info> ^status stable
#              -^belief-obj)
#-->
#   (<changes> ^change <change>)
#   (<change> ^type new-stable-object
#             ^object-info <obj-info>)
#}

###########################################################################
#
# Change: newly-visible-object
#   If an object appears again after having not been visible
#
##########################################################################

sp {top-state*perception-monitor*elaborate*change-info*newly-visible-object
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <newly-vis-object>)
   (<newly-vis-object> ^type newly-visible-object
                       ^category object
                       ^op-name attend-to-newly-visible-object)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*newly-visible-object
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^status.visible true
               ^wm-obj.predicates.visible false)
-->
   (<changes> ^change <change>)
   (<change> ^type newly-visible-object
             ^object-info <obj-info>)
}

###########################################################################
#
# Change: newly-not-visible-object
#   If an object is not visible after having been visible
#
##########################################################################

sp {top-state*perception-monitor*elaborate*change-info*newly-not-visible-object
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <newly-not-vis-object>)
   (<newly-not-vis-object> ^type newly-not-visible-object
                           ^category object
                           ^op-name attend-to-newly-not-visible-object)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*newly-not-visible-object
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>
             -^world.robot.current-location <obj>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^status.visible false
               ^wm-obj <obj>
               ^wm-obj.predicates.visible true)
-->
   (<changes> ^change <change>)
   (<change> ^type newly-not-visible-object
             ^object-info <obj-info>)
}

###########################################################################
#
# Change: moved-object
#   If an object's position significantly changes, investigate
#
##########################################################################

sp {top-state*perception-monitor*elaborate*change-info*moved-object
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <moved-object>)
   (<moved-object> ^type moved-object
                   ^category object
                   ^op-name attend-to-moved-object)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*moved-object
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^differences <diffs>)
   (<diffs> ^has-moved true)
-->
   (<changes> ^change <change>)
   (<change> ^type moved-object
             ^object-info <obj-info>)
}

#########################################################
#
# Change: update-pose
#   Occurs when a ^update-pose true flag appears on object-info
#
#########################################################

sp {top-state*perception-monitor*elaborate*change-info*update-pose
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <update-obj>)
   (<update-obj> ^type update-pose
                 ^category object
                 ^op-name update-object-pose)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*update-object
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^update-pose true
               ^perception-obj <any>)
-->
   (<changes> ^change <change>)
   (<change> ^type update-pose
             ^object-info <obj-info>)
}

#########################################################
#
# Change: missing-object
#   Occurs when a belief object is no longer visible 
#     and should be in view
#
#########################################################

sp {top-state*perception-monitor*elaborate*change-info*attend-to-missing-object
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <missing-obj>)
   (<missing-obj> ^type missing-object 
                ^category object
                ^op-name attend-to-missing-object)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*missing-object
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^status <status>)
   (<status> ^visible false
            ^in-view true)
-->
   (<changes> ^change <change>)
   (<change> ^type missing-object
             ^object-info <obj-info>)
}

#########################################################
#
# Change: delete-object
#   Occurs when a ^delete-object flag appears on object-info
#
#########################################################

sp {top-state*perception-monitor*elaborate*change-info*delete-object
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <del-obj>)
   (<del-obj> ^type delete-object
              ^category object
              ^op-name delete-object)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*delete-object
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^delete-object true)
-->
   (<changes> ^change <change>)
   (<change> ^type delete-object
             ^object-info <obj-info>)
}

#sp {top-state*perception-monitor*object-monitor*elaborate*change*delete-object*no*belief
#   (state <s> ^superstate nil
#              ^perception-monitor <perc-mon>)
#   (<perc-mon> ^changes <changes>
#               ^object-monitor.object-info <obj-info>)
#   (<obj-info> ^status.visible false
#              -^belief-obj)
#-->
#   (<changes> ^change <change>)
#   (<change> ^type delete-object
#             ^object-info <obj-info>)
#}

############################################################################################
#
# Change: new-object-predicate
#    When a unary predicate for a given category is on the perception object
#      and not on the belief object
#
#############################################################################################

sp {top-state*perception-monitor*elaborate*change-info*new-object-predicate
   (state <s> ^superstate nil
              ^perception-monitor.change-info <info>)
-->
   (<info> ^change <new-obj-pred>)
   (<new-obj-pred> ^type new-object-predicate
                   ^category object
                   ^op-name attend-to-new-object-predicate)
}

sp {top-state*perception-monitor*object-monitor*elaborate*changes*new-object-predicate*visual
   (state <s> ^superstate nil
              ^perception-monitor <perc-mon>)
   (<perc-mon> ^changes <changes>
               ^object-monitor.object-info <obj-info>)
   (<obj-info> ^input-link-obj.classifications <il-cfs>
               ^wm-obj.predicates <wm-preds>)
   (<il-cfs> ^<prop> <pred>)
   (<wm-preds> -^<prop> <pred>)
-->
   (<changes> ^change <change>)
   (<change> ^type new-object-predicate
             ^object-info <obj-info>
             ^property-handle <prop>
             ^predicate-handle <pred>)
}