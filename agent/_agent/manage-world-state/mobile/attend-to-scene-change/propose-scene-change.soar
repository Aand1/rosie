# Propose the specific operator to handle the scene change
#   Based on the change type
sp {attend-to-scene-change*propose*attend-to-change
   (state <s> ^name attend-to-scene-change
              ^change-info <info>)
   (<info> ^type <type>
           ^op-name <op-name>)
-->
   (<s> ^operator <o> +)
   (<o> ^name <op-name>
        ^change-type <type>)
}

# Copy information from the scene-change onto the operator
sp {attend-to-scene-change*elaborate*attend-to-change*info
   (state <s> ^name attend-to-scene-change
              ^operator <o> +
              ^scene-change.{<att> <> type} <val>)
   (<o> ^change-type <type>)
-->
   (<o> ^<att> <val>)
}

# If debug-perception is on, print info about the change (with object-info)
sp {anystate*apply*attend-to-scene-change*debug-perception*report-change*belief
   (state <s> ^operator <o>
              ^top-state.agent-params.debug-perception true)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type <type>
        ^object-info.object-handle <handle>)
-->
   (write |Change | <type> | on object | <handle> (crlf))
}

# If debug-perception is on, print info about the change (no object-info)
sp {anystate*apply*attend-to-scene-change*debug-perception*report-change*arm*actions
   (state <s> ^operator <o>
              ^top-state.agent-params.debug-mode on
              ^top-state.agent-params.debug-perception true)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type <type>
       -^object-info)
-->
   (write |Change | <type> (crlf))
}

