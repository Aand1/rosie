sp {attend-to-new-object*propose*match-smem-object*from*epmem
   (state <s> ^name attend-to-new-object
              ^epmem-obj.handle <obj-handle>
             -^smem-obj
             -^matches-world-object <> none)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-smem-object
        ^cue <cue>)
   (<cue> ^handle <obj-handle>)
}

sp {attend-to-new-object*propose*match-smem-object*from*perception
   (state <s> ^name attend-to-new-object
              ^input-link-obj <il-obj>
             -^smem-obj)
-->
   (<s> ^operator <o> +)
   (<o> ^name match-smem-object
        ^input-link-obj <il-obj>
        ^cue <cue>)
   (<cue> ^object-instance true
          ^item-type object)
}

sp {attend-to-new-object*elaborate*match-smem-object*cue*from*perception
   (state <s> ^name attend-to-new-object
              ^operator <o> +)
   (<o> ^name match-smem-object
        ^input-link-obj.classifications.<prop> <pred>
        ^cue <cue>)
-->
   (<cue> ^<prop> <pred>)
}
              
sp {attend-to-new-object*apply*match-smem-object*create*query
   (state <s> ^name attend-to-new-object
              ^operator <o>
              ^smem.command <cmd>)
   (<o> ^name match-smem-object
        ^cue <cue>)
-->
   (<cmd> ^query <cue>)
}

sp {attend-to-new-object*apply*match-smem-object*success*copy*object
   (state <s> ^name attend-to-new-object
              ^operator <o>
              ^smem.result <res>
              ^smem.command <cmd>)
   (<o> ^name match-smem-object
        ^cue <cue>)
   (<res> ^success <cue>
          ^retrieved <obj-lti>)
-->
   (<s> ^smem-obj <obj-lti>)
   (<cmd> ^query <cue> -)
}
        
sp {attend-to-new-object*apply*match-smem-object*failure*copy*object
   (state <s> ^name attend-to-new-object
              ^operator <o>
              ^smem.result.failure <cue>
              ^smem.command <cmd>)
   (<o> ^name match-smem-object
        ^cue <cue>)
-->
   (<s> ^smem-obj none)
   (<cmd> ^query <cue> -)
}