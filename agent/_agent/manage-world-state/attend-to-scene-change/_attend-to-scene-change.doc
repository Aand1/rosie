### State Representation ###

^scene-change <change> - The change being attended to
	Elaborated from superstate.operator.change
	
^change-info <info> - Information about the type of change
	Elaborated from perception-monitor.change-info
	

### Different attend operators ###

Proposed in propose-scene-change.soar
  The name of the operator is taken from change-info.op-name

# attend-to-new-object
Given the object and the type of object (epmem-obj, smem-obj, imagined-obj, perception-obj)
	This tries to figure out how to incorporate into working memory
	By trying to match against existing objects in wm and smem, 
	And either updates them, or creates a new world object repsentation and object-info

# attend-to-moved-object 
Currently just marks the object with (^update-pose true)

# update-pose
Copies the transform from the perception-obj to the belief-obj
	
# attend-to-newly-visible-object
Changes the visible predicate on the wm-obj from false to true
Changes the object-status predicate on the wm-obj from unconfirmed to confirmed
Adds an in(obj, cur-loc) predicate if necessary and removes any other in(obj, loc) predicates

# attend-to-newly-not-visible-object
Changes the visible predicate on the wm-obj from true to false

# attend-to-new-object-predicate
Adds the new predicate info to the wm-obj

# attend-to-missing-object
Currently just marks the object with (^delete-object true)
 
# delete-object
The delete-object substate is reponsible for deleting all traces of the object from short term memory
	It first updates the semantic memory representation (if applicable)
	And removes it from the top-state world, object-monitor, and svs
	
# attend-to-changed-moving-state
Updates the world.robot.moving-state from the input-link.self
