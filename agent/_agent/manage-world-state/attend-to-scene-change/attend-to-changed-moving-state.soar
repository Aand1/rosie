# Add new world.robot.moving-state
sp {anystate*apply*attend-to-scene-change*changed-moving-state*add*new
   (state <s> ^operator <o>
              ^top-state.world.robot <robot>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type changed-moving-state
        ^self-info.moving-state <cur-state>)
-->
   (<robot> ^moving-state <cur-state>)
}
   
# Remove old world.robot.moving-state
sp {anystate*apply*attend-to-scene-change*changed-moving-state*remove*old
   (state <s> ^operator <o>
              ^top-state.world.robot <robot>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type changed-moving-state
        ^self-info.moving-state <cur-state>)
   (<robot> ^moving-state { <old-state> <> <cur-state> })
-->
   (<robot> ^moving-state <old-state> -)
}

# If debug-perception is on, print the info
sp {anystate*apply*attend-to-scene-change*monitor*changed-moving-state
   (state <s> ^operator <o>
              ^top-state.agent-params.debug-perception on)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type changed-moving-state
        ^self-info.moving-state <state>)
-->
   (write |Robot moving-state: | <state> (crlf))
}