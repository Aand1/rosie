# Update world.robot.arm.action

sp {anystate*apply*attend-to-changed-arm-status*mark*grabbed
   (state <s> ^operator <o>
              ^top-state.io.input-link.self.held-object { <handle> <> none }
              ^top-state.perception-monitor.object-monitor.object-info <obj-info>)
   (<o> ^name attend-to-scene-change
        ^change.type changed-arm-status)
   (<obj-info> ^perception-id <handle>
               ^object-handle <h>
               ^wm-obj.predicates <preds>)
-->
   (<preds> ^arm-status grabbed
            ^arm-status not-grabbed -)
   (write |Marking object | <h> | as grabbed | (crlf))
}

sp {anystate*apply*attend-to-changed-arm-status*mark*not-grabbed*first
   (state <s> ^operator <o>
              -^top-state.io.input-link.self.held-object <handle>
              ^top-state.perception-monitor.object-monitor.object-info <obj-info>)
   (<o> ^name attend-to-scene-change
        ^change.type changed-arm-status)
   (<obj-info> ^perception-id <handle>
               ^object-handle <h>
               ^wm-obj.predicates <preds>)
   (<preds> -^arm-status)
-->
   (<preds> ^arm-status not-grabbed)
   (write |Marking object | <h> | as not-grabbed | (crlf))
}

sp {anystate*apply*attend-to-changed-arm-status*mark*not-grabbed*changed
   (state <s> ^operator <o>
              -^top-state.io.input-link.self.held-object <handle>
              ^top-state.perception-monitor.object-monitor.object-info <obj-info>)
   (<o> ^name attend-to-scene-change
        ^change.type changed-arm-status)
   (<obj-info> ^perception-id <handle>
               ^object-handle <h>
               ^wm-obj.predicates <preds>)
   (<preds> ^arm-status grabbed)
-->
   (<preds> ^arm-status not-grabbed
            ^arm-status grabbed -)
   (write |Marking object | <h> | as not-grabbed | (crlf))
}