sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*mark*visible
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
-->
   (<wm-preds> ^visibility visible1)
}

sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*remove*not-visible
   (state <s> ^operator <o>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj.predicates <wm-preds>)
   (<wm-preds> ^visibility not-visible1)
-->
   (<wm-preds> ^visibility not-visible1 -)
}

sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*add*in*predicate
   (state <s> ^operator <o>
              ^top-state.world <world>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj <obj>)
   (<world> ^predicates.predicate <in-pred>
            ^robot.current-location <cur-loc>)
   (<in-pred> ^handle in1)
   -{(<in-pred> ^instance <i>)
     (<i> ^1 <obj> ^2 <cur-loc>)}
-->
    (<in-pred> ^instance <i>)
    (<i> ^1 <obj> ^2 <cur-loc>)
}

sp {anystate*apply*attend-to-scene-change*attend-to-newly-visible-object*remove*old*in*predicate
   (state <s> ^operator <o>
              ^top-state.world <world>)
   (<o> ^name attend-to-scene-change
        ^change <c>)
   (<c> ^type newly-visible-object
        ^object-info.wm-obj <obj>)
   (<world> ^predicates.predicate <in-pred>
            ^robot.current-location <cur-loc>)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 <> <cur-loc>)
-->
    (<in-pred> ^instance <i> -)
}