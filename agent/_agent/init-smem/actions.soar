# LTI's are listed at https://docs.google.com/spreadsheets/d/1SNkkEIQo8q_8AkT6zwGYUDUBvRp2pjSrmTm3FheLR1Y

#######################################################
### driving actions

smem --add {

# turn right|left|around
(@101100 ^handle turn1 ^procedural <proc100> ^item-type action)
(<proc100> ^op_name op_turn1 
           ^arg1 <parg1001>)
  (<parg1001> ^arg-type concept ^importance required ^arg-status abstract ^id <conc-slot1001>)

# follow-wall right|left wall
(@101104 ^handle follow-wall1 ^procedural <proc104> ^item-type action)
(<proc104> ^op_name op_follow-wall1 
           ^arg1 <parg1041>)
  (<parg1041> ^arg-type object ^importance required ^arg-status abstract ^id <conc-slot1041>)

# stop
(@101106 ^handle stop1 ^procedural <proc106> ^item-type action)
(<proc106> ^op_name op_stop1)

# orient north|south|east|west
(@101107 ^handle orient1 ^procedural <proc107> ^item-type action)
(<proc107> ^op_name op_orient1 
           ^arg1 <parg1071>)
  (<parg1071> ^arg-type concept ^importance required ^arg-status abstract ^id <conc-slot1071>)
  
# drive forward
(@101108 ^handle drive-forward1 ^procedural <proc108> ^item-type action)
(<proc108> ^op_name op_drive-forward
           ^arg1 <parg1081>)
  (<parg1081> ^arg-type concept ^importance optional ^arg-status abstract ^id <conc-slot1081>)

# scan the room
(@101131 ^handle scan1 ^procedural <proc31> ^item-type action ^learn-proposal true)
(<proc31> ^op_name op_scan1)

# face the object
(@101133 ^handle face1 ^procedural <proc33> ^item-type action)
(<proc33> ^op_name op_face1
           ^arg1 <parg331>)
  (<parg331> ^arg-type object ^importance required ^arg-status real ^id <obj-slot331>)
  
}

######################################################  
### external actions

smem --add {

# go to the kitchen
(@101103 ^handle go-to-location1 ^procedural <proc103> ^item-type action)
(<proc103> ^op_name op_go-to-location1 
           ^arg2 <parg1032>)
  (<parg1032> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot1032> ^2 <obj-slot1032>)

# pick up the yellow block
(@101001 ^handle pick-up1 ^procedural <proc01> ^item-type action)
(<proc01> ^op_name op_pick-up1 
          ^arg1 <parg011>)
(<parg011> ^arg-type object ^importance required ^arg-status real ^id <obj-slot011>)

### put the red block in the pantry.
(@101000 ^handle put-down1 ^procedural <proc00> ^item-type action)
(<proc00> ^op_name op_put-down1 
           ^arg1 <parg001>)
           ^arg2 <parg002>)
   (<parg001> ^arg-type object ^importance required ^arg-status real ^id <obj-slot001>)
   (<parg002> ^arg-type predicate ^importance optional ^arg-status desired ^id <pred-slot002> ^2 <obj-slot002>)

# give the package to Bob
(@101126 ^handle give1 ^procedural <proc26> ^item-type action)
(<proc26> ^op_name op_give1
       ^arg1 <parg261>)
       ^arg2 <parg262>)
(<parg261> ^arg-type object ^importance required ^arg-status real ^id <obj-slot261>)
(<parg262> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot262> ^2 <obj-slot262>) 

# Ask 'where do you want to go?'
(@101030 ^handle ask1 ^procedural <proc30> ^item-type action ^learn-proposal true ^perform once)
(<proc30> ^op_name op_ask1
          ^arg1 <parg301>
          ^match no)
  (<parg301> ^arg-type object ^importance required ^arg-status abstract ^id <obj-slot301>)

# Say 'hello' to bob
(@101116 ^handle say1 ^procedural <exp26> ^type action)
(<exp26> ^op_name op_say1
          ^arg1 <parg1161>
          ^arg2 <parg1162>)
(<parg1161> ^arg-type object ^arg-status abstract ^importance required ^id <obj-slot1161>)
(<parg1162> ^arg-type object ^arg-status real ^importance optional ^id <obj-slot1162>)

# Find the red box
  (@101020 ^handle find1 ^procedural <proc20> ^item-type action ^goal <goal20>)
(<proc20> ^op_name op_find1 
          ^arg1 <parg201>)
  (<parg201> ^arg-type object ^arg-status real ^importance required ^id <obj-slot201>)
  (<goal20> ^predicate <gp201>)
  (<gp201> ^type state ^id <pred-slot201> ^1 <obj-slot201>)
  (<pred-slot201> ^default <def201>)
  (<def201> ^predicate-handle visible1)

## Explore
 (@101110 ^handle explore1 ^procedural <proc110> ^item-type action ^learn-proposal true)
 (<proc110> ^op_name op_explore1)


 (@101150 ^handle start-leading1 ^procedural <proc150> ^item-type action)
  (<proc150> ^op_name op_start-leading1
             ^arg1 <parg1501>)
  (<parg1501> ^arg-type object ^arg-status real ^importance required ^id <obj-slot1501>)

 (@101151 ^handle stop-leading1 ^procedural <proc151> ^item-type action)
  (<proc151> ^op_name op_stop-leading1
             ^arg1 <parg1501>)
  (<parg1511> ^arg-type object ^arg-status real ^importance required ^id <obj-slot1511>)

 (@101152 ^handle follow-person1 ^procedural <proc152> ^item-type action)
  (<proc152> ^op_name op_follow-person1
             ^arg1 <parg1501>)
  (<parg1521> ^arg-type object ^arg-status real ^importance required ^id <obj-slot1521>)

}

##########################################################
# Internal Actions

smem --add {
  (@101112 ^handle remember1 ^procedural <proc112> ^item-type action ^learn-proposal true ^perform once)
  (<proc112> ^op_name op_remember1
              ^arg1 <parg1121> ^arg2 <parg1122>)
   (<parg1121> ^arg-type object ^importance required ^arg-status real ^id <obj-slot1121>)
   (<parg1122> ^arg-type object ^importance required ^arg-status abstract ^id <obj-slot1122>)
 
 (@101114 ^handle recall1 ^procedural <proc114> ^item-type action ^learn-proposal true ^perform once)
 (<proc114> ^op_name op_recall1
             ^arg1 <parg1141> ^arg2 <parg1142>)
 (<parg1141> ^arg-type object ^importance required ^arg-status real ^id <obj-slot1141>)
 (<parg1142> ^arg-type predicate ^importance required ^arg-status abstract ^id <pred-slot1142> ^2 <obj-slot1142>)
 
 (@101125 ^handle think1 ^procedural <proc125> ^item-type action ^learn-proposal true ^perform once)
 (<proc125> ^op_name op_think1
            ^arg1 <parg1251> ^arg2 <parg1252>)
 (<parg1251> ^arg-type predicate ^importance required ^arg-status real ^id <pred-slot1251> ^2 <obj-slot1251>)
 (<parg1252> ^arg-type predicate ^importance required ^arg-status abstract ^id <pred-slot1252> ^2 <obj-slot1252>)

 (@101111 ^handle sense1 ^procedural <exp21> ^item-type action)
 (<exp21> ^op_name op_sense1)
}

###########################################################
# TASKS

smem --add {

# move
 (@101008 ^handle move1 ^procedural <proc08> ^item-type action ^goal <goal08>)
 (<proc08> ^op_name op_move1
		   ^arg1 <parg081> ^arg2 <parg082>)
   (<parg081> ^arg-type object ^importance required ^arg-status real ^id <obj-slot081>)
   (<parg082> ^arg-type predicate ^importance required ^arg-status desired ^id <pred-slot082> ^2 <obj-slot082>)
 (<goal08> ^predicate <gpred08>)
   (<gpred08> ^type relation ^id <pred-slot082> ^1 <obj-slot081> ^2 <obj-slot082>)

# store
(@101009 ^handle store1)

# discard
(@101010 ^handle discard)

# deliver
(@101018 ^handle deliver1)

# fetch
(@101019 ^handle fetch1)

# take
(@101127 ^handle take1)

# guide
(@101128 ^handle guide1)

# serve
(@101129 ^handle serve1)

# bring
(@101130 ^handle bring1)

# tell
(@101031 ^handle tell1)


#### open the pantry/stove.
#     (@101003 ^handle open1 ^procedural <proc03> ^item-type action)
#     (<proc03> ^op_name op_open1 
#               ^arg1 <parg031>)
#       (<parg031> ^arg-type object ^id <obj-slot031>)
#
## close the pantry/stove.
#     (@101004 ^handle close1 ^procedural <proc04> ^item-type action)
#     (<proc04> ^op_name op_close1
#               ^arg1 <parg041>)
#       (<parg041> ^arg-type object ^id <obj-slot041>)
#
#### new wait
#     (@101007 ^handle wait1 ^procedural <ap10> ^item-type action)
#     (<ap10> ^op_name op_wait1)
#
#       
#     
## Version with explicit destination
##     (@101008 ^handle move1 ^procedural <proc08> ^item-type action ^goal <goal08>)
##     (<proc08> ^op_name op_move1
##               ^arg1 <parg081> ^arg2 <parg082>)
##       (<parg081> ^arg-type object ^id <obj-slot081>)
##       (<parg082> ^arg-type predicate ^id <pred-slot082> ^2 <obj-slot082>)
##     (<goal08> ^predicate <gpred08>)
##       (<gpred08> ^type relation ^id <pred-slot082> ^1 <obj-slot081> ^2 <obj-slot082>)
#         
## Version with implicit destination
##              (@101008 ^handle move1 ^procedural <proc08> ^item-type action ^goal <goal08>)
##     (<proc08> ^op_name initiate-move1
##               ^arg1 <parg081>)
##       (<parg081> ^arg-type object)
##     (<goal08> ^predicate <gpred08>)
##       (<gpred08> ^type relation ^id <rel082> ^1 <parg081> ^2 <obj082>)
##       (<rel082> ^default <def-rel082>)
##         (<def-rel082> ^predicate-handle on1)
##       (<obj082> ^default <def-obj082>)
##         (<def-obj082> ^name table)
#
#(@101011 ^handle stack)
#(@101012 ^handle cook1)
#(@101013 ^handle set)
#(@101014 ^handle clean)
#
#
### turn-on 
#     (@101015 ^handle turn-on1 ^procedural <proc15> ^item-type action)
#     (<proc15> ^op_name op_turn-on1 
#               ^arg1 <parg151>)
#       (<parg151> ^arg-type object ^id <obj-slot151>)
#
### turn-off
#     (@101016 ^handle turn-off1 ^procedural <proc16> ^item-type action)
#     (<proc16> ^op_name op_turn-off1 
#               ^arg1 <parg161>)
#       (<parg161> ^arg-type object ^id <obj-slot161>)
#    
#(@101018 ^handle deliver1)
##        ^procedural <proc18> ^item-type action)
##(<proc18> ^op_name initiate-deliver1 
##          ^arg1 <parg181> ^arg2 <parg182>)
##  (<parg181> ^arg-type object ^id <obj-slot181>)
##  (<parg182> ^arg-type predicate ^id <pred-slot182> ^2 <obj-slot182>)
#    
#(@101019 ^handle fetch1)
##         ^procedural <proc19> ^item-type action)
##(<proc19> ^op_name initiate-fetch1 
##          ^arg1 <parg191> ^arg2 <parg192>)
##  (<parg191> ^arg-type object ^id <obj-slot191>)
##  (<parg192> ^arg-type predicate ^id <pred-slot192> ^2 <obj-slot192>)
#      
#  
## Interaction
#
#    
#(@101032 ^handle throw1 ^procedural <proc32> ^item-type action)
#(<proc32> ^op_name op_throw1
#          ^arg1 <parg321>)
#  (<parg321> ^arg-type object ^arg-status real ^id <obj-slot321>)
#
## Ones for mobile robot
#
#
#
#(@101108 ^handle go-to-waypoint1 ^procedural <proc108> ^item-type action)
#(<proc108> ^op_name op_go-to-waypoint1 ^arg2 <parg1081>)
#  (<parg1081> ^arg-type concept ^arg-status abstract ^id <conc-slot1081>)
#
#(@101109 ^handle go-to-next-waypoint1 ^procedural <proc109> ^item-type action)
#(<proc109> ^op_name op_go-to-next-waypoint1 ^arg2 <parg1091>)
#  (<parg1091> ^arg-type concept ^arg-status abstract ^id <conc-slot1091>)
#
# 
 
 

#  
# (@101113 ^handle check ^procedural <exp23> ^item-type action)
# (<exp23> ^op_name op_check1)
#   

#  
# (@101115 ^handle heard ^procedural <exp25> ^type action)
# (<exp25> ^op_name op_heard1)
     
 
 (@101117 ^handle attend ^procedural <exp27> ^type action)
 (<exp27> ^op_name initiate-attend1)
 
 (@101118 ^handle ignore ^procedural <exp28> ^type action)
 (<exp28> ^op_name initiate-ignore1)
 
 (@101119 ^handle has ^procedural <exp29> ^type action)
 (<exp29> ^op_name initiate-has1)
 
 (@101120 ^handle play ^procedural <exp30> ^type action)
  (<exp30> ^op_name initiate-play1)
 
 (@101121 ^handle win ^procedural <exp31> ^type action)
 (<exp31> ^op_name initiate-win1)
 
 (@101122 ^handle lose ^procedural <exp32> ^type action)
 (<exp32> ^op_name initiate-lose1)
 
 (@101123 ^handle prefer ^procedural <exp33> ^type action)
 (<exp33> ^op_name initiate-prefer1) 
  
 (@101124 ^handle avoid ^procedural <exp34> ^type action)
 (<exp34> ^op_name initiate-avoid1)
 
 
 (@101143 ^handle think ^procedural <exp35> ^type action)
 (<exp35> ^op_name initiate-think1)

 (@101144 ^handle attack ^procedural <exp36> ^type action)
 (<exp36> ^op_name initiate-attack)
 

# (@101244 ^handle fill ^procedural <exp37> ^type action)
# (<exp37> ^op_name initiate-fill)
 

 (@101145 ^handle load ^procedural <exp37> ^type action)

 (<exp37> ^op_name initiate-load)
 
  (@101146 ^handle consider ^procedural <exp46> ^type action)
 (<exp46> ^op_name initiate-consider1) 
 
  (@101147 ^handle matches1) 
  (@101148 ^handle is1)
  (@101149 ^handle covers1
          ^tense past)
}
