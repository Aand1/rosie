####################################################################
#
# Extracting relations on a state
# Given an object id and a preposition, 
#   This code will take care of creating the svs filters needed
#   to extract the preposition
# It will return all objects that are in the given relation
#   with the given object
# (E.G. given obj7 and preposition 'on', returns all objects on obj7)
# 
# To use, simply create the following structure on any state
# (state <s> ^extract-prepositions <e>)
#   (<e> ^extract-info <i>)
#     (<i> ^object-id <id>  # id of an svs object to check against
#          ^prep <p>)       # The LTI for the preposition
# 
# Result: creates a ^result structure under the extract info
#         With pairs of objects satisfying the relation
# (<e> ^extract-info <i>)
#   (<i> ^result <r>)
#     (<r> ^pair <p1> <p2> ...)
#       (<p1> ^a IDA ^b IDB)   # such that ^a is REL to ^b (e.g. a is on b)
# 
####################################################################

# Here we are finding all objects obj2 such that given obj1,
# obj2 is REL to obj1
# (Example: find all objects that are 'on' obj1)
  
sp {anystate*extract-prepositions*extract-axis*initial
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^object-id <id>
        ^prep.relation <r>)
   (<r> ^axis <axis>)
-->
   (<e> ^<axis> <axis-filter>)
   (<axis-filter> ^type axis_relation_select
                  ^axis <axis>
                  ^a <a>)
   (<a> ^type node
        ^id <id>)
}

sp {anystate*extract-prepositions*extract-axis*copy*relation*types
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^object-id <id>
        ^prep.relation <r>
        ^<axis> <axis-filter>)
   (<r> ^axis <axis>
        ^type <type>)
-->
   (<axis-filter> ^<type> true)
}

sp {anystate*extract-prepositions*extract-axis*copy*top*bottom# base = a -> find objects smaller than a
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^object-id <id>
        ^prep.relation <r>
        ^<axis> <axis-filter>)
   (<r> ^axis <axis>
        ^bottom <bot> ^top <top>)
-->
   (<axis-filter> ^bottom <bot> ^top <top>)
}

sp {anystate*extract-prepositions*extract-axis*copy*base
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^object-id <id>
        ^prep.relation.axis <axis>
        ^base <base>
        ^<axis> <axis-filter>)
-->
   (<axis-filter> ^base <base>)
}

## Greater
## Range = (bottom, top)
#sp {anystate*extract-prepositions*extract-axis*greater
#   (state <s> ^extract-prepositions.extract-info <e>)
#   (<e> ^object-id <id>
#        ^prep.relation <r>)
#   (<r> ^axis <axis>
#        ^type greater -^type aligned -^type less
#        ^bottom <bot> ^top <top>)
#-->
#   (<e> ^<axis> <axis-info>)
#   (<axis-info> ^input <axis-filter>
#                ^output <axis-filter>)
#   (<axis-filter> ^type axis_distance_select
#                  ^axis <axis>
#                  ^include_min false ^include_max false
#                  ^min <bot> ^top <top>
#                  ^a <a>)
#   (<a> ^type node 
#        ^id <id>)
#}
#
## Less
## Range = (-top, -bottom)
#sp {anystate*extract-prepositions*extract-axis*less
#   (state <s> ^extract-prepositions.extract-info <e>)
#   (<e> ^object-id <id>
#        ^prep.relation <r>)
#   (<r> ^axis <axis>
#        ^type less -^type aligned -^type greater
#        ^bottom <bot> ^top <top>)
#-->
#   (<e> ^<axis> <axis-info>)
#   (<axis-info> ^input <axis-filter>
#                ^output <axis-filter>)
#   (<axis-filter> ^type axis_distance_select
#                  ^axis <axis>
#                  ^include_min false ^include_max false
#                  ^min (- <top>) ^max (- <bot>)
#                  ^a <a>)
#   (<a> ^type node 
#        ^id <id>)
#}
#
## Aligned
## Range = [0, 0]
#sp {anystate*extract-prepositions*extract-axis*aligned
#   (state <s> ^extract-prepositions.extract-info <e>)
#   (<e> ^object-id <id>
#        ^prep.relation <r>)
#   (<r> ^axis <axis>
#        ^type aligned -^type less -^type greater)
#-->
#   (<e> ^<axis> <axis-info>)
#   (<axis-info> ^input <axis-filter>
#                ^output <axis-filter>)
#   (<axis-filter> ^type axis_distance_select
#                  ^axis <axis>
#                  ^include_min true ^include_max true
#                  ^min 0.0 ^max 0.0
#                  ^a <a>)
#   (<a> ^type node 
#        ^id <id>)
#}
#
## Greater, Aligned
## Range = [0, top)
#sp {anystate*extract-prepositions*extract-axis*greater*aligned
#   (state <s> ^extract-prepositions.extract-info <e>)
#   (<e> ^object-id <id>
#        ^prep.relation <r>)
#   (<r> ^axis <axis>
#        ^type greater ^type aligned -^type less
#        ^bottom <bot> ^top <top>)
#-->
#   (<e> ^<axis> <axis-info>)
#   (<axis-info> ^input <axis-filter>
#                ^output <axis-filter>)
#   (<axis-filter> ^type axis_distance_select
#                  ^axis <axis>
#                  ^include_min true ^include_max false
#                  ^min 0.0 ^max <top>
#                  ^a <a>)
#   (<a> ^type node 
#        ^id <id>)
#}
#
## Less, Aligned
## Range = (-top, 0]
#sp {anystate*extract-prepositions*extract-axis*less*aligned
#   (state <s> ^extract-prepositions.extract-info <e>)
#   (<e> ^object-id <id>
#        ^prep.relation <r>)
#   (<r> ^axis <axis>
#        ^type less ^type aligned -^type greater
#        ^bottom <bot> ^top <top>)
#-->
#   (<e> ^<axis> <axis-info>)
#   (<axis-info> ^input <axis-filter>
#                ^output <axis-filter>)
#   (<axis-filter> ^type axis_distance_select
#                  ^axis <axis>
#                  ^include_min false ^include_max true
#                  ^min (- <top>) ^max 0.0
#                  ^a <a>)
#   (<a> ^type node 
#        ^id <id>)
#}
#
## Less, Greater
## Range = (-top, -bottom) + (bottom, top)
#sp {anystate*extract-prepositions*extract-axis*less*greater
#   (state <s> ^extract-prepositions.extract-info <e>)
#   (<e> ^object-id <id>
#        ^prep.relation <r>)
#   (<r> ^axis <axis>
#        ^type less ^type greater -^type aligned
#        ^bottom <bot> ^top <top>)
#-->
#   (<e> ^<axis> <axis-info>)
#   (<axis-info> ^input <greater-filter> <less-filter>
#                ^output <combine>)
#   (<combine> ^type combine_nodes
#              ^a <greater-filter>
#              ^a <less-filter>)
#   (<greater-filter> ^type axis_distance_select
#                  ^axis <axis>
#                     ^include_min false ^include_max false
#                     ^min <bot> ^max <top>
#                     ^a <a>)
#   (<less-filter> ^type axis_distance_select
#                  ^axis <axis>
#                     ^include_min false ^include_max false
#                     ^min (- <top>) ^max (- <bot>)
#                     ^a <a>)
#   (<a> ^type node 
#        ^id <id>)
#}
#
## Less, Aligned, Greater
## Range = (-top, top)
#sp {anystate*extract-prepositions*extract-axis*less*aligned*greater
#   (state <s> ^extract-prepositions.extract-info <e>)
#   (<e> ^object-id <id>
#        ^prep.relation <r>)
#   (<r> ^axis <axis>
#        ^type less ^type greater ^type aligned
#        ^bottom <bot> ^top <top>)
#-->
#   (<e> ^<axis> <axis-info>)
#   (<axis-info> ^input <filter>
#                ^output <filter>)
#   (<filter> ^type axis_distance_select
#                  ^axis <axis>
#             ^include_min false ^include_max false
#             ^min (- <top>) ^max <top>
#             ^a <a>)
#   (<a> ^type node 
#        ^id <id>)
#}

# SPECIAL-CASE: smaller-than

# base = a -> find objects smaller than a
sp {anystate*extract-prepositions*smaller-than*create*filter*base*a
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^object-id <id>
        ^prep.name smaller-than
        ^base a)
-->
   (<e> ^x <filter>)
   (<filter> ^type larger_select
             # we do larger_select to find all objects b such that larger(a, b) is true
             # (that is, b is smaller than a)
             ^volume_type scale
             ^a <a>
             ^b <belief-nodes>)   
   (<belief-nodes> ^type tag_select
                   ^a.type all_nodes
                   ^tag_name object-source
                   ^tag_value belief)
   (<a> ^type node 
        ^id <id>)
}

# base = b -> find objects that a is smaller than
sp {anystate*extract-prepositions*smaller-than*create*filter*base*b
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^object-id <id>
        ^prep.name smaller-than
        ^base b)
-->
   (<e> ^x <filter>)
   (<filter> ^type smaller_select
             ^volume_type scale
             ^a <a>
             ^b <belief-nodes>)   
   (<belief-nodes> ^type tag_select
                   ^a.type all_nodes
                   ^tag_name object-source
                   ^tag_value belief)
   (<a> ^type node 
        ^id <id>)
}

# Link together the individual axis filters

# link outputs of y filter to inputs of x
sp {anystate*extract-prepositions*connect*xy
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^x <x> ^y <y>)
-->
   (<x> ^b <y>)
}

# link outputs of z filter to inputs of y
sp {anystate*extract-prepositions*connect*yz
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^y <y> ^z <z>)
-->
   (<y> ^b <z>)
}

# Feed in belief objects to inputs of z
sp {anystate*extract-prepositions*connect*z*belief-nodes
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^z <z>)
-->
   (<z> ^b <belief-nodes>)
   (<belief-nodes> ^type tag_select
                   ^a.type all_nodes
                   ^tag_name object-source
                   ^tag_value belief)
}

# Copy the extract command onto the svs.command link
sp {anystate*extract-prepositions*put*on*svs*command
   (state <s> ^extract-prepositions.extract-info <e>
              ^svs.command <cmd>)
   (<e> ^x <filter>)
-->
   (<cmd> ^extract <filter>)
   (<filter> ^mark test)
}

# Create a result wme for results to go
sp {anystate*extract-prepositions*extract-info*create*result
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^x.result <r>)
-->
   (<e> ^result <res>)
}

# Copies result pairs to the extract-info.result wme
sp {anystate*extract-prepositions*extract-info*result*copy*pair*base*a
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^x.result.record.params <p>
        ^result <res>
        ^base a)
   (<p> ^a <ida> ^b <idb>)
-->
   (<res> ^pair <pair>)
   (<pair> ^a <idb> ^b <ida>)
}

sp {anystate*extract-prepositions*extract-info*result*copy*pair*base*b
   (state <s> ^extract-prepositions.extract-info <e>)
   (<e> ^x.result.record.params <p>
        ^result <res>
        ^base b)
   (<p> ^a <ida> ^b <idb>)
-->
   (<res> ^pair <pair>)
   (<pair> ^a <ida> ^b <idb>)
}

##############################################################
# 
# Extract on topstate
#
##############################################################

sp {topstate*elaborate*extract-prepositions
   (state <s> ^superstate nil)
-->
   (<s> ^extract-prepositions <e>)
}

sp {topstate*elaborate*extract-prepositions*extract-info
   (state <s> ^superstate nil
              ^extract-prepositions <ep>
              ^found-prep.predicate <p>
              ^object.belief-id <id>)
-->
   (<ep> ^extract-info <i>)
   (<i> ^object-id <id>
        ^prep <p>
        ^base a)
}

# Elaborate topstate results as pair
sp {topstate*elaborate*extract-preposition*pair*results
   (state <s> ^superstate nil
              ^extract-prepositions.extract-info <info>
              ^prepositions.prep <p>
              ^object <obja> <objb>)
   (<info> ^prep.name <name>
           ^result.pair <pair>
           ^base a)
   (<p> ^name <name>)
   (<pair> ^a <bel-a> ^b <bel-b>)
   (<obja> ^id <ida>
           ^belief-id <bel-a>)
   (<objb> ^id <idb>
           ^belief-id <bel-b>)
-->
   (<p> ^pair <p2>)
   (<p2> ^b <idb> ^a <ida>)
}
#
#sp {spatial-reasoning*extract-relations*elaborate*pairs
#   (state <s> ^superstate nil
#              ^prepositions.prep <p>
#              ^svs <svs>)
#   (<svs> ^spatial-scene <sc>
#          ^command <cmd>)
#   (<sc> ^child <sc1> ^child <sc2>)
#   (<sc1> ^id <id> ^id-int <idi>)
#   (<sc2> ^id <id2> ^id-int <id2i>)
#   (<cmd> ^extract <E11>)
#   (<E11> ^a.id <id> ^result.record.value {<id2> <> <id>} ^mark <name>)
#   (<p> ^name <name>)
#-->
#   (<p> ^pair <pa>)
#   (<pa> ^a <id2i> ^b <idi>)
#}


#sp {spatial-reasoning*extract-relations*extract-filters
#   (state <s> ^superstate nil
#              ^prepositions.prep.name <name>
#              ^found-prep <fp>
#              ^svs <svs>
#             -^topstate.stop-extracting-relations true)
#   (<svs> ^spatial-scene <sc>
#          ^command <cmd>)
#   (<sc> ^child <sc2>)
#   (<sc2> ^id <id> ^id-int <idi>)
#   (<fp> ^type <name> ^relation <r1> ^relation <r2> ^relation <r3>)
#   (<r1> ^axis x ^type <x> ^bottom <bx> ^top <tx>)
#   (<r2> ^axis y ^type <y> ^bottom <by> ^top <ty>)
#   (<r3> ^axis z ^type <z> ^bottom <bz> ^top <tz>)
#-->
#   (<cmd> ^extract <xsel>)  
#   (<xsel> ^type axis_distance_select ^axis x ^mark <name> 
#           ^a <node> ^b <ysel> ^min <bx> ^max <tx>)
#   (<ysel> ^type axis_distance_select ^axis y ^mark <name> 
#           ^a <node> ^b <zsel> ^min <by> ^max <ty>)
#   (<zsel> ^type axis_distance_select ^axis z ^mark <name> 
#           ^a <node> ^b <belief-nodes> ^min <bz> ^max <tz>)
#   (<belief-nodes> ^type tag_select
#                   ^a.type all_nodes
#                   ^tag_name object-source
#                   ^tag_value belief)
#   (<node> ^type node ^id <id>)
#}


#sp {spatial-reasoning*extract-relations*extract-filters*linear
#   (state <s> ^superstate nil
#              ^prepositions.prep2.name {<name> << linear-with >>}
#              ^svs <svs>
#             -^topstate.stop-extracting-relations true)
#   (<svs> ^spatial-scene <sc>
#          ^command <cmd>)
#   (<sc> ^child <sc2>)
#   (<sc2> ^id <id> ^id-int <idi>)
#-->
#   (<cmd> ^extract <E1>)   
#   (<E1> ^a <N7> ^b <belief-nodes1> ^c <belief-nodes2> ^type <name> ^mark <name>)
#   (<N7> ^type node ^id <id>)
#   (<belief-nodes1> ^type tag_select
#                   ^a.type all_nodes
#                   ^tag_name object-source
#                   ^tag_value belief)
#   (<belief-nodes2> ^type tag_select
#                   ^a.type all_nodes
#                   ^tag_name object-source
#                   ^tag_value belief)
#}



#sp {spatial-reasoning*extract-relations*extract-filters*smaller
#   (state <s> ^superstate nil
#              ^prepositions.prep2.name {<name> << smaller-than >>}
#              ^svs <svs>
#             -^topstate.stop-extracting-relations true)
#   (<svs> ^spatial-scene <sc>
#          ^command <cmd>)
#   (<sc> ^child <sc2>)
#   (<sc2> ^id <id> ^id-int <idi>)
#-->
#   (<cmd> ^extract <smaller>)   
#   (<smaller> ^type smaller_select ^mark <name> ^volume_type scale
#              ^a <node> ^b <belief-nodes>)
#   (<belief-nodes> ^type tag_select
#                   ^a.type all_nodes
#                   ^tag_name object-source
#                   ^tag_value belief)
#   (<node> ^type node ^id <id>)
#}
#
#sp {spatial-reasoning*extract-relations*elaborate*pairs
#   (state <s> ^superstate nil
#              ^prepositions.prep <p>
#              ^svs <svs>)
#   (<svs> ^spatial-scene <sc>
#          ^command <cmd>)
#   (<sc> ^child <sc1> ^child <sc2>)
#   (<sc1> ^id <id> ^id-int <idi>)
#   (<sc2> ^id <id2> ^id-int <id2i>)
#   (<cmd> ^extract <E11>)
#   (<E11> ^a.id <id> ^result.record.value {<id2> <> <id>} ^mark <name>)
#   (<p> ^name <name>)
#-->
#   (<p> ^pair <pa>)
#   (<pa> ^a <id2i> ^b <idi>)
#}

#sp {spatial-reasoning*extract-relations*elaborate*pairs*linear
#   (state <s> ^superstate nil
#              ^prepositions.prep2 <p>
#              ^svs <svs>)
#   (<svs> ^spatial-scene <sc>
#          ^command <cmd>)
#   (<sc> ^child <sc1> ^child <sc2> ^child <sc3>)
#   (<sc1> ^id <id> ^id-int <idi>)
#   (<sc2> ^id <id2> ^id-int <id2i>)
#   (<sc3> ^id <id3> ^id-int <id3i>)
#   (<cmd> ^extract <E11>)
#   (<E11> ^a.id {<id> <> <id3>} ^result.record <rec> ^mark <name>)
#   (<rec> ^value {<id2> <> <id>} ^params.c {<id3> <> <id2>})
#   (<p> ^name {<name> << linear-with >>})
#-->
#   (<p> ^pair <pa>)
#   (<pa> ^a <idi> ^b <id2i> ^c <id3i>)
#}
#
#sp {spatial-reasoning*extract-relations*elaborate*pairs*smaller
#   (state <s> ^superstate nil
#              ^prepositions.prep2 <p>
#              ^svs <svs>)
#   (<svs> ^spatial-scene <sc>
#          ^command <cmd>)
#   (<sc> ^child <sc1> ^child <sc2>)
#   (<sc1> ^id <id> ^id-int <idi>)
#   (<sc2> ^id <id2> ^id-int <id2i>)
#   (<cmd> ^extract <E11>)
#   (<E11> ^a.id <id> ^result.record.value {<id2> <> <id>} ^mark <name>)
#   (<p> ^name {<name> << smaller-than >>})
#-->
#   (<p> ^pair <pa>)
#   (<pa> ^a <idi> ^b <id2i>)
#}

#sp {spatial-reasoning*extract-relations*extract-filters*higher-than
#   (state <s> ^superstate nil
#              ^svs <svs>
#             -^topstate.stop-extracting-relations true)
#   (<svs> ^spatial-scene <sc>
#          ^command <cmd>)
#   (<sc> ^child <sc2>)
#   (<sc2> ^id <id> ^id-int <idi>)
#-->
#   (<cmd> ^extract <E4>)  
#   (<E4> ^type higher_than ^a <N7> ^b <belief-nodes> ^mark higher-than)   
#   (<N7> ^type node ^id <id>)
#   (<belief-nodes> ^type tag_select
#                   ^a.type all_nodes
#                   ^tag_name object-source
#                   ^tag_value belief)
#}

#sp {spatial-reasoning*elaborate*prepositions*higher-than
#   (state <s> ^superstate nil
#              ^prepositions <preps>)
#-->
#   (<preps> ^prep.name higher-than)
#}