sp {go-to-next-waypoint*propose*intermediate-turn
   (state <s> ^name go-to-next-waypoint
              ^waypoint <wp>
              ^intermediate-turn { <yaw> <> none }
              ^drive-command.status success
             -^turn-command)
-->
   (<s> ^operator <o> + >)
   (<o> ^name intermediate-turn
        ^turn-amount <yaw>)
}

sp {go-to-next-waypoint*apply*intermediate-turn*remove*drive-command
   (state <s> ^name go-to-next-waypoint
              ^operator.name intermediate-turn
              ^io.output-link <out>
              ^drive-command <cmd>)
   (<out> ^do-control-law <cmd>)
-->
   (<s> ^drive-command <cmd> -)
   (<out> ^do-control-law <cmd> -)
}

sp {go-to-next-waypoint*apply*intermediate-turn*right
   (state <s> ^name go-to-next-waypoint
              ^operator <o>
              ^top-state.io.input-link.self <self>
              ^top-state.io.output-link <out>)
   (<o> ^name intermediate-turn
        ^turn-amount { <yaw> < 0 })
-->
   (<out> ^do-control-law <law>)
   (<law> ^name turn
          ^parameters.direction -1
          ^termination-condition <cond>)
   (<cond> ^name rotation
           ^parameters.yaw (- <yaw>))
   (<s> ^turn-command <law>)
}

sp {go-to-next-waypoint*apply*intermediate-turn*left
   (state <s> ^name go-to-next-waypoint
              ^operator <o>
              ^top-state.io.input-link.self <self>
              ^top-state.io.output-link <out>)
   (<o> ^name intermediate-turn
        ^turn-amount { <yaw> > 0 })
-->
   (<out> ^do-control-law <law>)
   (<law> ^name turn
          ^parameters.direction 1
          ^termination-condition <cond>)
   (<cond> ^name rotation
           ^parameters.yaw <yaw>) 
   (<s> ^turn-command <law>)
}
