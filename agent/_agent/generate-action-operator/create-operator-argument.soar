##### Creates the proper representation of each argument on to the action-operator

# propose if the argument isn't on the action-operator yet
sp {generate-action-operator*propose*create-operator-argument
   (state <s> ^name generate-action-operator
              ^action-operator <op>
              ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>)
   (<op> -^<arg-name> <arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
}

###################
# arg-type object

sp {generate-action-operator*apply*create-operator-argument*copy*object*arg
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type object
               ^object-id <obj>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type object
          ^id <obj>)
   (<arg-info> ^created <arg>)
}

######################
## arg-type concept

sp {generate-action-operator*apply*create-operator-argument*copy*concept*arg
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type concept
               ^value.handle <concept-handle>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type concept
          ^handle <concept-handle>)
   (<arg-info> ^created <arg>)
}


#######################
### arg-type predicate

sp {generate-action-operator*apply*create-operator-argument*predicate*no*spatial-relation
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>
              ^predicate-lti <pred-info>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type predicate
               ^value.handle <pred-handle>
               ^object-id2 <obj2>)
   (<pred-info> ^handle <pred-handle>
               -^spatial-relation)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^handle <pred-handle>
          ^2 <obj2>)
   (<arg-info> ^created <arg>)
}

sp {generate-action-operator*apply*create-operator-argument*predicate*spatial-relation
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>
              ^predicate-lti <pred-info>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-name <arg-name>
               ^arg-type predicate
               ^value.handle <pred-handle>
               ^object-id2 <obj2>)
   (<pred-info> ^handle <pred-handle>
                ^spatial-relation.handle <rel-handle>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^handle <rel-handle>
          ^2 <obj2>)
   (<arg-info> ^created <arg>)
}


###########################
## arg-type until-clause

sp {generate-action-operator*apply*create-operator-argument*arg-type*until-clause*visible
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type until-clause
               ^value.until-clause <until>)
   (<until> ^action.handle sense1
            ^agent.handle rosie
            ^arg1 <obj>)
-->
   (<op> ^until-clause <new-clause>)
   (<new-clause> ^arg-type until-clause
                 ^predicate <see-pred>)
   (<see-pred> ^type state
               ^handle true
               ^property-handle visible
               ^1 <obj>)
}
          

# COUNT
#sp {generate-action-operator*apply*create-operator-argument*until-clause*count-shape
#   (state <s> ^name generate-action-operator
#              ^operator <o>
#              ^action-operator <cmd>)
#   (<o> ^name create-operator-argument
#        ^argument-info <arg-info>)
#   (<arg-info> ^arg-type until-clause
#               ^clause-type count-shape
#               ^shape <shape>
#               ^final-count <c>)
#-->
#   (<cmd> ^until-clause <new-clause>)
#   (<new-clause> ^name count
#             ^parameters <params>)
#   (<params> ^count <c>
#             ^class <shape>)
#   (<arg-info> ^created <arg>)
#}
              
#sp {generate-action-operator*apply*create-operator-argument*arg-type*until-clause*state*predicate
#   (state <s> ^name generate-action-operator
#              ^operator <o>
#              ^action-operator <cmd>)
#   (<o> ^name create-operator-argument
#        ^argument-info <arg-info>)
#   (<arg-info> ^arg-type until-clause
#               ^clause-type detect-predicate
#               ^predicate-handle <pred-handle>
#               ^object <obj>)
#-->
#   (<cmd> ^until-clause <new-clause>)
#   (<new-clause> ^arg-type until-clause
#                 ^predicate <until-pred>)
#   (<until-pred> ^type state
#           ^handle <pred-handle>
#           ^property-handle <
#           ^1 <obj>)
#   (<arg-info> ^created <arg>)
#}

     
