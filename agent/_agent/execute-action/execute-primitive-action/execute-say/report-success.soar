sp {execute-say*propose*report-success
   (state <s> ^problem-space.name execute-primitive-action
              ^action-handle say1
              ^current-action.said true)
-->
   (<s> ^operator <o> + >)
   (<o> ^name report-success)
}

sp {execute-say*apply*report-success*mark*complete
   (state <s> ^problem-space.name execute-primitive-action
              ^action-handle say1
              ^operator.name report-success
              ^current-action <a>)
-->
   (<a> ^status complete)
}

sp {execute-say*apply*report-success*mark*heard*by*person
   (state <s> ^problem-space.name execute-primitive-action
              ^action-handle say1
              ^operator.name report-success
              ^execution-operator.arg1.id <msg>
              ^world <w>)
   (<w> ^objects.object <person>
        ^predicates.predicate <in>
        ^predicates.predicate <heard>
        ^robot.current-location <cur-loc>)
   (<person> ^predicates.category person)
   (<in> ^handle in1
         ^instance <in-i>)
   (<in-i> ^1 <person> ^2 <cur-loc>)
   (<heard> ^handle heard2)
   -{(<heard> ^instance <heard-i>)
     (<heard-i> ^1 <person> ^2 <msg>)}
-->
   (<heard> ^instance <i>)
   (<i> ^1 <person> ^2 <msg>)
}

sp {execute-say*apply*report-success*mark*heard*by*person*linked-to
   (state <s> ^problem-space.name execute-primitive-action
              ^action-handle say1
              ^operator.name report-success
              ^execution-operator.arg1.id <msg>
              ^world <w>)
   (<w> ^objects.object <person>
        ^objects.object <other>
        ^predicates.predicate <in>
        ^predicates.predicate <heard>
        ^robot.current-location <cur-loc>)
   (<person> ^predicates.category person)
   (<other> ^linked-to <msg>)
   (<in> ^handle in1
         ^instance <in-i>)
   (<in-i> ^1 <person> ^2 <cur-loc>)
   (<heard> ^handle heard2)
   -{(<heard> ^instance <heard-i>)
     (<heard-i> ^1 <person> ^2 <other>)}
-->
   (<heard> ^instance <i>)
   (<i> ^1 <person> ^2 <other>)
}
