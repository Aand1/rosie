sp {topstate*elaborate*monitor-scene-changes*true
   (state <s> ^topstate <s>)
-->
   (<s> ^monitor-scene-changes true)
}

sp {monitor-scene-changes*elaborate*scene-changes
   (state <s> ^monitor-scene-changes true)
-->
   (<s> ^scene-changes <sc>)
}

#########################################################
# Change: new-object
#   Occurs when a new object comes on the svs link
#########################################################
sp {monitor-scene-changes*elaborate*scene-changes*new-object
   (state <s> ^monitor-scene-changes true
              ^scene-changes <sc>
              ^svs.spatial-scene.child <svs-obj>
             -^object.id <id>)
   (<svs-obj> ^id-int <id>
             -^stale true)
             #-^newly-created true)
-->
   (<sc> ^change <change>)
   (<change> ^type new-object
             ^svs-object <svs-obj>)
}

#########################################################
# Change: stale-object
#   Occurs when an object on the svs link becomes stale
#########################################################

sp {monitor-scene-changes*elaborate*scene-changes*stale-object
   (state <s> ^monitor-scene-changes true
              ^scene-changes <sc>
              ^object <ts-obj>)
   (<ts-obj> ^is-stale true
            -^held true)
-->
   (<sc> ^change <change>)
   (<change> ^type stale-object
             ^object <ts-obj>)
}


sp {topstate*apply*any-op*mark*stale-time
   (state <s> ^topstate <s>
              ^operator <o>
              ^topstate.svs.spatial-scene.child <svs-obj>
              ^object <obj>
              ^io.input-link.time.seconds <sec>)
   (<svs-obj> ^id-int <id>
              ^stale true)
   (<obj> ^id <id>
          -^stale-time)
-->
   (<obj> ^stale-time (+ <sec> 1))
}

sp {topstate*apply*any-op*remove*stale-time
   (state <s> ^topstate <s>
              ^operator <o>
              ^topstate.svs.spatial-scene.child <svs-obj>
              ^object <obj>)
   (<svs-obj> ^id-int <id>
             -^stale true)
   (<obj> ^id <id>
          ^stale-time <time>)
-->
   (<obj> ^stale-time <time> -)
}

sp {topstate*elaborate*object*is-stale
   (state <s> ^topstate <s>
              ^object <obj>
              ^io.input-link.time.seconds <sec>)
   (<obj> ^stale-time <= <sec>)
-->
   (<obj> ^is-stale true)
}

################################################################
# Delete stale objects we never attended to (probably just noise)
################################################################
sp {topstate*apply*any-op*delete*unattended-object
   (state <s> ^topstate <s>
              ^io.output-link <ol>
              ^svs.spatial-scene.child <svs-obj>
             -^object.id <id>)
   (<svs-obj> ^id-int <id>
              ^stale true)
-->
   (<ol> ^modify-scene <ms>)
   (<ms> ^type delete
         ^id <id>)
}


############################################################################################
# Change: changed-property
#   Happens when the svs link reports something different about a property than we last noticed
#############################################################################################
sp {monitor-scene-changes*elaborate*scene-changes*changed-property
   (state <s> ^monitor-scene-changes true
              ^scene-monitor.object <obj>
              ^scene-changes <sc>)
   (<obj> ^property <prop>)
   (<prop> ^wm-prop <wm-prop>
           ^case <> <case-type>)
   (<wm-prop> ^prev-case <case-type>)
-->
   (<sc> ^change <change>)
   (<change> ^type changed-property
             ^object <obj>
             ^property-info <prop>
             ^wm-prop <wm-prop>)
}

sp {monitor-scene-changes*elaborate*scene-changes*higher-confidence
   (state <s> ^monitor-scene-changes true
              ^scene-changes <sc>
              ^scene-monitor.object <obj>)
   (<obj> ^property <prop>)
   (<prop> ^wm-prop <wm-prop>
           ^case certain
           ^hypothesis <h>)
   (<wm-prop> ^value.confidence <conf>
              ^value.label <label>)
   (<h> ^label <label>
        ^conf {<new-conf> > <conf>})
-->
   (<sc> ^change <change>)
   (<change> ^type higher-confidence
             ^wm-prop <wm-prop>
             ^new-confidence <new-conf>)
}

sp {monitor-scene-changes*elaborate*scene-changes*different-best
   (state <s> ^monitor-scene-changes true
              ^scene-monitor.object <obj>
              ^scene-changes <sc>)
   (<obj> ^property <prop>)
   (<prop> ^wm-prop <wm-prop>
           ^hypothesis <h>
           ^svs-prop <svs-prop>
           ^case certain)
   (<wm-prop> ^prev-case certain
              ^value.label <label>)
   (<h> ^best true
        ^label <> <label>)
-->
   (<sc> ^change <change>)
   (<change> ^type different-best
             ^object <obj>
             ^hypothesis <h>
             ^wm-prop <wm-prop>)
}