sp {learn-subaction-proposal*propose*create-operator-argument
   (state <s> ^name learn-subaction-proposal
              ^argument-info <arg-info>)
   (<arg-info> -^created true)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
}

sp {learn-subaction-proposal*apply*create-operator-argument*object
   (state <s> ^name learn-subaction-proposal
              ^operator <o>
              ^subaction-operator <sub-op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type { <arg-type> << object location >> }
               ^arg-name <arg-name>
               ^id <arg-id>)
   (<arg-id> ^instance <obj>
             ^object-type <type>
             ^object-status <status>)
-->
   (<sub-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type <arg-type>
              ^object-type <type>
              ^object-status <status>
              ^id <obj>)
   (<arg-info> ^created true)
}

sp {learn-subaction-proposal*apply*create-operator-argument*concept
   (state <s> ^name learn-subaction-proposal
              ^operator <o>
              ^subaction-operator <sub-op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type concept
               ^arg-name <arg-name>
               ^id.instance <concept>)
-->
   (<sub-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^id <concept>)
   (<arg-info> ^created true)
}

sp {learn-subaction-proposal*apply*create-operator-argument*predicate
   (state <s> ^name learn-subaction-proposal
              ^operator <o>
              ^subaction-operator <sub-op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type predicate
               ^arg-name <arg-name>
               ^id.instance <pred>
               ^{2}.instance <obj2>)
-->
   (<sub-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^id <pred>
              ^2 <obj2>)
   (<arg-info> ^created true)
}

sp {learn-subaction-proposal*apply*create-operator-argument*until-clause
   (state <s> ^name learn-subaction-proposal
              ^operator <o>
              ^subaction-operator <sub-op>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type until-clause
               ^arg-name <arg-name>)
-->
   (<sub-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type until-clause)
}

sp {learn-subaction-proposal*apply*create-operator-argument*until-clause*predicate
   (state <s> ^name learn-subaction-proposal
              ^operator <o>
              ^subaction-operator.<arg-name> <sub-arg>)
   (<o> ^name create-operator-argument
        ^argument-info <arg-info>)
   (<arg-info> ^arg-type until-clause
               ^arg-name <arg-name>
               ^predicate.instance <pred>)
-->
   (<sub-arg> ^predicate <pred>)
   (<arg-info> ^created true)
}
