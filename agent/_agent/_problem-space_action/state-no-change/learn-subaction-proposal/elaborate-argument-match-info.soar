sp {learn-subaction-proposal*elaborate*argument-match-info
   (state <s> ^name learn-subaction-proposal
              ^subaction-id.<arg-name> <arg>)
   (<arg> ^arg-type << object concept location >>
          ^id <slot>)
-->
   (<s> ^argument-match-info <info>)
   (<info> ^slot <slot>)
}

sp {learn-subaction-proposal*elaborate*argument-match-info*predicate
   (state <s> ^name learn-subaction-proposal
              ^subaction-id.<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^id <pred-slot>
          ^2 <obj-slot>)
-->
   (<s> ^argument-match-info <pred-info> <obj-info>)
   (<pred-info> ^slot <pred-slot>)
   (<obj-info> ^slot <obj-slot>)
}

sp {learn-subaction-proposal*elaborate*argument-match-info*final-match*matches
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>)
   (<info> ^matches <m>)
-->
   (<info> ^final-match <m>)
}

sp {learn-subaction-proposal*elaborate*argument-match-info*final-match*matches-default*imagined
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>)
   (<info> ^{ << matches-default matches-imagined >> } <m>)
-->
   (<info> ^final-match <m>)
}

# Matches an object on the action-context
sp {learn-subaction-proposal*elaborate*argument-match-info*matches*object
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>
              ^procedural-id.<arg-name>.{ <att> << id 1 2 3 4 5 >> } <slot>
              ^action-context.<arg-name>.<att> <obj>)
   (<info> ^slot <slot>)
-->
   (<info> ^matches <obj>)
}

sp {learn-subaction-proposal*elaborate*argument-match-info*matches*predicate
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>
              ^procedural-id.<arg-name>.id <slot>
              ^action-context.<arg-name>.handle <handle>)
   (<info> ^slot <slot>)
-->
   (<info> ^matches <handle>)
}

# Match the default description with the world
sp {learn-subaction-proposal*elaborate*argument-match-info*matches-default*predicate
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>)
   (<info> ^slot.default.argument-handle <handle>)
-->
   (<info> ^matches-default <handle>)
}

sp {learn-subaction-proposal*elaborate*argument-match-info*matches-default*matches*object*1*predicate
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>
              ^world.objects.object <obj>)
   (<info> ^slot.default <def>)
   (<def> ^<prop1> <pred1>)
   -{(<def> ^{ <prop2> <> <prop1> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>)
-->
   (<info> ^matches-default <obj>)
}

sp {learn-subaction-proposal*elaborate*argument-match-info*matches-default*matches*object*2*predicate
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>
              ^world.objects.object <obj>)
   (<info> ^slot.default <def>)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>)
   -{(<def> ^{ <prop3> <> <prop1> <> <prop2> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>)
-->
   (<info> ^matches-default <obj>)
}

sp {learn-subaction-proposal*elaborate*argument-match-info*matches-default*matches*object*3*predicate
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>
              ^world.objects.object <obj>)
   (<info> ^slot.default <def>)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>)
   -{(<def> ^{ <prop4> <> <prop1> <> <prop2> <> <prop3>})}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>)
-->
   (<info> ^matches-default <obj>)
}

sp {learn-subaction-proposal*elaborate*argument-match-info*matches-default*matches*object*4*predicate
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>
              ^world.objects.object <obj>)
   (<info> ^slot.default <def>)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>
          ^{<prop4> > <prop3>} <pred4>)
   -{(<def> ^{ <prop5> <> <prop1> <> <prop2> <> <prop3> <> <prop4>})}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>)
-->
   (<info> ^matches-default <obj>)
}

sp {learn-subaction-proposal*elaborate*argument-match-info*matches-default*matches*object*5*predicate
   (state <s> ^name learn-subaction-proposal
              ^argument-match-info <info>
              ^world.objects.object <obj>)
   (<info> ^slot.default <def>)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>
          ^{<prop4> > <prop3>} <pred4>
          ^{<prop5> > <prop4>} <pred5>)
   -{(<def> ^{ <prop5> <> <prop1> <> <prop2> <> <prop3> <> <prop4> <> <prop5>})}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>
            ^<prop5> <pred5>)
-->
   (<info> ^matches-default <obj>)
}



