### action-id ###

sp {action*elaborate*action-id*from*superstate
   (state <s> ^problem-space.name action
              ^superstate.action-id <id>)
-->
   (<s> ^action-id <id>)
}

### action-context ###

sp {action*elaborate*action-context*superoperator
   (state <s> ^problem-space.name action
              ^superstate.operator <o>)
   (<o> ^action-type << primitive composite >>)
-->
   (<s> ^action-context <o>)
}

### Copy action context to substates ####
sp {action*problem-space*elaborate*action-context*shallow*copy
   (state <s> ^problem-space <ps>
              ^superstate.action-context <context>)
   (<ps> ^name action
         ^world.copy-type shallow)
-->
   (<s> ^action-context <context>)
}
   
sp {action*problem-space*elaborate*action-context*deep
   (state <s> ^problem-space <ps>
              ^superstate.action-context <context>)
   (<ps> ^name action
         ^world.copy-type deep)
-->
   (<s> ^action-context <new-context>)
}
   
sp {action*problem-space*elaborate*action-context*deep*level*1
   (state <s> ^problem-space <ps>
              ^superstate.action-context <context>
              ^action-context <new-context>)
   (<ps> ^name action
         ^world.copy-type deep)
   (<context> ^<att> <val>)
   -{(<val> ^<sub>)}
-->
   (<new-context> ^<att> <val>)
}

sp {action*problem-space*elaborate*action-context*deep*object*argument
   (state <s> ^problem-space <ps>
              ^superstate.action-context.<arg-name> <arg>
              ^copy-objects-map.<src-obj> <obj>
              ^action-context <new-context>)
   (<ps> ^name action
         ^world.copy-type deep)
   (<arg> ^arg-type << object location >>
          ^id <src-obj>)
-->
   (<new-context> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <obj>)
}

sp {action*problem-space*elaborate*action-context*deep*concept*argument
   (state <s> ^problem-space <ps>
              ^superstate.action-context.<arg-name> <arg>
              ^action-context <new-context>)
   (<ps> ^name action
         ^world.copy-type deep)
   (<arg> ^arg-type concept
          ^id <concept>)
-->
   (<new-context> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^id <concept>)
}
   
sp {action*problem-space*elaborate*action-context*deep*predicate*argument
   (state <s> ^problem-space <ps>
              ^superstate.action-context.<arg-name> <arg>
              ^copy-objects-map.<src-obj> <obj>
              ^action-context <new-context>)
   (<ps> ^name action
         ^world.copy-type deep)
   (<arg> ^arg-type predicate
          ^handle <pred>
          ^2 <src-obj>)
-->
   (<new-context> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^handle <pred>
              ^2 <obj>)
}
   
sp {action*problem-space*elaborate*action-context*deep*until-clause*argument
   (state <s> ^problem-space <ps>
              ^superstate.action-context.<arg-name> <arg>
              ^action-context <new-context>)
   (<ps> ^name action
         ^world.copy-type deep)
   (<arg> ^arg-type until-clause)
-->
   (<new-context> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type until-clause)
}
   
sp {action*problem-space*elaborate*action-context*deep*until-clause*state*predicate
   (state <s> ^problem-space <ps>
              ^superstate.action-context.<arg-name> <arg>
              ^copy-objects-map.<src-obj> <obj>
              ^action-context.<arg-name> <new-arg>)
   (<ps> ^name action
         ^world.copy-type deep)
   (<arg> ^arg-type until-clause
          ^predicate <until-pred>)
   (<until-pred> ^type state
                 ^handle <pred>
                 ^1 <src-obj>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <pred>
               ^1 <obj>)
}

sp {action*problem-space*learning*elaborate*action-context*deep*until-clause*relation*predicate
   (state <s> ^problem-space <ps>
              ^superstate.action-context.<arg-name> <arg>
              ^copy-objects-map.<src-obj1> <obj1>
              ^copy-objects-map.<src-obj2> <obj2>
              ^action-context.<arg-name> <new-arg>)
   (<ps> ^name action
         ^world.copy-type deep)
   (<arg> ^arg-type until-clause
          ^predicate <until-pred>)
   (<until-pred> ^type relation
                 ^handle <pred>
                 ^1 <src-obj1>
                 ^2 <src-obj2>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type relation
               ^handle <pred>
               ^1 <obj1>
               ^2 <obj2>)
}
