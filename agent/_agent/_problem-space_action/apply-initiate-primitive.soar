sp {action*apply*primitive*initiate-operator*create*local*current-action
   (state <s> ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o>)
   (<o> ^action-type primitive
        ^action-handle <action-handle>)
-->
   (<s> ^current-action-copy <ca>)
   (<ca> ^action-handle <action-handle>
         ^first-appearance true
         ^execution-operator (concat |execute-| <action-handle>)
         ^arguments <args>)
}

sp {action*execute*apply*primitive*initiate-operator*copy*action-context*composte
   (state <s> ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o>
              ^action-context <action>
              ^current-action-copy <current-action>)
   (<o> ^action-type primitive
        ^action-handle <action-handle>)
   (<current-action> ^action-handle <action-handle>)
-->
   (<current-action> ^action-context <action>)
}

sp {action*apply*primitive*initiate-operator*mark*copied-arguments
   (state <s> ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o>
              ^current-action-copy <ca>)
   (<o> ^action-type primitive
        ^action-handle <action-handle>)
   (<ca> ^action-handle <action-handle>)
-->
   (<s> ^copied-arguments true)
}

sp {action*apply*primitive*initiate-operator*copy*object*arg
   (state <s> ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o>
              ^current-action-copy <ca>)
   (<o> ^action-type primitive
        ^action-handle <action-handle>
        ^<arg-name> <arg>)
   (<arg> ^arg-type object
           ^id <obj>)
   (<ca> ^action-handle <action-handle>
         ^arguments <args>)
-->
   (<args> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
               ^id <obj>)
}

sp {action*apply*primitive*initiate-operator*copy*concept*arg
   (state <s> ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o>
              ^current-action-copy <ca>)
   (<o> ^action-type primitive
        ^action-handle <action-handle>
        ^<arg-name> <arg>)
   (<arg> ^arg-type concept
           ^handle <concept>)
   (<ca> ^action-handle <action-handle>
         ^arguments <args>)
-->
   (<args> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
               ^handle <concept>)
}

sp {action*apply*primitive*initiate-operator*copy*level2*args
   (state <s> ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o>
              ^current-action-copy <ca>)
   (<o> ^action-type primitive
        ^action-handle <action-handle>
        ^<arg-name> <arg>)
   (<arg> ^arg-type predicate
           ^handle <pred-handle>
           ^2 <pred-obj>)
   (<ca> ^action-handle <action-handle>
         ^arguments <args>)
-->
   (<args> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^handle <pred-handle>
              ^2 <pred-obj>)
}

sp {action*apply*primitive*initiate-operator*copy*until*args
   (state <s> ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o>
              ^current-action-copy <ca>)
   (<o> ^action-type primitive
        ^action-handle <action-handle>
        ^until-clause <until>)
   (<ca> ^action-handle <action-handle>
         ^arguments <args>)
-->
   (<args> ^until-clause <until>)
}

sp {action*apply*primitive*initiate-operator*copy*current-action*top-state*segment
   (state <s> ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o>
              ^current-action-copy <ca>
              ^copied-arguments true
              ^top-state.interaction.stack.segment <seg>)
   (<o> ^action-type primitive
        ^action-handle <action-handle>)
   (<ca> ^action-handle <action-handle>)
-->
   (<seg> ^current-action <ca>)
}
