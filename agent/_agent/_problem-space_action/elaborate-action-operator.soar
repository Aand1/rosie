
### action-operator ###

# if the superstate operator is an action operator, elaborate it down
sp {action*elaborate*action-operator*superoperator
   (state <s> ^problem-space.name action
              ^superstate.operator <o>)
   (<o> ^action-type << primitive composite >>)
-->
   (<s> ^action-operator <o>)
}
#
#### Copy action operator to substates ####
#sp {action*problem-space*elaborate*action-operator*shallow*copy
#   (state <s> ^problem-space <ps>
#              ^superstate.action-operator <operator>)
#   (<ps> ^name action
#         ^world.copy-type shallow)
#-->
#   (<s> ^action-operator <operator>)
#}
#   

#### evaluate-operator - do a deep copy

# create root action-operator id
sp {action*problem-space*elaborate*action-operator*deep
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator <operator>)
-->
   (<s> ^action-operator <new-operator>)
}
   
# copy all level 1 attributes
sp {action*problem-space*elaborate*action-operator*deep*level*1
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator <operator>
              ^action-operator <new-operator>)
   (<operator> ^<att> <val>)
   -{(<val> ^<sub>)}
-->
   (<new-operator> ^<att> <val>)
}

### copy object arguments

sp {action*problem-space*elaborate*action-operator*deep*object*argument
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^deep-copy-world.copy-objects-map.entry <obj-e>
              ^action-operator <new-operator>)
   (<arg> ^arg-type object
          ^id <src-obj>)
   (<obj-e> ^source <src-obj>
             ^copy <obj>)
-->
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <obj>)
}

sp {action*problem-space*elaborate*action-operator*deep*abstract*object*argument*level1
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^action-operator <new-operator>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<arg> ^arg-type object
          ^id <src-obj>)
   (<src-obj> ^handle <obj-handle>)
-->
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <new-obj>)
   (<new-obj> ^item-type object
              ^handle <obj-handle>
              ^predicates <preds>)
}

sp {action*problem-space*elaborate*action-operator*deep*abstract*object*argument*level2
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^action-operator <new-operator>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<arg> ^arg-type object
          ^id <src-obj>)
   (<src-obj> ^predicates.<prop-name> <pred-name>)
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^id.predicates <new-preds>)
-->
   (<new-preds> ^<prop-name> <pred-name>)
}

#### copy concept argument
sp {action*problem-space*elaborate*action-operator*deep*concept*argument
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^action-operator <new-operator>)
   (<arg> ^arg-type concept
          ^id <concept>)
-->
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^id <concept>)
}
   
#### copy predicate argument
sp {action*problem-space*elaborate*action-operator*deep*predicate*argument
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^deep-copy-world.copy-objects-map.entry <obj-e>
              ^action-operator <new-operator>)
   (<arg> ^arg-type predicate
          ^handle <handle>
          ^2 <src-obj>)
  (<obj-e> ^source <src-obj>
            ^copy <obj>)
-->
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^handle <pred>
              ^2 <obj>)
}

sp {action*problem-space*elaborate*action-operator*deep*abstract*predicate*argument*level1
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^action-operator <new-operator>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<arg> ^arg-type predicate
          ^handle <pred-handle>
          ^2 <src-obj>)
   (<src-obj> ^handle <obj-handle>)
-->
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^handle <pred-handle>
              ^2 <new-obj>)
   (<new-obj> ^item-type object
              ^handle <obj-handle>
              ^predicates <preds>)
}

sp {action*problem-space*elaborate*action-operator*deep*abstract*object*argument*level2
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^action-operator <new-operator>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<arg> ^arg-type predicate
          ^2 <src-obj>)
   (<src-obj> ^predicates.<prop-name> <pred-name>)
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^{2}.predicates <new-preds>)
-->
   (<new-preds> ^<prop-name> <pred-name>)
}

#### copy until-clause argument
   
sp {action*problem-space*elaborate*action-operator*deep*until-clause*argument
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^action-operator <new-operator>)
   (<arg> ^arg-type until-clause)
-->
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type until-clause)
}
   
sp {action*problem-space*elaborate*action-operator*deep*until-clause*state*predicate
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^deep-copy-world.copy-objects-map.entry <obj-e>
              ^action-operator.<arg-name> <new-arg>)
   (<arg> ^arg-type until-clause
          ^predicate <until-pred>)
   (<until-pred> ^type state
                 ^handle <pred>
                 ^property-handle <prop-handle>
                 ^1 <src-obj>)
   (<obj-e> ^source <src-obj>
             ^copy <obj>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <pred>
               ^property-handle <prop-handle>
               ^1 <obj>)
}

sp {action*problem-space*learning*elaborate*action-operator*deep*until-clause*relation*predicate
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^deep-copy-world.copy-objects-map <objs-map>
              ^action-operator.<arg-name> <new-arg>)
   (<arg> ^arg-type until-clause
          ^predicate <until-pred>)
   (<until-pred> ^type relation
                 ^handle <pred>
                 ^1 <src-obj1>
                 ^2 <src-obj2>)
   (<objs-map> ^entry <obj1-e> <obj2-e>)
   (<obj1-e> ^source <src-obj1>
              ^copy <obj1>)
   (<obj2-e> ^source <src-obj2>
              ^copy <obj2>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type relation
               ^handle <pred>
               ^1 <obj1>
               ^2 <obj2>)
}
