sp {generate-grounded-predicate*elaborate*grounding-info
   (state <s> ^name generate-grounded-predicate
              ^predicate.smem-rep <goal-pred>)
   (<goal-pred> ^{ <att> << id 1 2 >> } <arg>)
-->
   (<s> ^grounding-info <info>)
   (<info> ^attribute <att>
           ^slot <arg>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*predicate*type
   (state <s> ^name generate-grounded-predicate
              ^predicate.smem-rep.type <type>
              ^grounding-info <info>)
   (<info> ^attribute id)
-->
   (<info> ^type <type>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*state*id
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^action-id.procedural <proc>
              ^action-context <action>)
   (<info> ^attribute id
           ^type state
           ^slot <concept-slot>)
   (<proc> ^<arg-name> <proc-arg>)
   (<proc-arg> ^arg-type concept
               ^id <concept-slot>)
   (<action> ^<arg-name> <action-arg>)
   (<action-arg> ^arg-type concept
                 ^handle <concept-handle>)
-->
   (<info> ^matches <concept-handle>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*relation*id
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^action-id.procedural <proc>
              ^action-context <action>)
   (<info> ^attribute id
           ^type relation
           ^slot <pred-slot>)
   (<proc> ^<arg-name> <proc-arg>)
   (<proc-arg> ^arg-type predicate
               ^id <pred-slot>)
   (<action> ^<arg-name> <action-arg>)
   (<action-arg> ^arg-type predicate
                 ^handle <rel-handle>)
-->
   (<info> ^matches <rel-handle>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*object
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^action-id.procedural <proc>
              ^action-context <action>)
   (<info> ^attribute << 1 2 >>
           ^slot <obj-slot>)
   (<proc> ^<arg-name> <proc-arg>)
   (<proc-arg> ^arg-type object
               ^id <obj-slot>)
   (<action> ^<arg-name> <action-arg>)
   (<action-arg> ^arg-type object
                 ^id <obj>)
-->
   (<info> ^matches <obj>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*object*in*predicate
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^action-id.procedural <proc>
              ^action-context <action>)
   (<info> ^attribute << 1 2 >>
           ^slot <obj-slot> <parg>)
   (<proc> ^<arg-name> <proc-arg>)
   (<proc-arg> ^arg-type predicate
               ^2 <obj-slot>)
   (<action> ^<arg-name> <action-arg>)
   (<action-arg> ^arg-type predicate
                 ^2 <obj>)
-->
   (<info> ^matches <obj>)
}

sp {generate-grounded-predicate*elaborate*ground-default*no*matches
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>)
   (<info> -^matches
            ^slot.default <def>)
-->
   (<info> ^ground-default <def>)
}

sp {generate-grounded-predicate*elaborate*matches-default*id
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>)
   (<info> ^attribute id
           ^ground-default.handle <def-handle>)
-->
   (<info> ^matches-default <def-handle>)
}

sp {generate-grounded-predicate*elaborate*default-match-info*object
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>)
   (<info> ^attribute << 1 2 >>
           ^ground-default <def>)
-->
   (<info> ^default-match-info <dmi>)
   (<dmi> ^default-arg <def>)
}

sp {generate-grounded-predicate*elaborate*default-match-info*no-matches*object
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^world.objects.object <obj>)
   (<info> ^default-match-info <match-info>)
   (<match-info> ^default-arg.{ <pred-name> <> handle } <pred-val>)
   (<obj> -^predicates.<pred-name> <pred-val>)
-->
   (<match-info> ^no-matches <obj>)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^world.objects.object <obj>)
   (<info> ^default-match-info <match-info>)
   (<match-info> ^default-arg.{ <pred-name> <> handle } <pred-val>)
   (<obj> ^predicates.<pred-name> <pred-val>)
-->
   (<match-info> ^matches <obj>)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object*handle
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^world.objects.object <obj>)
   (<info> ^default-match-info <match-info>)
   (<match-info> ^default-arg.handle <obj-handle>)
   (<obj> ^handle <obj-handle>)
-->
   (<match-info> ^matches <obj>)
}

sp {generate-grounded-predicate*elaborate*default-match-info*no-matches*object*handle
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^world.objects.object <obj>)
   (<info> ^default-match-info <match-info>)
   (<match-info> ^default-arg.handle <obj-handle>)
   (<obj> ^handle <> <obj-handle>)
-->
   (<match-info> ^no-matches <obj>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches-default*object
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^world.objects.object <obj>)
   (<info> ^default-match-info <match-info>)
   (<match-info> ^matches <obj>
               -^no-matches <obj>)
-->
   (<info> ^matches-default <obj>)
}
