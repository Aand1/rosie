sp {generate-grounded-predicate*elaborate*grounding-info
   (state <s> ^name generate-grounded-predicate
              ^predicate.smem-rep <goal-pred>)
   (<goal-pred> ^{ <att> << id 1 2 >> } <arg>)
-->
   (<s> ^grounding-info <info>)
   (<info> ^attribute <att>
           ^slot <arg>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*predicate*type
   (state <s> ^name generate-grounded-predicate
              ^predicate.smem-rep.type <type>
              ^grounding-info <info>)
   (<info> ^attribute id)
-->
   (<info> ^type <type>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*state*id
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^procedural-id <proc>
              ^argument-to-match <atm>)
   (<info> ^attribute id
           ^type state
           ^slot <concept-slot>)
   (<proc> ^<arg-name> <proc-arg>)
   (<proc-arg> ^arg-type concept
               ^id <concept-slot>)
   (<atm> ^name <arg-name>
          ^argument <arg>)
   (<arg> ^arg-type concept
          ^handle <concept-handle>)
-->
   (<info> ^matches <concept-handle>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*relation*id
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^procedural-id <proc>
              ^argument-to-match <atm>)
   (<info> ^attribute id
           ^type relation
           ^slot <pred-slot>)
   (<proc> ^<arg-name> <proc-arg>)
   (<proc-arg> ^arg-type predicate
               ^id <pred-slot>)
   (<atm> ^name <arg-name>
          ^argument <arg>)
   (<arg> ^arg-type predicate
          ^handle <rel-handle>)
-->
   (<info> ^matches <rel-handle>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*object
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^procedural-id <proc>
              ^argument-to-match <atm>)
   (<info> ^attribute << 1 2 >>
           ^slot <obj-slot>)
   (<proc> ^<arg-name> <proc-arg>)
   (<proc-arg> ^arg-type object
               ^id <obj-slot>)
   (<atm> ^name <arg-name>
          ^argument <arg>)
   (<arg> ^arg-type object
          ^id <obj>)
-->
   (<info> ^matches <obj>)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*object*in*predicate
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^procedural-id <proc>
              ^argument-to-match <atm>)
   (<info> ^attribute << 1 2 >>
           ^slot <obj-slot> <parg>)
   (<proc> ^<arg-name> <proc-arg>)
   (<proc-arg> ^arg-type predicate
               ^2 <obj-slot>)
   (<atm> ^name <arg-name>
          ^argument <arg>)
   (<arg> ^arg-type predicate
          ^2 <obj>)
-->
   (<info> ^matches <obj>)
}

# If the argument doesn't match anything on the procedural structure, 
#   and we have a default description, try to ground it
sp {generate-grounded-predicate*elaborate*ground-default*no*matches
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>)
   (<info> -^matches
            ^slot.{ << default imagined >> } <def>)
-->
   (<info> ^ground-default <def>)
}

sp {generate-grounded-predicate*elaborate*matches-default*id
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>)
   (<info> ^attribute id
           ^ground-default.predicate-handle <def-handle>)
-->
   (<info> ^matches-default <def-handle>)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object*1*predicate
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^world.objects.object <obj>)
   (<info> ^ground-default <def>)
   (<def> ^<prop1> <pred1>)
   -{(<def> ^{ <prop2> <> <prop1> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>)
-->
   (<info> ^matches-default <obj>)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object*2*predicate
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^world.objects.object <obj>)
   (<info> ^ground-default <def>)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>)
   -{(<def> ^{ <prop3> <> <prop1> <> <prop2> })}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>)
-->
   (<info> ^matches-default <obj>)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object*3*predicate
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^world.objects.object <obj>)
   (<info> ^ground-default <def>)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>)
   -{(<def> ^{ <prop4> <> <prop1> <> <prop2> <> <prop3>})}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>)
-->
   (<info> ^matches-default <obj>)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object*4*predicate
   (state <s> ^name generate-grounded-predicate
              ^grounding-info <info>
              ^world.objects.object <obj>)
   (<info> ^ground-default <def>)
   (<def> ^<prop1> <pred1>
          ^{<prop2> > <prop1>} <pred2>
          ^{<prop3> > <prop2>} <pred3>
          ^{<prop4> > <prop3>} <pred4>)
   -{(<def> ^{ <prop5> <> <prop1> <> <prop2> <> <prop3> <> <prop4>})}
   (<obj> ^predicates <preds>)
   (<preds> ^<prop1> <pred1>
            ^<prop2> <pred2>
            ^<prop3> <pred3>
            ^<prop4> <pred4>)
-->
   (<info> ^matches-default <obj>)
}

