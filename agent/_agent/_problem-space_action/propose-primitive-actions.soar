####### propose pick-up for objects #########################################
sp {composite-action*propose*initiate-pick-up1
   (state <s> ^problem-space.name action
              ^problem-space.action.propose-action-operators true
              ^world.objects.object <obj>
             -^world.objects.object.predicates.arm-status grabbed)
   (<obj> ^predicates <preds>)
   (<preds> ^category block1
            ^arm-status not-grabbed)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-pick-up1 
         ^action-name pick-up1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^object <obj>)
}

sp {composite-action*propose*initiate-pick-up1*imagined*object
   (state <s> ^problem-space.name action
              ^problem-space.action.propose-action-operators true
              ^superstate.action-operator.arg1.object <obj>
             -^world.objects.object <obj>)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-pick-up1 
         ^action-name pick-up1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^object <obj>)
}

####### propose put-down for objects #########################################
sp {composite-action*propose*initiate-put-down1
   (state <s> ^problem-space.name action
              ^problem-space.action.propose-action-operators true
              ^world.objects.object <obj>
              ^world.objects.object { <dest> <> <obj> })
   (<obj> ^predicates.arm-status grabbed)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-put-down1
         ^action-name put-down1
         ^arg1 <arg1>
         ^arg2 <arg2>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^object <obj>)
   (<arg2> ^arg-type predicate
           ^2 <dest>)
}

sp {composite-action*propose*initiate-put-down1*imagined*object
   (state <s> ^problem-space.name action
              ^problem-space.action.propose-action-operators true
              ^superstate.action-operator.arg1.object <obj>
             -^world.objects.object <obj>
              ^world.objects.object <dest>)
   (<obj> ^predicates.arm-status grabbed)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-put-down1 
         ^action-name put-down1
         ^arg1 <arg1>
         ^arg2 <arg2>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^object <obj>)
   (<arg2> ^arg-type predicate
           ^2 <dest>)
}

####################### propose open location #################################
sp {composite-action*propose*initiate-open1
   (state <s> ^problem-space.name action
              ^problem-space.action.propose-action-operators true
              ^world.objects.object <obj>)
   (<obj> ^predicates.door closed)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-open1
         ^action-name open1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^object <obj>)
}

####################### propose close location ##################################
sp {composite-action*propose*initiate-close1
   (state <s> ^problem-space.name action
              ^problem-space.action.propose-action-operators true
              ^world.objects.object <obj>)
   (<obj> ^predicates.door open)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-close1
         ^action-name close1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^object <obj>)
}

####################### propose initiate-turn-on ##################################
sp {composite-action*propose*initiate-turn-on1
   (state <s> ^problem-space.name action
              ^problem-space.action.propose-action-operators true
              ^world.objects.object <obj>)
   (<obj> ^predicates.<any> off)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-turn-on1
         ^action-name turn-on1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^object <obj>)
}

######################## propose initiate-stop ##################################
#sp {composite-action*propose*initiate-stop1
#   (state <s> ^problem-space.name action
#              ^problem-space.action.propose-action-operators true)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name initiate-stop1
#        ^action-name stop1
#         ^action-type primitive)
#}
#
######################## propose initiate-orient ##################################
#sp {composite-action*propose*initiate-orient1*each*direction
#   (state <s> ^problem-space.name action
#              ^problem-space.action.propose-action-operators true)
#-->
#   (<s> ^operator <on> +
#        ^operator <os> +
#        ^operator <oe> +
#        ^operator <ow> +)
#   (<on> ^name initiate-orient1
#         ^action-name orient1
#         ^arg1 <n-arg1>
#         ^action-type primitive)
#   (<n-arg1> ^arg-type concept
#             ^concept north1)
#   (<os> ^name initiate-orient1
#         ^action-name orient1
#         ^arg1 <s-arg1>
#         ^action-type primitive)
#   (<s-arg1> ^arg-type concept
#             ^concept south1)
#   (<oe> ^name initiate-orient1
#         ^action-name orient1
#         ^arg1 <e-arg1>
#         ^action-type primitive)
#   (<e-arg1> ^arg-type concept
#             ^concept east1)
#   (<ow> ^name initiate-orient1
#         ^action-name orient1
#         ^arg1 <w-arg1>
#         ^action-type primitive)
#   (<w-arg1> ^arg-type concept
#             ^concept west1)
#}
#
######################### propose initiate-go ##################################
##sp {action*propose*initiate-go1
##   (state <s> ^problem-space.action.propose-action-operators true)
##-->
##   (<s> ^operator <o> +)
##   (<o> ^name initiate-go1
##        ^action-name go1
##         ^action-type primitive)
##}
#
######################## propose initiate-turn-right ##################################
#sp {composite-action*propose*initiate-turn-right1
#   (state <s> ^problem-space.name action
#              ^problem-space.action.propose-action-operators true)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name initiate-turn-right1
#        ^action-name turn-right1
#         ^action-type primitive)
#}
#
######################## propose initiate-turn-left ##################################
#sp {composite-action*propose*initiate-turn-left1
#   (state <s> ^problem-space.name action
#              ^problem-space.action.propose-action-operators true)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name initiate-turn-left1
#        ^action-name turn-left1
#         ^action-type primitive)
#}
#
######################## propose initiate-turn-around ##################################
#sp {composite-action*propose*initiate-turn-around1
#   (state <s> ^problem-space.name action
#              ^problem-space.action.propose-action-operators true)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name initiate-turn-around1
#        ^action-name turn-around1
#         ^action-type primitive)
#}
#
######################## propose initiate-follow-left-wall1 ##################################
#sp {composite-action*propose*initiate-follow-wall1*left
#   (state <s> ^problem-space.name action
#              ^problem-space.action.propose-action-operators true)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name initiate-follow-wall1
#        ^action-name follow-wall1
#        ^arg1 <arg1>
#         ^action-type primitive)
#   (<arg1> ^arg-type concept
#           ^concept left1)
#}
#
######################## propose initiate-follow-right-wall1 ##################################
#sp {composite-action*propose*initiate-follow-wall1*right
#   (state <s> ^problem-space.name action
#              ^problem-space.action.propose-action-operators true)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name initiate-follow-wall1
#        ^action-name follow-wall1
#        ^arg1 <arg1>
#         ^action-type primitive)
#   (<arg1> ^arg-type concept
#           ^concept right1)
#}
#
#
########################### propose wait ########################################
##sp {propose*op_wait*operator
##   (state <s> ^problem-space.action <act>)
##   (<act> -^type none)
##-->
##   (<s> ^operator <op> +)
##   (<op> ^name op_wait
##        ^action-type primitive)
##}
##   
##
