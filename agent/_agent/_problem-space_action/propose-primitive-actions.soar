####### propose pick-up for objects #########################################
sp {composite-action*propose*op_pick-up1*mobile
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.predicates.predicate <in-pred>
              ^world.robot.current-location <cur-loc>
             -^world.robot.holding-object <any>)
   (<ps> ^name action
         ^action.domain mobile
         ^action.propose-action-operators true)
   (<obj> ^predicates <preds>)
   (<preds> ^category << object block >>
            ^arm-status not-grabbed)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 <cur-loc>)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pick-up1 
         ^action-handle pick-up1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status visible
           ^id <obj>)
}

sp {composite-action*propose*op_pick-up1*arm
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
#              ^world.predicates.predicate <on-pred>
             -^world.objects.object.predicates.arm-status grabbed)
   (<ps> ^name action
         ^action.domain arm
         ^action.propose-action-operators true)
   (<obj> ^predicates <preds>)
   (<preds> ^visible true
            ^category << object block >>
            ^arm-status not-grabbed)
#   (<on-pred> ^handle on1)
#   -{(<on-pred> ^instance <i>)
#     (<i> ^1 <obj> ^{2}.predicates.door1)}
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pick-up1 
         ^action-handle pick-up1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status visible
           ^id <obj>)
}

# Pick up on a location with a door
sp {composite-action*propose*op_pick-up1*on*location*with*door
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.predicates.predicate <on-pred>
             -^world.objects.object.predicates.arm-status grabbed)
   (<ps> ^name action
         ^action.domain << arm mobile >>
         ^action.propose-action-operators true)
   (<obj> ^predicates <preds>)
   (<preds> ^visible true
            ^category << object block >>
            ^arm-status not-grabbed)
   (<on-pred> ^handle on1
              ^instance <i>)
   (<i> ^1 <obj> ^{2}.predicates.door1 open2)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pick-up1 
         ^action-handle pick-up1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status visible
           ^id <obj>)
}

# HACK for now, so we can learn store (wont try to pick it up once its on the goal)
sp {composite-action*reject*op_pick-up1*achieved*goal
   (state <s> ^problem-space <ps>
              ^operator <o> +
              ^desired.predicate <pred>)
   (<ps> ^name action
         ^action.domain << arm mobile >>
         ^action.propose-action-operators true)
   (<o> ^name op_pick-up1
        ^arg1.id <obj1>)
   (<pred> ^type relation ^1 <obj1>
           ^satisfied true)
-->
   (<s> ^operator <o> -)
}

#sp {composite-action*mobile*propose*op_pick-up1*imagined*object
#   (state <s> ^problem-space.name action
#              ^problem-space.action.propose-action-operators true
#              ^top-state.agent-params.domain mobile
#              ^superstate.action-operator.arg1.id <obj>
#             -^world.objects <obj>)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_pick-up1 
#         ^action-handle pick-up1
#         ^arg1 <arg1>
#         ^action-type primitive)
#   (<arg1> ^arg-type object
#           ^id <obj>)
#}

####### propose put-down for objects #########################################

# Arm - put down on a location with a door
sp {composite-action*propose*op_put-down1*has*door
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object { <dest> <> <obj> })
   (<ps> ^name action
         ^action.domain arm
         ^action.propose-action-operators true)
   (<obj> ^predicates.arm-status grabbed)
   (<dest> ^predicates.door1 open2)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^action-handle put-down1
         ^arg1 <arg1>
         ^arg2 <arg2>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status imagined
           ^id <obj>)
   (<arg2> ^arg-type predicate
           ^arg-status desired
           ^handle on1
           ^2 <dest>)
}

# Arm - put down on a location without a door
sp {composite-action*propose*op_put-down1*no*door
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object { <dest> <> <obj> })
   (<ps> ^name action
         ^action.domain arm
         ^action.propose-action-operators true)
   (<obj> ^predicates.arm-status grabbed)
   (<dest> -^predicates.door1 <any>)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^action-handle put-down1
         ^arg1 <arg1>
         ^arg2 <arg2>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status imagined
           ^id <obj>)
   (<arg2> ^arg-type predicate
           ^arg-status desired
           ^2 <dest>)
}

# Mobile - put down on the floor
sp {composite-action*propose*op_put-down1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>)
   (<ps> ^name action
         ^action.domain mobile
         ^action.propose-action-operators true)
   (<obj> ^predicates.arm-status grabbed)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^action-handle put-down1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status imagined
           ^id <obj>)
}

####################### propose open location #################################
sp {composite-action*propose*op_open1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>)
   (<ps> ^name action
         ^action.domain arm
         ^action.propose-action-operators true)
   (<obj> ^predicates.door1 closed2)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_open1
         ^action-handle open1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status visible
           ^id <obj>)
}

####################### propose close location ##################################
sp {composite-action*propose*op_close1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>)
   (<ps> ^name action
         ^action.domain arm
         ^action.propose-action-operators true)
   (<obj> ^predicates.door1 open2)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_close1
         ^action-handle close1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status visible
           ^id <obj>)
}


######################### propose op_go ##################################
sp {action*propose*op_go-to-location1
   (state <s> ^problem-space <ps>
              ^world.objects.object <loc>
             -^world.robot.current-location <loc>)
   (<ps> ^name action
         ^action.domain mobile
         ^action.propose-action-operators true)
  (<loc> ^predicates.category location)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_go-to-location1
        ^action-handle go-to-location1
         ^action-type primitive
         ^arg2 <arg2>)
   (<arg2> ^arg-type predicate
           ^arg-status desired
           ^handle to1
           ^2 <loc>)
}
#
####################### propose op_turn-off ##################################
sp {composite-action*propose*op_turn-off1
   (state <s> ^problem-space <ps>
              ^top-state.agent-params.domain arm
              ^world.objects.object <obj>)
   (<obj> ^predicates.activation1 on2)
   (<ps> ^name action
         ^action.domain arm
         ^action.propose-action-operators true)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_turn-off1
         ^action-handle turn-off1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status visible
           ^id <obj>)
}
####################### propose op_turn-on ##################################
sp {composite-action*propose*op_turn-on1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>)
   (<ps> ^name action
         ^action.domain arm
         ^action.propose-action-operators true)
   (<obj> ^predicates.activation1 off2)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_turn-on1
         ^action-handle turn-on1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status visible
           ^id <obj>)
}

####################### propose op_scan ##################################
sp {composite-action*propose*op_scan1
   (state <s> ^problem-space <ps>
              ^world.robot <rob>)
   (<ps> ^name action
         ^action.domain mobile
         ^action.propose-action-operators true)
   (<rob> ^current-location <loc>
          ^havent-scanned <loc>)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_scan1
        ^action-handle scan1
         ^action-type primitive)
}


####################### propose op_stop ##################################
sp {composite-action*propose*op_stop1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.domain mobile
         ^action.propose-action-operators true)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_stop1
        ^action-handle stop1
         ^action-type primitive)
}

######################## propose explore ##################################
#sp {composite-action*propose*op_explore1*each*direction
#   (state <s> ^problem-space <ps>)
#   (<ps> ^name action
#         ^action-type primitive
#         ^action.domain mobile
#         ^action.propose-action-operators true)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name op_explore1
#        ^action

####################### propose op_orient ##################################
sp {composite-action*propose*op_orient1*each*direction
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.domain mobile
         ^action.propose-action-operators true)
-->
   (<s> ^operator <on> +
        ^operator <os> +
        ^operator <oe> +
        ^operator <ow> +)
   (<on> ^name op_orient1
         ^action-handle orient1
         ^arg1 <n-arg1>
         ^action-type primitive)
   (<n-arg1> ^arg-type concept
             ^arg-status abstract
             ^handle north1)
   (<os> ^name op_orient1
         ^action-handle orient1
         ^arg1 <s-arg1>
         ^action-type primitive)
   (<s-arg1> ^arg-type concept
             ^arg-status abstract
             ^handle south1)
   (<oe> ^name op_orient1
         ^action-handle orient1
         ^arg1 <e-arg1>
         ^action-type primitive)
   (<e-arg1> ^arg-type concept
             ^arg-status abstract
             ^handle east1)
   (<ow> ^name op_orient1
         ^action-handle orient1
         ^arg1 <w-arg1>
         ^action-type primitive)
   (<w-arg1> ^arg-type concept
             ^arg-status abstract
             ^handle west1)
}


####################### propose op_turn ##################################
sp {composite-action*propose*op_turn1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.domain mobile
         ^action.propose-action-operators true)
-->
   (<s> ^operator <oleft> +
        ^operator <oright> +
        ^operator <oaround> +)
   (<oleft> ^name op_turn1
          ^action-handle turn1
          ^action-type primitive
          ^arg1 <left-arg1>)
   (<left-arg1> ^arg-type concept ^arg-status abstract ^handle left1)
   (<oright> ^name op_turn1
             ^action-handle turn1
             ^action-type primitive
             ^arg1 <right-arg1>)
   (<right-arg1> ^arg-type concept ^arg-status abstract ^handle right1)
   (<oaround> ^name op_turn1
             ^action-handle turn1
             ^action-type primitive
             ^arg1 <around-arg1>)
   (<around-arg1> ^arg-type concept ^arg-status abstract ^handle around1)
}

####################### propose op_follow-left-wall1 ##################################
sp {composite-action*propose*op_follow-wall1*left
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.domain mobile
         ^action.propose-action-operators true)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_follow-wall1
        ^action-handle follow-wall1
        ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type concept
           ^arg-status abstract
           ^handle left1)
}

####################### propose op_follow-right-wall1 ##################################
sp {composite-action*propose*op_follow-wall1*right
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.domain mobile
         ^action.propose-action-operators true)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_follow-wall1
        ^action-handle follow-wall1
        ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type concept
           ^arg-status abstract
           ^handle right1)
}

####################### propose say message #################################
sp {composite-action*propose*op_say1*message
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.objects.object <person>
              ^world.predicates.predicate <heard>
              ^world.predicates.predicate <in>
              ^world.robot.current-location <cur-loc>)
   (<ps> ^name action
         ^action.domain << arm mobile >>
         ^action.propose-action-operators true)
   (<obj> ^predicates.category message)
   (<person> ^predicates.category person)
   (<in> ^handle in1
         ^instance <in-i>)
   (<in-i> ^1 <person> ^2 <cur-loc>)
   (<heard> ^handle heard2)
   -{(<heard> ^instance <i>)
     (<i> ^1 <person> ^2 <obj>)}
-->
   (<s> ^operator <op> +)
   (<op> ^name op_say1
         ^action-handle say1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^arg-status imagined
           ^id <obj>)
}



########################### propose wait ########################################
##sp {propose*op_wait*operator
##   (state <s> ^problem-space.action <act>)
##   (<act> -^type none)
##-->
##   (<s> ^operator <op> +)
##   (<op> ^name op_wait
##        ^action-type primitive)
##}
##   
##
