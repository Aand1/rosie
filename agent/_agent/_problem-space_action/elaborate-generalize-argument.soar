####################### elaborate-generalize-argument ###########################
#
# These rules take a specific instance of an action argument
#   and generates a generalized-rep to be stored in smem
#
# They fire if a generalize-argument structure is on the state
#   (state <s> ^generalize-argument <gen-arg>)
#   (<gen-arg> ^arg-type << object location concept predicate until-clause >>
#              ^instance <ins>) # usually from the action-operator
#   Also expects the following on the state: 
#     action-operator, action-id

## Expand out any until-clause predicates 

sp {anystate*elaborate*generalize-argument*until-predicate*expand*state*predicate
   (state <s> ^generalize-argument <arg>)
   (<arg> ^arg-type until-predicate
          ^instance <until-pred>)
   (<until-pred> ^type state
                 ^handle <pred>
                 ^1 <obj>)
-->
   (<arg> ^id <gen-pred>
          ^1 <gen-obj>)
   (<s> ^generalize-argument <gen-pred> <gen-obj>)
   (<gen-pred> ^instance <pred>
               ^arg-type predicate
               ^arg-status desired)
   (<gen-obj> ^instance <obj>
              ^arg-type object
              ^arg-status imagined)
}

sp {anystate*elaborate*generalize-argument*until-predicate*expand*relation*predicate
   (state <s> ^generalize-argument <arg>)
   (<arg> ^arg-type until-predicate
          ^instance <until-pred>)
   (<until-pred> ^type relation
                 ^handle <pred>
                 ^1 <obj1>
                 ^2 <obj2>)
-->
   (<arg> ^id <gen-pred>
          ^1 <gen-obj1>
          ^2 <gen-obj2>)
   (<s> ^generalize-argument <gen-pred> <gen-obj1> <gen-obj2>)
   (<gen-pred> ^instance <pred>
               ^arg-type predicate
               ^arg-status desired)
   (<gen-obj1> ^instance <obj1>
               ^arg-type object
               ^arg-status imagined)
   (<gen-obj2> ^instance <obj2>
               ^arg-type object
               ^arg-status imagined)
}

##### Elaborate a default representation for the argument #######

sp {anystate*elaborate*generalize-argument*default-rep
   (state <s> ^generalize-argument <arg>)
   (<arg> -^arg-type until-predicate)
-->
   (<arg> ^default-rep <def>)
}

sp {anystate*elaborate*generalize-argument*object*default-rep*predicates
   (state <s> ^generalize-argument <arg>)
   (<arg> ^arg-type << object location >>
          ^instance.predicates <preds>
          ^default-rep <def>)
   (<preds> ^{ <prop-handle> << color shape size category property >> } <pred-handle>)
-->
   (<def> ^<prop-handle> <pred-handle>)
}

sp {anystate*elaborate*generalize-argument*concept*default-rep*predicate-handle
   (state <s> ^generalize-argument <arg>)
   (<arg> ^arg-type concept
          ^instance <concept-handle>
          ^default-rep <def>)
-->
   (<def> ^predicate-handle <concept-handle>)
}

sp {anystate*elaborate*generalize-argument*predicate*default-rep*predicate-handle
   (state <s> ^generalize-argument <arg>)
   (<arg> ^arg-type predicate
          ^instance <predicate-handle>
          ^default-rep <def>)
-->
   (<def> ^predicate-handle <predicate-handle>)
}

##### Try to match the argument against existing procedural slots #####
   
sp {anystate*elaborate*generalize-argument*object*procedural-slot*depth*1
   (state <s> ^generalize-argument <arg>
              ^action-id.procedural.<arg-name> <parg>
              ^action-operator.<arg-name>.id <obj>)
   (<arg> ^arg-type << object location >>
          ^arg-status << visible imagined >>
          ^instance <obj>)
   (<parg> ^arg-type << object location >>
           ^id <obj-slot>)
-->
   (<arg> ^procedural-slot <obj-slot>)
}

sp {anystate*elaborate*generalize-argument*object*procedural-slot*depth*2
   (state <s> ^generalize-argument <arg>
              ^action-id.procedural.<arg-name> <parg>
              ^action-operator.<arg-name>.{2} <obj>)
   (<arg> ^arg-type << object location >>
          ^arg-status << visible imagined >>
          ^instance <obj>)
   (<parg> ^arg-type predicate
           ^2 <obj-slot>)
-->
   (<arg> ^procedural-slot <obj-slot>)
}
   
sp {anystate*elaborate*generalize-argument*object*procedural-slot*depth*1*abstract
   (state <s> ^generalize-argument <arg>
              ^action-id.procedural.<arg-name> <parg>
              ^action-operator.<arg-name>.id.predicates <obj-preds>)
   (<arg> ^arg-type << object location >>
          ^arg-status abstract
          ^instance.predicates <abs-preds>)
   (<parg> ^arg-type << object location >>
           ^id <obj-slot>)
   -{(<abs-preds> ^<prop-name> <pred-name>)
     (<obj-preds> -^<prop-name> <pred-name>)}
-->
   (<arg> ^procedural-slot <obj-slot>)
}

sp {anystate*elaborate*generalize-argument*object*procedural-slot*depth*2*abstract
   (state <s> ^generalize-argument <arg>
              ^action-id.procedural.<arg-name> <parg>
              ^action-operator.<arg-name>.{2}.predicates <obj-preds>)
   (<arg> ^arg-type << object location >>
          ^arg-status abstract
          ^instance.predicates <abs-preds>)
   (<parg> ^arg-type predicate
           ^2 <obj-slot>)
   -{(<abs-preds> ^<prop-name> <pred-name>)
     (<obj-preds> -^<prop-name> <pred-name>)}
-->
   (<arg> ^procedural-slot <obj-slot>)
}

sp {anystate*elaborate*generalize-argument*concept*procedural-slot
   (state <s> ^generalize-argument <arg>
              ^action-id.procedural.<arg-name> <parg>
              ^action-operator.<arg-name>.handle <concept>)
   (<arg> ^arg-type concept
          ^instance <concept>)
   (<parg> ^arg-type concept
           ^id <conc-slot>)
-->
   (<arg> ^procedural-slot <conc-slot>)
}

sp {anystate*elaborate*generalize-argument*predicate*procedural-slot
   (state <s> ^generalize-argument <arg>
              ^action-id.procedural.<arg-name> <parg>
              ^action-operator.<arg-name>.handle <pred>)
   (<arg> ^arg-type predicate
          ^instance <pred>)
   (<parg> ^arg-type predicate
           ^id <pred-slot>)
-->
   (<arg> ^procedural-slot <pred-slot>)
}

#### Elaborate the generalized-rep #####

sp {anystate*elaborate*generalize-argument*generalized-rep*procedural-slot
   (state <s> ^generalize-argument <arg>)
   (<arg> ^procedural-slot <slot>)
-->
   (<arg> ^generalized-rep <slot>)
}

sp {anystate*elaborate*generalize-argument*generalized-rep*default
   (state <s> ^generalize-argument <arg>)
   (<arg> -^procedural-slot
           ^default-rep <def>)
-->
   (<arg> ^generalized-rep <gen>)
   (<gen> ^default <def>)
}

sp {anystate*elaborate*generalize-argument*generalized-rep*state*until-predicate
   (state <s> ^generalize-argument <arg>)
   (<arg> ^arg-type until-predicate
          ^instance.type state
          ^id.generalized-rep <id-rep>
          ^{1}.generalized-rep <obj1-rep>)
-->
   (<arg> ^generalized-rep <gen>)
   (<gen> ^type state ^id <id-rep> ^1 <obj1-rep>)
}

sp {anystate*elaborate*generalize-argument*generalized-rep*relation*until-predicate
   (state <s> ^generalize-argument <arg>)
   (<arg> ^arg-type until-predicate
          ^instance.type relation
          ^id.generalized-rep <id-rep>
          ^{1}.generalized-rep <obj1-rep>
          ^{2}.generalized-rep <obj2-rep>)
-->
   (<arg> ^generalized-rep <gen>)
   (<gen> ^type relation ^id <id-rep> ^1 <obj1-rep> ^2 <obj2-rep>)
}
