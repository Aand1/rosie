sp {action*problem-space*match-action*elaborate*operator-matches
   (state <s> ^problem-space.name action
              ^action-to-match <atm>)
-->
   (<s> ^operator-matches <matches>)
}

sp {action*problem-space*match-action*elaborate*match-info*action*operator
   (state <s> ^problem-space.name action
              ^operator <o> +
              ^action-to-match <atm>
              ^operator-matches <matches>)
   (<o> ^action-type << primitive composite >>)
-->
   (<matches> ^match-info <info>)
   (<info> ^operator <o>)
}

sp {action*problem-space*match-action*elaborate*match-info*evaluate-operator
   (state <s> ^problem-space.name action
              ^operator <o> +
              ^action-to-match <atm>
              ^operator-matches <matches>)
   (<o> ^name evaluate-operator
        ^superoperator <op>)
-->
   (<matches> ^match-info <info>)
   (<info> ^operator <op>)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*action-name
   (state <s> ^problem-space.name action
              ^action-to-match.action-name <action-name>
              ^operator-matches.match-info <info>)
   (<info> ^operator.action-name <action-name>)
-->
   (<info> ^matches name)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*object*arg
   (state <s> ^problem-space.name action
              ^action-to-match.<arg-name>.object <obj>
              ^operator-matches.match-info <info>)
   (<info> ^operator.<arg-name> <arg>)
   (<arg> ^arg-type object
          ^object <obj>)
-->
   (<info> ^matches <arg-name>)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*concept*arg
   (state <s> ^problem-space.name action
              ^action-to-match.<arg-name>.concept <concept>
              ^operator-matches.match-info <info>)
   (<info> ^operator.<arg-name> <arg>)
   (<arg> ^arg-type concept
          ^concept <concept>)
-->
   (<info> ^matches <arg-name>)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*predicate*arg
   (state <s> ^problem-space.name action
              ^action-to-match.<arg-name> <sub-arg>
              ^operator-matches.match-info <info>)
   (<info> ^operator.<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^id.name <pred-name>
          ^2 <obj>)
   (<sub-arg> ^id.name <pred-name>
             ^2 <obj>)
-->
   (<info> ^matches <arg-name>)
}

sp {action*problem-space*match-action*elaborate*op-matched*no*name
   (state <s> ^problem-space.name action
              ^operator-matches.match-info <info>)
   (<info> -^matches name)
-->
   (<info> ^op-matched no)
}

sp {action*problem-space*match-action*elaborate*op-matched*no*arg
   (state <s> ^problem-space.name action
              ^operator-matches.match-info <info>)
   (<info> ^operator.<arg-name>.arg-type <any>
          -^matches <arg-name>)
-->
   (<info> ^op-matched no)
}

sp {action*problem-space*match-action*elaborate*op-matched*yes
   (state <s> ^problem-space.name action
              ^operator-matches.match-info <info>)
   (<info> -^op-matched no)
-->
   (<info> ^op-matched yes)
}

sp {action*problem-space*match-action*elaborate*operator*matched
   (state <s> ^problem-space.name action
              ^operator-matches.match-info <info>
              ^operator <o> +)
   (<info> ^operator <o>
           ^op-matched <any>)
-->
   (<o> ^op-matched <any>)
}

sp {action*problem-space*match-action*elaborate*evaluate-operator*matched
   (state <s> ^problem-space.name action
              ^operator-matches.match-info <info>
              ^operator <o> +)
   (<info> ^op-matched yes
           ^operator <op>)
   (<o> ^name evaluate-operator
        ^superoperator <op>)
-->
   (<s> ^operator <o> >)
}
