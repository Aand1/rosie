#######################################################
# 
# Propose: interaction 
#
########################################################

# sp {topstate*propose*interaction*new-segment-info
#    (state <s> ^topstate <s>
#               ^interaction.status.new-segment-info <info>)
# -->
#    (<s> ^operator <o> + =)
#    (<o> ^name interaction
#         ^new-segment-info <info>)
# }

sp {topstate*elaborate*interaction*status*new-message*nl
   (state <s> ^topstate <s>
              ^nl.input-link.message <msg>
              ^interaction.status <status>)
-->
   (<status> ^new-message <nm>)
   (<nm> ^type new-message
         ^message <msg>)
}

sp {topstate*elaborate*interaction*status*new-message*il
   (state <s> ^topstate <s>
              ^il.input-link.message <msg>
              ^interaction.status <status>)
-->
   (<status> ^new-message <nm>)
   (<nm> ^type new-message
         ^message <msg>)
}

# Will handle status changes for the current interaction state
sp {topstate*propose*interaction*status-change
   (state <s> ^topstate <s>
              ^interaction.status.<any> <status>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name interaction
        ^status <status>)
}

#
#sp {topstate*propose*interaction*nl-input-link
#   (state <s> ^topstate <s>
#              ^nl.input-link.message <msg>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name interaction 
#        ^message <msg>)
#}

#sp {topstate*propose*interaction*input-link
#   (state <s> ^topstate <s>
#              ^io.input-link.message <msg>)
#   (<msg> -^processed)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name interaction 
#        ^message <msg>)
#}
   
#######################################################
# 
# Propose: comprehesion
#
########################################################

sp {topstate*elaborate*non-indexed-param
   (state <s> ^topstate <s>
              ^top-segment.purpose.parameters.indexable <i>)
   (<i> ^lexical
       -^result)
-->
   (<s> ^non-indexed-param true)
}

sp {topstate*propose*comprehension
   (state <s> ^topstate <s>
              ^non-indexed-param true)
-->
   (<s> ^operator <o> +)
   (<o> ^name comprehension)
}


#######################################################
# 
# Propose: satisfy-purpose
#
########################################################

sp {topstate*propose*satisfy-purpose
   (state <s> ^topstate <s>
              ^top-segment.purpose {<p> <> none})
   (<p> -^type action-command
   	-^type goal-description)
-->
   (<s> ^operator <o> +)
   (<o> ^name satisfy-purpose
        ^purpose <p>)
}

#########################################################
#
# Propose: attend-to-scene-change
#
#########################################################
sp {propose*attend-to-scene-change
   (state <s> ^monitor-scene-changes true
              ^topstate.scene-changes.change <change>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name attend-to-scene-change
        ^category perception
        ^change <change>)
}

sp {elaborate*attend-to-scene-change*create-delete-only
   (state <s> ^operator <o> +
              ^create-delete-only <val>)
   (<o> ^name attend-to-scene-change)
-->
   (<o> ^create-delete-only <val>)
}


sp {topstate*propose*action
   (state <s> ^topstate <s>
              ^top-segment.purpose <p>)
   (<p> ^satisfaction.action-event)
-->
   (<s> ^operator <o> +)
   (<o> ^name action
        ^purpose <p>)
}

sp {topstate*propose*learning
   (state <s> ^topstate <s>
              ^top-segment.purpose <p>)
   (<p> ^satisfaction.learning-event)
-->
   (<s> ^operator <o> +)
   (<o> ^name learning
        ^purpose <p>)
}
