#######################################################
# 
# Propose: interaction 
#
########################################################

sp {topstate*propose*interaction*status-change
   (state <s> ^topstate <s>
              ^interaction.status.<any> <status>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name interaction
        ^status <status>)
}

sp {topstate*propose*interaction*nl-input-link
  (state <s> ^topstate <s>
             ^nl.input-link.message <msg>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name interaction 
       ^message <msg>)
}

sp {topstate*propose*interaction*input-link
  (state <s> ^topstate <s>
             ^io.input-link.message <msg>)
  (<msg> -^processed)
-->
  (<s> ^operator <o> + =)
  (<o> ^name interaction 
       ^message <msg>)
}
   
#######################################################
# 
# Propose: comprehesion
#
########################################################

sp {topstate*elaborate*non-indexed-param
   (state <s> ^topstate <s>
              ^top-segment.purpose.parameters.indexable <i>)
   (<i> ^lexical
       -^result)
-->
   (<s> ^non-indexed-param true)
}

sp {topstate*propose*comprehension
   (state <s> ^topstate <s>
              ^non-indexed-param true)
-->
   (<s> ^operator <o> +)
   (<o> ^name comprehension)
}


#######################################################
# 
# Propose: satisfy-purpose
#
########################################################

sp {topstate*propose*satisfy-purpose
   (state <s> ^topstate <s>
              ^top-segment.purpose {<p> <> none})
   (<p> -^type action-command
   	-^type goal-description)
-->
   (<s> ^operator <o> +)
   (<o> ^name satisfy-purpose
        ^purpose <p>)
}


# sp {topstate*propose*action
#    (state <s> ^topstate <s>
#               ^top-segment.purpose <p>)
#    (<p> ^satisfaction.action-event)
# -->
#    (<s> ^operator <o> +)
#    (<o> ^name action
#         ^purpose <p>)
# }

sp {topstate*propose*learning
   (state <s> ^topstate <s>
              ^top-segment.purpose <p>)
   (<p> ^satisfaction.learning-event)
   (<p> ^type << action-command goal-description >>)
-->
   (<s> ^operator <o> +)
   (<o> ^name learning
        ^purpose <p>)
}

###############################################################################
# 
# Propose attend-to-scene-change
#   This can get proposed on any state if the correct flags are given
# 
# Valid Flags:
#   attend-to-all-scene-changes true - any scene change will be attended to
#   attend-to-create-delete-only true - only changes involving new/stale objects will be attended to
#   attend-to-properties-only true - only changes involving properties will be attended to
#   attend-to-object <id> - only changes involving the specified object will be attended to
#   attend-to-property-type <name> - only property changes involving the given property will be attended to
#
################################################################################


# attend-to-all-scene-changes
#    If true, will attend to any changes in the scene
#
sp {anystate*propose*attend-to-scene-change*attend-to-all-scene-changes
   (state <s> ^attend-to-all-scene-changes true
              ^topstate.scene-monitor.scene-changes <sc>)
   (<sc> ^change <c>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name attend-to-scene-change
        ^change <c>)
}

# attend-to-create-delete-only
#   If true, will only attend to new-object/stale-object

sp {anystate*propose*attend-to-scene-change*attend-to-create-delete-only
   (state <s> ^attend-to-create-delete-only true
              ^topstate.scene-monitor.scene-changes <sc>)
   (<sc> ^change <c>)
   (<c> ^type << new-object stale-object >>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name attend-to-scene-change
        ^change <c>)
}

# attend-to-properties-only
#   If true, will only attend to changes in properties

sp {anystate*propose*attend-to-scene-change*attend-to-properties-only
   (state <s> ^attend-to-properties-only true
              ^topstate.scene-monitor.scene-changes <sc>)
   (<sc> ^change <c>)
   (<c> ^type << changed-property higher-confidence different-best >>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name attend-to-scene-change
        ^change <c>)
}

# attend-to-object
#   Will only attend to changes relevant to the object with the specified id

sp {anystate*propose*attend-to-scene-change*attend-to-object
   (state <s> ^attend-to-object <id>
              ^topstate.scene-monitor.scene-changes <sc>)
   (<sc> ^change <c>)
   (<c> ^object.svs-obj.id-int <id>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name attend-to-scene-change
        ^change <c>)
}

sp {anystate*reject*attend-to-scene-change*no*object*match
   (state <s> ^operator <o> +
              ^attend-to-object <any>
             -^attend-to-object <id>)
   (<o> ^name attend-to-scene-change
        ^change.object.svs-obj.id-int <id>)
-->
   (<s> ^operator <o> -)
}

# attend-to-property-type
#   Will only attend to changes relevant to the property listed

sp {anystate*propose*attend-to-scene-change*attend-to-property-type
   (state <s> ^attend-to-property-type <prop-name>
              ^topstate.scene-monitor.scene-changes <sc>)
   (<sc> ^change <c>)
   (<c> ^property.name <prop-name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name attend-to-scene-change
        ^change <c>)
}

sp {anystate*reject*attend-to-scene-change*no*property*match
   (state <s> ^operator <o> +
              ^attend-to-property-type <any>
             -^attend-to-property-type <prop-name>)
   (<o> ^name attend-to-scene-change
        ^change.property.name <prop-name>)
-->
   (<s> ^operator <o> -)
}
