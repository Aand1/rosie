
# a block
#sp {apply*push-object-message*action-parameter-message
#   (state <s> ^name interpret-message
#              ^topstate.current-game.learning <l>
#              ^operator <o>)
#   (<o> ^name object-message
#        ^object <obj>)  
#   (<l> ^type parameter)           
##   (<o> ^name push-object-message
##        ^message <msg>
##        ^object <obj>)
#   (<obj> ^specifier INDEF
#          ^word <type>)
#-->
#   (<s> ^new-segment-info <info>)
#   (<info> ^purpose <p>
#           ^originator instructor)
#   (<p> ^type action-parameter-message
#        ^parameters <params>
#        ^satisfaction <sat>)
#   (<params> ^parameter <type>)
#   (<sat> ^dialog-event.type game)
#}
sp {apply*push-object-message*action-parameter-message*either
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type parameter)
   (<o> ^name object-message
        ^object.word {<name> << either >>})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type action-parameter-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <name>)
   (<sat> ^dialog-event.type game)
}

sp {apply*push-object-message*action-parameter-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type parameter)
   (<o> ^name single-word-response
        ^response {<name> << block location >>})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type action-parameter-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <name>)
   (<sat> ^dialog-event.type game)
}



sp {apply*push-object-message*action-parameter-message*obj-desc
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type parameter)
   (<o> ^name object-message
        ^object <obj>)#.word {<name> << either >>})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type action-parameter-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter.object <obj>)
   (<sat> ^dialog-event.type game)
}
#
#
###TODO
#sp {action-parameter-message*propose*learn-parameter
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type action-parameter-message
#        ^parameters.parameter <type>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-parameter
#        ^category svs
#	    ^parameter <type>)
#}

############################## the block is blue
sp {apply*push-object-message*parameter-condition-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition )#^parameter <type>)
   (<o> ^name object-message
        ^message <msg>
       -^relation
        ^object <obj>)
   (<obj> ^specifier DEF
          ^word {<cond> <> <type>}
          ^word {<type> << location block >>})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameter-condition-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition <cond>)
   (<sat> ^dialog-event.type game)
}

###TODO
#sp {parameter-condition-message*propose*learn-condition
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type parameter-condition-message
#        ^parameters <param>)
#   (<param> ^parameter <type> ^condition <cond>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-condition
#        ^category svs
#        ^prep none
#        ^spec none
#        ^negative false
#        ^condition <cond>
#	    ^parameter <type>)
#}


### the block is in a location
sp {apply*push-object-message*parameter-condition-message*relation*positive*INDEF
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition)# ^parameter <type>)
   (<o> ^name object-message
        ^message <msg>
        ^relation.word <prep>
        ^object <obj>
        ^relation.p2.object {<obj1> <> <obj>})
   (<obj> ^specifier DEF
          ^word {<type> << location block >>})
   (<obj1> ^specifier {<spec> << INDEF >>}
          -^word null
           ^word <cond>)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition <cond> ^prep <prep> ^spec <spec> ^negative false)
   (<sat> ^dialog-event.type game)
}

sp {apply*push-object-message*parameter-condition-message*relation*negative*INDEF
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition)# ^parameter <type>)
   (<o> ^name object-message
        ^message <msg>
        ^relation.word <prep>
        ^object <obj>
        ^relation.p2.object {<obj1> <> <obj>})
   (<obj> ^specifier DEF
          ^word {<type> << location block >>})
   (<obj1> ^specifier {<spec> << INDEF >>}
           ^word null
           ^word {<cond> <> null})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition <cond> ^prep <prep> ^spec <spec> ^negative true)
   (<sat> ^dialog-event.type game)
}

### the location is linear-with 1 and 2
sp {apply*push-object-message*parameter-condition-message*relation*positive*parameter*linear-with
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition)# ^parameter <type>)
   (<o> ^name object-message
        ^message <msg>
        ^relation <r1>
        ^relation <r2>
        ^object {<obj> <> <obj2>})
   (<r1> ^word {<prep> linear-with} ^p2.object {<obj1> <> <obj>})
   (<r2> ^word and ^p2.object {<obj2> <> <obj1>})
   (<obj> ^specifier DEF
          ^word {<type> << location block >>})
   (<obj1> ^specifier {<spec> << none >>}
          -^word null
           ^word <cond>)
   (<obj2> ^specifier {<spec> << none >>}
          -^word null
           ^word <cond2>)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition1 (int <cond>) ^condition2 (int <cond2>)  ^prep <prep> ^spec <spec> ^negative false)
   (<sat> ^dialog-event.type game)
}

### the location is not linear-with 1 and 2
sp {apply*push-object-message*parameter-condition-message*relation*negative*parameter*linear-with
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition)# ^parameter <type>)
   (<o> ^name object-message
        ^message <msg>
        ^relation <r1>
        ^relation <r2>
        ^object {<obj> <> <obj2>})
   (<r1> ^word {<prep> linear-with} ^p2.object {<obj1> <> <obj>})
   (<r2> ^word and ^p2.object {<obj2> <> <obj1>})
   (<obj> ^specifier DEF
          ^word {<type> << location block >>})
   (<obj1> ^specifier {<spec> << none >>}
          -^word null
           ^word <cond>)
   (<obj2> ^specifier {<spec> << none >>}
           ^word null
           ^word {<cond2> <> null})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition1 (int <cond>) ^condition2 (int <cond2>)  ^prep <prep> ^spec <spec> ^negative true)
   (<sat> ^dialog-event.type game)
}
### the block is in 1
sp {apply*push-object-message*parameter-condition-message*relation*positive*parameter
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition)# ^parameter <type>)
   (<o> ^name object-message
        ^message <msg>
        ^relation.word <prep>
       -^relation.word linear-with
        ^object <obj>
        ^relation.p2.object {<obj1> <> <obj>})
   (<obj> ^specifier DEF
          ^word {<type> << location block >>})
   (<obj1> ^specifier {<spec> << none >>}
          -^word null
           ^word <cond>)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition (int <cond>) ^prep <prep> ^spec <spec> ^negative false)
   (<sat> ^dialog-event.type game)
}

sp {apply*push-object-message*parameter-condition-message*relation*positive*parameter-reference
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition)# ^parameter <type>)
   (<o> ^name object-message
        ^message <msg>
        ^relation.word <prep>
       -^relation.word linear-with
        ^object <obj>
        ^relation.p2.object {<obj1> <> <obj>})
   (<obj> ^specifier DEF
          ^word {<type> << location block >>})
   (<obj1> ^specifier DEF
          -^word null)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^obj-desc <obj1> ^prep <prep> ^spec none ^negative false)
   (<sat> ^dialog-event.type game)
}
sp {apply*push-object-message*parameter-condition-message*relation*negative*parameter-reference
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition)# ^parameter <type>)
   (<o> ^name object-message
        ^message <msg>
        ^relation.word <prep>
       -^relation.word linear-with
        ^object <obj>
        ^relation.p2.object {<obj1> <> <obj>})
   (<obj> ^specifier DEF
          ^word {<type> << location block >>})
   (<obj1> ^specifier DEF
           ^word null)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^obj-desc <obj1> ^prep <prep> ^spec none ^negative true)
   (<sat> ^dialog-event.type game)
}
### the block is not in 1
sp {apply*push-object-message*parameter-condition-message*relation*negative*parameter
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition)# ^parameter <type>)
   (<o> ^name object-message
        ^message <msg>
        ^relation.word <prep>
       -^relation.word linear-with
        ^object <obj>
        ^relation.p2.object {<obj1> <> <obj>})
   (<obj> ^specifier DEF
          ^word {<type> << location block >>})
   (<obj1> ^specifier {<spec> << none >>}
           ^word null
           ^word {<cond> <> null})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameter-condition-message-relation
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type> ^condition (int <cond>) ^prep <prep> ^spec <spec> ^negative true)
   (<sat> ^dialog-event.type game)
}


##TODO
#sp {parameter-condition-message-relation*propose*learn-condition
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type parameter-condition-message-relation
#        ^parameters <param>)
#   (<param> ^parameter <type> ^condition <cond> ^prep <prep> ^spec <spec> ^negative <val>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-condition
#        ^category svs
#        ^prep <prep>
#        ^spec <spec>
#        ^negative <val>
#        ^condition <cond>
#	    ^parameter <type>)
#}
#
##TODO
#sp {parameter-condition-message-relation*propose*learn-condition*linear
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type parameter-condition-message-relation
#        ^parameters <param>)
#   (<param> ^parameter <type> ^condition1 <cond> ^condition2 <cond2> ^prep <prep> ^spec <spec> ^negative <val>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-condition
#        ^category svs
#        ^prep <prep>
#        ^spec <spec>
#        ^negative <val>
#        ^condition1 <cond>
#        ^condition2 <cond2>
#	    ^parameter <type>)
#}

############################## action name
#here
#sp {apply*push-object-message*action-name-message
#   (state <s> ^name interpret-message
#              ^operator <o>
#              ^topstate.current-game.learning <l>)
#   (<l> ^type action -^action-name)
#   (<o> ^name single-word-response
#        ^response {<name> <> finished})
#-->
#   (<s> ^new-segment-info <info>)
#   (<info> ^purpose <p>
#           ^originator instructor)
#   (<p> ^type action-name-message
#        ^parameters <params>
#        ^satisfaction <sat>)
#   (<params> ^action-name <name>)
#   (<sat> ^dialog-event.type game)
#}

sp {apply*push-object-message*action-name-message*name-of
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type game-params -^action-name)
   (<o> ^name object-message
        ^message <msg>
        ^relation <r> 
        ^object.word action)
   (<r> ^word name-of ^|p2|.object.word {<action-name> <> action})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type action-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^action-name <action-name>)
   (<sat> ^dialog-event.type game)
}




sp {apply*push-object-message*action-name-message*multiplayer
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type mult)
   (<o> ^name single-word-response
        ^response {<name> <> finished})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type action-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^multiplayer <name>)
   (<sat> ^dialog-event.type game)
}

#sp {apply*push-object-message*action-name-message2
#    (state <s> ^name interpret-message
#               ^operator <o>
#               ^topstate.current-game.learning <l>)
#    (<l> ^type action -^action-name)
#    (<o> ^name object-message
#         ^message <msg>
#         ^object.word <name>)
#-->
#    (<s> ^new-segment-info <info>)
#   (<info> ^purpose <p>
#           ^originator instructor)
#    (<p> ^type action-name-message
#         ^parameters <params>
#         ^satisfaction <sat>)
#    (<params> ^action-name <name>)
#    (<sat> ^dialog-event.type game)
#}

##TODO
#sp {action-name-message*propose*learn-action
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type action-name-message
#        ^parameters <param>)
#   (<param> ^action-name <name>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-action
#        ^action-name <name>
#        ^category svs)
#}
############################## verb name
#sp {apply*push-object-message*verb-name-message
#   (state <s> ^name interpret-message
#              ^operator <o>
#              ^topstate.current-game.learning <l>)
#   (<l> ^type action ^action-name)
#   (<o> ^name single-word-response
#        ^response <name>)
#-->
#   (<s> ^new-segment-info <info>)
#   (<info> ^purpose <p>
#           ^originator instructor)
#   (<p> ^type verb-name-message
#        ^parameters <params>
#        ^satisfaction <sat>)
#   (<params> ^verb-name <name>)
#   (<sat> ^dialog-event.type game)
#}

##TODO
#sp {verb-name-message*propose*learn-action
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type verb-name-message
#        ^parameters <param>)
#   (<param> ^verb-name <name>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-action
#        ^verb-name <name>
#        ^category svs)
#}

############################## match goal name
sp {apply*push-object-message*goal-name-message2
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type goal)
   (<o> ^name object-message
        ^message <msg>
        ^object.word <name>)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type goal-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^goal-name <name>)
   (<sat> ^dialog-event.type game)
}
sp {apply*push-object-message*goal-name-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type goal)
   (<o> ^name single-word-response
        ^response {<name> <> finished})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type goal-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^goal-name <name>)
   (<sat> ^dialog-event.type game)
}
sp {apply*push-object-message*goal-name-message*name-of
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type game-params)
   (<o> ^name goal-description
        ^message.information <msg>)
   (<msg> ^relation <r>)
   (<r> ^word name-of ^|p2|.object.word {<goal-name> <> goal})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type goal-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^goal-name <goal-name>)
   (<sat> ^dialog-event.type game)
}

##TODO
#sp {goal-name-message*propose*learn-goal
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type goal-name-message
#        ^parameters <param>)
#   (<param> ^goal-name <name>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-goal
#        ^goal-name <name>
#        ^category svs)
#}
############################## match failure name
sp {apply*push-object-message*failure-name-message2
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type failure)
   (<o> ^name object-message
        ^message <msg>
        ^object.word <name>)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type failure-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^failure-name <name>)
   (<sat> ^dialog-event.type game)
}
sp {apply*push-object-message*failure-name-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type failure)
   (<o> ^name single-word-response
        ^response {<name> <> finished})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type failure-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^failure-name <name>)
   (<sat> ^dialog-event.type game)
}

sp {apply*push-object-message*failure-name-message*name-of
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type game-params)
   (<o> ^name object-message
        ^message <msg>
        ^relation <r> 
        ^object.word failure)
   (<r> ^word name-of ^|p2|.object.word {<failure-name> <> failure})
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type failure-name-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^failure-name <failure-name>)
   (<sat> ^dialog-event.type game)
}

##TODO
#sp {failure-name-message*propose*learn-failure
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type failure-name-message
#        ^parameters <param>)
#   (<param> ^failure-name <name>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-failure
#        ^failure-name <name>
#        ^category svs)
#}

##finished conditions for parameter
sp {apply*push-object-message*conditions-finished-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type {<cond> << condition >>} ^arg <arg> ^parameter <type> -^interaction true)
   (<o> ^name single-word-response
        ^response finished)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type conditions-finished-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<params> ^parameter <type>)
   (<sat> ^dialog-event.type game)
}

##TODO
#sp {conditions-finished-message*propose*finish-conditions
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type conditions-finished-message
#        ^parameters <param>)
#   (<param> ^parameter <type>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name finish-conditions
#        ^parameter <type>
#        ^category svs)
#}

##finished conditions for parameter
sp {apply*push-object-message*parameters-finished-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type parameter ^arg <arg>)
   (<o> ^name single-word-response
        ^response finished)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type parameters-finished-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^dialog-event.type game)
}

##TODO
#sp {parameters-finished-message*propose*finish-parameters
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type parameters-finished-message
#        ^parameters <param>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name finish-parameters
#        ^parameter <type>
#        ^category svs)
#}

##finished conditions for actions
sp {apply*push-object-message*actions-finished-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type action)
   (<o> ^name single-word-response
        ^response finished)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type actions-finished-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^dialog-event.type game)
}

#finished describe actions,failures,goals
#now ask for heuristics
sp {apply*push-object-message*game-params-finished-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type game-params)
   (<o> ^name single-word-response
        ^response finished)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type game-params-finished-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^dialog-event.type game)
}
#TODO JAMES START HERE-thank you james
#now handle message for heuristic teaching


#done heuristics-complete
sp {apply*push-object-message*game-heuristics-finished-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type heuristic)
   (<o> ^name single-word-response
        ^response finished)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type game-heuristics-finished-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^dialog-event.type game)
}


sp {apply*push-object-message*verbs-finished-message
   (state <s> ^name interpret-message
              ^operator <o>
              ^topstate.current-game.learning <l>)
   (<l> ^type verb)
   (<o> ^name single-word-response
        ^response finished)
-->
   (<s> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator instructor)
   (<p> ^type verbs-finished-message
        ^parameters <params>
        ^satisfaction <sat>)
   (<sat> ^dialog-event.type game)
}

##TODO
#sp {actions-finished-message*propose*finish-actions
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type actions-finished-message
#        ^parameters <param>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name finish-actions
#        ^parameter <type>
#        ^category svs)
#}

#sp {action-parameter-message*propose*learn-parameter
#   (state <s> ^interaction.stack.segment <seg>)
#   (<seg> ^purpose <p>)
#   (<p> ^type action-parameter-message
#        ^parameters.parameter <type>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name learn-parameter
#        ^category svs
#	    ^parameter <type>)
#}

##############################
# verb name handling
