sp {learn-condition*propose*index-parameter-list*a
   (state <s> ^name learn-condition
              ^a <a>)
   (<a> ^obj <objd> -^index)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-parameter-list
        ^conditions <objd>
        ^category svs)
}
sp {learn-condition*propose*index-parameter-list*b
   (state <s> ^name learn-condition
              ^a.index <inda>
              ^b <b>)
   (<b> ^obj <objd> -^index)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-parameter-list
        ^prohibit <inda>
        ^conditions <objd>
        ^category svs)
}
sp {learn-condition*propose*index-parameter-list*c
   (state <s> ^name learn-condition
              ^a.index <inda>
              ^b.index <indb>
              ^c <c>)
   (<c> ^obj <objd> -^index)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-parameter-list
        ^prohibit <inda>
        ^prohibit <indb>
        ^conditions <objd>
        ^category svs)
}

sp {learn-condition*propose*new-parameter
   (state <s> ^name learn-condition
              ^<< a b c >>  <abc>
              ^arg <arg>)
   (<abc> ^index {<arg2> > <arg>} -^index INDEF)
-->
   (<s> ^operator <o> + =)
   (<o> ^name new-parameter
        ^param <abc>
        ^new <arg2>
        ^category svs)
}
sp {learn-condition*apply*new-parameter
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^arg <arg>
              ^operator <o>)
   (<l> ^learn-link <link>)
   (<link> ^conditions <c> ^parameters <p>)
   (<abc> ^obj.type <type>)
   (<o> ^name new-parameter
        ^param <abc>
        ^new <arg2>)
-->
   (<p> ^<arg2> <parama>)
   (<c> ^<arg2> <conda>)
   (<parama> ^type <type>) 
}
sp {learn-condition*apply*new-parameter*increase-arg
   (state <s> ^name learn-condition
              ^arg <arg>
              ^topstate.current-game.learning <l>
              ^operator <o>)
   (<l> ^learn-link <link>) #^arg <arg> 
   (<link> ^conditions <c> ^parameters <p>)
   (<p> ^<arg2> <parama>)
   (<abc> ^obj.type <type>)
   (<o> ^name new-parameter
        ^param <abc>
        ^new <arg2>)
-->
   (<s> ^arg <arg> -)
   (<s> ^arg <arg2>)
}

#will not try to learn!!! todo
sp {learn-condition*apply*new-parameter*add-attributes
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^operator <o>)
   (<l> ^learn-link <link>)
   (<link> ^conditions <c> ^parameters <p>)
   (<c> ^<arg2> <conda>)
   (<abc> ^obj.word {<word> <> object <> null <> location <> block})
   (<o> ^name new-parameter
        ^param <abc>
        ^new <arg2>)
-->
   (<conda> ^attribute <atr>)
   (<atr> ^attr <cond>)
}
#deputize
sp {learn-condition*apply*new-parameter*upgrade-param-list
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^operator <o>)
   (<l> ^learn-link <link> ^param-list <pl>)
   (<pl> ^<num> <elem>)
   (<o> ^name new-parameter
        ^param <abc>
        ^new <arg2>)
   (<abc> -^param none ^param <num>)
   (<elem> ^arg INDEF)
-->
 #  (<elem> ^arg <parg> -)
   (<elem> ^arg <arg2>)
}

sp {learn-condition*apply*index-parameter-list*a
   (state <s> ^name learn-condition
              ^a <a>
              ^operator <o>)
   (<a> ^obj <objd>)
   (<o> ^name index-parameter-list
        ^param-list-num <parg>
        ^conditions <objd>
       -^index INDEF
        ^index <num>)
-->
   (<a> ^index <num>
        ^param <parg>)
}
sp {learn-condition*apply*index-parameter-list*a*INDEF
   (state <s> ^name learn-condition
              ^a <a>
              ^arg <arg>
              ^operator <o>)
   (<a> ^obj <objd>)
   (<o> ^name index-parameter-list
        ^param-list-num <parg>
        ^conditions <objd>
        ^index INDEF)
-->
   (<a> ^index (+ 1 <arg>)
        ^param <parg>)
}

sp {learn-condition*apply*index-parameter-list*bc
   (state <s> ^name learn-condition
              ^{<argc> << b c >>} <bc>
              ^operator <o>)
   (<bc> ^obj <objd>)
   (<o> ^name index-parameter-list
        ^param-list-num <parg>
        ^conditions <objd>
        ^index <num>)
-->
   (<bc> ^index <num>
        ^param <parg>)
}

sp {learn-condition*propose*store-condition*attribute
   (state <s> ^name learn-condition
              ^attr <c>
              ^a.index <inda>
              ^arg <arg>
             -^stored <c>
              ^topstate.current-game.learning <l>)
   (<l> ^type condition ^parameter <type>)# ^arg <arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-condition
        ^category svs)
}


sp {learn-condition*elaborate-interation
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^prep {<prep> <> none}
             -^prep smaller-than
             -^prep linear-with
             -^found-prep.predicate.name <prep>)
-->
   (<l> ^interaction true)
}
sp {learn-condition*elaborate*smaller-linear
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^prep {<prep> << smaller-than linear-with >>})
-->
   (<s> ^found-prep.predicate.name <prep>)
}

sp {learn-condition*propose*lookup-preposition
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^prep {<prep> <> none}
             -^prep smaller-than
             -^prep linear-with
             -^found-prep.predicate.name <prep>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-preposition
        ^interaction true
        ^category svs
        ^type <prep>)
}

#TODO check
sp {learn-condition*apply*lookup-preposition*failure
   (state <s> ^name learn-condition
              ^topstate.current-game.learning <l>
              ^prep {<prep> <> none}
             -^prep smaller-than
             -^prep linear-with
              ^operator.name lookup-preposition
              ^topstate.interaction.status <status>
              ^found-prep <fprep>)
   (<fprep> -^predicate <pre> ^type <prep>)
-->
   (<status> ^failure <f>)
   (<f> ^type index-preposition-failure
        ^preposition <prep>)
}

sp {learn-condition*elaborate-attr
   (state <s> ^name learn-condition
              ^prep none
              ^attr <cond>
              ^objd <objd>)
   (<objd> ^word object)
-->
   (<objd> ^word <cond>)
}

sp {learn-condition*propose*index-parameter
   (state <s> ^name learn-condition
              ^prep none
              ^attr <cond>
              ^topstate.current-game.learning <l>
             -^found <cond>
              ^objd <objd>)
   (<objd> ^word object ^word <cond>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-parameter 
        ^parameter <pa>)
   (<pa> ^index-info <ii> ^lexical <objd> ^type object)
   (<ii> ^infer-match false ^return-all false ^use-interaction true)
   (<l> ^interaction true)
}

#TODO check if broken
sp {learn-condition*apply*index-parameter
   (state <s> ^name learn-condition
              ^attr <cond>
              ^operator <o>)
   (<o> ^name index-parameter
        ^parameter.lexical.word <cond>
        ^parameter.result.id <id>)
-->
   (<s> ^found <cond>)
}
sp {learn-condition*apply*store-condition*attr
   (state <s> ^name learn-condition
              ^prep none
              ^topstate <ts>
              ^arg <arg>
              ^found <cond>
              ^a.index <inda>
              ^attr <cond>
              ^operator.name store-condition)
   (<ts> ^current-game <cg>)
   (<cg> ^name <gname> ^learning <l>)
   (<l> ^learn-link <link>)#^arg <arg>
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <p>)
   (<c> ^<inda> <conda>)
-->
   (<s> ^stored <cond>)
   (<conda> ^attribute <atr>)
   (<atr> ^attr <cond>)
}



sp {learn-condition*propose*store-condition*relation
   (state <s> ^name learn-condition
              ^a.index <inda>
              ^b.index <indb>
              ^arg <arg>
             -^c
             -^stored 
              ^topstate.current-game.learning <l>)
   (<l> ^type condition ^parameter <type>)#^arg <arg>
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-condition
        ^category svs)
}
sp {learn-condition*propose*store-condition*linear
   (state <s> ^name learn-condition
              ^a.index <inda>
              ^b.index <indb>
              ^c.index <indc>
              ^arg <arg>
             -^stored 
              ^topstate.current-game.learning <l>)
   (<l> ^type condition ^parameter <type>)#^arg <arg>
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-condition
        ^category svs)
}


#TODO uhhh indexb
sp {learn-condition*apply*store-condition*prep*INDEF
   (state <s> ^name learn-condition
              ^a.index <inda>
              ^b <b>
             -^c
              ^arg <arg>
              ^topstate <ts>
              ^negative <val>
              ^found-prep.predicate.name <prep>
              ^prep {<prep> <> none}
              ^operator.name store-condition)
   (<b> ^index INDEF) #^obj.type <cond>
   (<ts> ^current-game <cg>)
   (<cg> ^name <gname> ^learning <l>)
   (<l> ^learn-link <link> ^param-list-num <num>)#^arg <arg> 
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <pa>)
   (<c> ^cond <conda>)
-->
   (<s> ^stored <inda>)
   (<conda> ^prep <p>)
   (<p> ^name <prep> ^a <inda> ^paramb <num> ^negative <val>)# ^btype <cond>)#^b INDEF
}

sp {learn-condition*apply*store-condition*prep*arg
   (state <s> ^name learn-condition
              ^topstate <ts>
              ^a.index <inda>
              ^b.index <indb>
             -^b.index INDEF
             -^c
              ^arg <arg> 
              ^negative <val>
              ^found-prep.predicate.name <prep>
              ^prep {<prep> <> none}
              ^operator.name store-condition)
   (<ts> ^current-game <cg>)
   (<cg> ^name <gname> ^learning <l>)
   (<l> ^learn-link <link>)#^arg <arg> 
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <pa>)
   (<c> ^cond <conda>)
-->
   (<s> ^stored <inda>)
   (<conda> ^prep <p>)
   (<p> ^name <prep> ^a <inda> ^b <indb> ^negative <val>)# ^btype <cond>)
}

#todo handle indef args on linear
sp {learn-condition*apply*store-condition*prep*arg*linear
   (state <s> ^name learn-condition
              ^topstate <ts>
              ^negative <val>
              ^a.index <inda>
              ^b.index <indb>
              ^c.index <indc>
             -^b.index INDEF
             -^c.index INDEF
              ^arg <arg> 
            #  ^spec none
              ^found-prep.predicate.name <prep>
              ^prep {<prep> <> none}
              ^operator.name store-condition)
   (<ts> ^current-game <cg>)
   (<cg> ^name <gname> ^learning <l>)
   (<l> ^learn-link <link>)#^arg <arg> 
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <pa>)
#   (<c> ^<arg> <conda>)
   (<c> ^cond <conda>)
-->
   (<s> ^stored <inda>)
   (<conda> ^prep <p>)
   (<p> ^name <prep> ^a <inda> ^b <indb> ^c <indc> ^negative <val> ^btype location)#for now only support linear with locations
}

sp {learn-condition*propose*find-something
   (state <s> ^name learn-condition
              ^stored <c>
              ^arg <arg> 
              ^topstate.current-game.learning <l>)
   (<l> ^learn-link <link>)# ^arg <arg>)
   (<link> ^conditions.<arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-something
        ^category svs)
}

sp {learn-condition*apply*find-something*push-on-param-list
   (state <s> ^name learn-condition
              ^stored <c>
              ^a <a>
              ^b <b>
             -^c
              ^operator.name find-something
              ^topstate.io.output-link <out>
              ^topstate.current-game.learning <l>)
   (<l> ^param-list-num <num> ^param-list <pl>)
   (<a> ^index <inda> ^obj.type <type>)
   (<b> ^index <indb> ^obj.type <type2>)
-->
   (<l> ^param-list-num <num>  -)
   (<l> ^param-list-num (+ 2 <num>))
   (<pl> ^<num> <pb>
         ^(+ 1 <num>) <pa>)
   (<pb> ^arg <indb> ^type <type2>)
   (<pa> ^arg <inda> ^type <type>)
}
sp {learn-condition*apply*find-something*push-on-param-list*3arg
   (state <s> ^name learn-condition
              ^stored <c>
              ^a <a>
              ^b <b>
              ^c <c1>
              ^operator.name find-something
              ^topstate.io.output-link <out>
              ^topstate.current-game.learning <l>)
   (<l> ^param-list-num <num> ^param-list <pl>)
   (<a> ^index <inda> ^obj.type <type>)
   (<b> ^index <indb> ^obj.type <type2>)
   (<c1> ^index <indc> ^obj.type <type3>)
-->
   (<l> ^param-list-num <num>  -)
   (<l> ^param-list-num (+ 3 <num>))
   (<pl> ^<num> <pc>
         ^(+ 1 <num>) <pb>
         ^(+ 2 <num>) <pa>)
   (<pc> ^arg <indc> ^type <type3>)
   (<pb> ^arg <indb> ^type <type2>)
   (<pa> ^arg <inda> ^type <type>)
}
sp {learn-condition*apply*find-something*remove-interaction
   (state <s> ^name learn-condition
              ^stored <c>
              ^arg <arg> 
              ^operator.name find-something
              ^topstate.io.output-link <out>
              ^topstate.current-game.learning <l>)
   (<l> ^interaction <t> ^learn-link <link>)#^arg <arg> 
   (<link> ^conditions.<arg>)
-->
   (<l> ^interaction <t> -)
}
sp {learn-condition*apply*find-something*remove-INDEFarg
   (state <s> ^name learn-condition
              ^stored <c>
              ^arg <arg> 
              ^<< a b c >> <abc>
              ^operator.name find-something
              ^topstate.io.output-link <out>
              ^topstate.current-game.learning <l>)
   (<l> ^learn-link <link> ^param-list <pl>)
   (<pl> ^<num> <elem>)
   (<abc> -^param none ^param <num>)
   (<elem> ^arg {<parg> INDEF})
-->
   (<elem> ^arg <parg> -)
#   (<elem> ^arg <arg2>)
}
sp {learn-condition*apply*find-something
   (state <s> ^name learn-condition
              ^stored <c>
              ^arg <argnew>
              ^operator.name find-something
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type <t> ^arg <arg> ^learn-link <link>)
   (<link> ^conditions.<arg>)
-->
   (<l> ^arg <arg> -)
   (<l> ^arg <argnew>)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-condition
          ^fields <f>)
   (<f> ^type <t>)
   (<status> ^performed.dialog-event.type game)
}
