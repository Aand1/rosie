sp {learn-parameter*propose*store-parameter
   (state <s> ^name learn-parameter
              ^parameter <p>
              ^topstate.current-game <cg>)
   (<cg> ^learning <l>)
   (<l> ^type parameter ^arg <arg> ^learn-link <link>)
   (<link> -^parameters.<arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-parameter
        ^category svs)
}

sp {learn-parameter*apply*store-parameter
   (state <s> ^name learn-parameter
              ^parameter <pname>
             -^parameter either
              ^topstate <ts>
              ^operator.name store-parameter)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^name <gname>)
   (<l> ^arg <arg> ^learn-link <link>)
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <p>)
-->
   (<p> ^<arg> <parama>)
   (<c> ^<arg> <conda>)
   (<parama> ^type <pname>)
}

sp {learn-parameter*apply*store-parameter*either
   (state <s> ^name learn-parameter
              ^parameter either
              ^topstate <ts>
              ^operator.name store-parameter)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^name <gname>)
   (<l> ^arg <arg> ^learn-link <link>)
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <p>)
-->
   (<p> ^<arg> <parama>)
   (<c> ^<arg> <conda>)
   (<parama> ^type location ^type block ^both true)
}


##handle a red clear block, a green object here
sp {learn-parameter*propose*index-parameter
   (state <s> ^name learn-parameter
              ^topstate.current-game.learning <l>
             -^found objects
              ^object-desc <objd>)
   (<l> ^learn-link <link> ^arg <arg>)
   (<link> ^parameters.<arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-parameter 
        ^parameter <pa>)
   (<pa> ^index-info <ii> ^lexical <objd> ^type object)
   (<ii> ^infer-match false ^return-all true ^use-interaction true)
   (<l> ^interaction true)
}

sp {learn-parameter*apply*index-parameter
   (state <s> ^name learn-parameter
              ^topstate.current-game.learning <l>
              ^object-desc.word {<cond> <> block <> location <> object}
              ^operator <o>)
   (<l> ^learn-link <link> ^arg <arg>)
   (<link> ^conditions.<arg> <conds>)
   (<o> ^name index-parameter
        ^parameter.result-info)
-->
   (<s> ^found objects)
   (<conds> ^attribute.attr <cond>)
}
sp {learn-parameter*apply*index-parameter*default
   (state <s> ^name learn-parameter
              ^topstate.current-game.learning <l>
              ^object-desc.word object
              ^operator <o>)
   (<l> ^learn-link <link> ^arg <arg>)
   (<link> ^conditions.<arg> <conds>)
   (<o> ^name index-parameter
        ^parameter.result-info)
-->
   (<s> ^found objects)
}



sp {learn-parameter*propose*find-condition
   (state <s> ^name learn-parameter
              ^parameter <pname>
              ^topstate.current-game.learning <l>)
   (<l> ^learn-link <link> ^arg <arg>)
   (<link> ^parameters.<arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-condition
        ^category svs)
}
sp {learn-parameter*apply*find-condition*remove-interaction
   (state <s> ^name learn-parameter
              ^operator.name find-condition
              ^topstate.current-game.learning <l>)
   (<l> ^interaction <t> ^arg <arg> ^learn-link <link>)
   (<link> ^parameters.<arg>)
-->
   (<l> ^interaction <t> -)
}
sp {learn-parameter*apply*find-condition*remove-interaction
   (state <s> ^name learn-parameter
              ^operator.name find-condition
              ^topstate.current-game.learning <l>)
   (<l> ^interaction <t> ^arg <arg> ^learn-link <link>)
   (<link> ^parameters.<arg>)
-->
   (<l> ^interaction <t> -)
}

sp {learn-parameter*apply*find-condition
   (state <s> ^name learn-parameter
              ^parameter <pname>
              ^operator.name find-condition
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type <t> ^arg <arg> ^learn-link <link>)
   (<link> ^parameters.<arg>)
-->
   (<l> ^type <t> -)
   (<l> ^type condition ^parameter <pname>)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-condition
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}

sp {finish-parameters*propose*flush-out-conditions
   (state <s> ^name finish-parameters
              ^topstate.current-game <cg>
              ^topstate.current-game.learning.learn-link <link>)
   (<link> ^conditions.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.prep <p>)
   (<p> -^btype)
-->
   (<s> ^operator <o> + =)
   (<o> ^name flush-out-conditions
       ^category svs)
}
sp {finish-parameters*apply*flush-out-conditions
   (state <s> ^name finish-parameters
              ^topstate.current-game <cg>
              ^operator.name flush-out-conditions
              ^topstate.current-game.learning <l>)
   (<l> ^learn-link <link>)
   (<link> ^conditions.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.prep <p>)
   (<p> -^btype ^b <arg2>)
   (<link> ^parameters.<arg2>.type <btype>)
-->
   (<p> ^btype <btype>)
}
   
sp {finish-parameters*send-message*next-action
   (state <s> ^name finish-parameters
              ^topstate.interaction.status <status>
              ^topstate.current-game <cg>
              ^topstate.io.output-link <out>
              ^topstate.current-game.learning <l>)
   (<l> ^type {<cond> << parameter >>} ^arg <arg> ^action-number <num> ^learn-link <link>)
 -{(<link> ^conditions.{<argdfs> << 1 2 3 4 5 6 7 8 9 10 >>}.prep <p>)
    (<p> -^btype)}
-->
   (<l> ^type <cond> -)
   (<l> ^type verb
        ^verb-num 1)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-verb
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
   #hobo
#   (<l> ^type <cond> -)
#   (<l> ^arg <arg> -)
#   (<l> ^action-number <num> -)
#   (<link> ^cond-args (- <arg> 1))
#   (<l> ^type action ^action-number (+ <num> 1))
#   (<out> ^send-message <msg>)
#   (<msg> ^type game-new-action2
#          ^fields <f>)
#   (<status> ^performed.dialog-event.type game)
}

#for goals you are done, dont send another message
sp {finish-parameters*propose*finish-goals
   (state <s> ^name finish-parameters
             -^topstate.current-game.game.failures
              ^topstate.current-game.game.goals
              ^topstate.current-game.learning <l>)
   (<l> ^arg <arg> -^action-number <num> ^learn-link <link>)
 -{(<link> ^conditions.{<argasdf> << 1 2 3 4 5 6 7 8 9 10 >>}.prep <p>)
    (<p> -^btype)}
-->
   (<link> ^goal-cond-args (- <arg> 1))
   (<s> ^operator <o> +)
   (<o> ^name finish-goals
        ^category svs)
}
#for failures you are done, dont send another message
sp {finish-parameters*propose*finish-failures
   (state <s> ^name finish-parameters
              ^topstate.current-game.game.failures
              ^topstate.current-game.learning <l>)
   (<l> ^arg <arg> -^action-number <num> ^learn-link <link>)
 -{(<link> ^conditions.{<argasdf> << 1 2 3 4 5 6 7 8 9 10 >>}.prep <p>)
    (<p> -^btype)}
-->
   (<link> ^failure-cond-args (- <arg> 1))
   (<s> ^operator <o> +)
   (<o> ^name finish-failures
        ^category svs)
}




