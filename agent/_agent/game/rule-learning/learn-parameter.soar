sp {chunk-1*d1677*opnochange*1
:chunk
   (state <s> ^game-name tic-tac-toe 
              ^name find-parameters)
-->
   (<pie> ^1 <pie1> ^2 <pie2>)
 (<pie1> ^name my-piece ^concept <pcond1>)
 (<pie2> ^name my-piece ^concept <pcond2>)
 (<pcond1> ^attribute <patr1>)
 (<pcond2> ^attribute <patr2>)
 (<patr1> ^attr blue)
 (<patr2> ^attr red)
 
 (<A> ^1 <ac1> ^type action)
 
 (<ac1> ^action-name place ^name place ^conditions <c> ^parameters <p> ^verbs <verbs> ^cond-args 2)
 (<p> ^1 <parama> ^2 <paramb>)
 (<parama> ^type block)
 (<paramb> ^type location)
 (<c> ^1 <conda> ^2 <condb> ^cond <newconds1>)
 (<newconds1> ^prep <prep3> ^prep <prep4> ^prep <prep5>)
 (<conda> ^concept <atr3>) #^prep <prep3> ^prep <prep4> 
# (<condb> ^prep <prep5>)
 (<atr3> ^name my-piece)
 #(<atr3> ^attr blue)
 (<prep3> ^name on ^a 1 ^b INDEF ^negative true ^btype location)
 (<prep4> ^name below ^a 1 ^b INDEF ^negative true ^btype block)
 (<prep5> ^name below ^a 2 ^b INDEF ^negative true ^btype block)
 
 (<verbs> ^1 <va>)
 (<va> ^verb-name move ^verb-prep on ^1 1 ^2 2)
 
 (<fail> ^1 <fail1> ^type failure)
 (<go> ^1 <go1> ^type goal)   
   
 (<fail1> ^name none ^parameters <paf> ^conditions <cof> ^cond-args 0)
 (<go1> ^goal-name three-in-arow ^name three-in-arow ^parameters <pa> ^conditions <co> ^cond-args 6)

 (<pa> ^1 <param1> ^2 <param2> ^3 <param3> ^4 <param4> ^5 <param5> ^6 <param6>)
 (<param1> ^type block)
 (<param2> ^type block)
 (<param3> ^type block)
 (<param4> ^type location)
 (<param5> ^type location)
 (<param6> ^type location)
 (<co> ^1 <cond1> ^2 <cond2> ^3 <cond3> ^4 <cond4> ^5 <cond5> ^6 <cond6> ^cond <newconds2>)
 (<newconds2> ^prep <prepa1> ^prep <prepb1> ^prep <prepc1> ^prep <prepa2>)
 (<cond1> ^concept <atra>) # ^prep <prepa1> 
 (<cond2> ^concept <atrb>) # ^prep <prepb1> 
 (<cond3> ^concept <atrc>) # ^prep <prepc1> 
# (<cond4> ^prep <prepa2>)
# (<atra> ^attr blue)
# (<atrb> ^attr blue)
# (<atrc> ^attr blue)
 (<atra> ^name my-piece)
 (<atrb> ^name my-piece)
 (<atrc> ^name my-piece)
 (<prepa1> ^name on ^a 1 ^b 4 ^negative false ^btype location)
 (<prepb1> ^name on ^a 2 ^b 5 ^negative false ^btype location)
 (<prepc1> ^name on ^a 3 ^b 6 ^negative false ^btype location)
 (<prepa2> ^name linear-with ^a 4 ^b 5 ^c 6 ^negative false ^btype location)
    
    (<s> ^actions <A> ^failures <fail> ^goals <go> ^player-args <pp1>
           ^player-pieces <pie>
           ^current-player 1
            ^multiplayer true
           ^heuristics <h777>)
    (<pp1> ^1 <aa1> ^2 <aa2> ^current 1)
    (<aa1> ^action-args <a1> ^failure-args <f1> ^goal-args <g1> ^num 1)
    (<aa2> ^action-args <a2> ^failure-args <f2> ^goal-args <g2> ^num 2)
    (<a1> ^type action ^num 1)
    (<f1> ^type failure ^num 1)
    (<g1> ^type goal ^num 1)
    (<a2> ^type action ^num 2)
    (<f2> ^type failure ^num 2)
    (<g2> ^type goal ^num 2)
}


sp {learn-parameter*propose*store-parameter
   (state <s> ^name learn-parameter
              ^parameter <p>
              ^arg <arg>
              ^topstate.current-game <cg>)
   (<cg> ^learning <l>)
   (<l> ^learn-link <link>)#^type parameter 
   (<link> -^parameters.<arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name store-parameter
        ^category svs)
}

sp {learn-parameter*apply*store-parameter
   (state <s> ^name learn-parameter
              ^parameter <pname>
             -^parameter either
              ^arg <arg>
              ^topstate <ts>
              ^operator.name store-parameter)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^name <gname>)
   (<l>  ^learn-link <link>)
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <p>)
-->
   (<p> ^<arg> <parama>)
   (<c> ^<arg> <conda>)
   (<parama> ^type <pname>)
}

sp {learn-parameter*apply*store-parameter*either
   (state <s> ^name learn-parameter
              ^parameter either
              ^arg <arg> 
              ^topstate <ts>
              ^operator.name store-parameter)
   (<ts> ^current-game <cg>)
   (<cg> ^learning <l> ^name <gname>)
   (<l> ^learn-link <link>)
   (<cg> ^game <g>)
   (<g> ^game-name <gname>)
   (<link> ^conditions <c> ^parameters <p>)
-->
   (<p> ^<arg> <parama>)
   (<c> ^<arg> <conda>)
   (<parama> ^type location ^type block ^both true)
}


##handle a red  block, a green object here
sp {learn-parameter*propose*index-parameter
   (state <s> ^name learn-parameter
              ^topstate.current-game.learning <l>
             -^found objects
              ^arg <arg> 
              ^object-desc <objd>)
   (<l> ^learn-link <link>)
   (<link> ^parameters.<arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name index-parameter 
        ^parameter <pa>)
   (<pa> ^index-info <ii> ^lexical <objd> ^type object)
   (<ii> ^infer-match false ^return-all true ^use-interaction true)
   (<l> ^interaction true)
}

sp {learn-parameter*apply*index-parameter
   (state <s> ^name learn-parameter
              ^arg <arg> 
              ^topstate.current-game.learning <l>
              ^object-desc.word {<cond> <> block <> location <> object}
              ^operator <o>)
   (<l> ^learn-link <link>)# ^arg <arg>)
   (<link> ^conditions.<arg> <conds>)
   (<o> ^name index-parameter
        ^parameter.result-info)
-->
   (<s> ^found objects)
   (<conds> ^attribute.attr <cond>)
}
sp {learn-parameter*apply*index-parameter*default
   (state <s> ^name learn-parameter
              ^arg <arg> 
              ^topstate.current-game.learning <l>
              ^object-desc.word object
              ^operator <o>)
   (<l> ^learn-link <link>)# ^arg <arg>)
   (<link> ^conditions.<arg> <conds>)
   (<o> ^name index-parameter
        ^parameter.result-info)
-->
   (<s> ^found objects)
}



sp {learn-parameter*propose*find-condition
   (state <s> ^name learn-parameter
              ^parameter <pname>
              ^arg <arg> 
              ^topstate.current-game.learning <l>)
   (<l> ^learn-link <link>)# ^arg <arg>)
   (<link> ^parameters.<arg>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name find-condition
        ^category svs)
}
sp {learn-parameter*apply*find-condition*remove-interaction
   (state <s> ^name learn-parameter
              ^arg <arg>
              ^operator.name find-condition
              ^topstate.current-game.learning <l>)
   (<l> ^interaction <t> ^learn-link <link>)
   (<link> ^parameters.<arg>)
-->
   (<l> ^interaction <t> -)
}

sp {learn-parameter*apply*find-condition*push-on-param-list
   (state <s> ^name learn-parameter
              ^parameter <type>
              ^arg <arg>
              ^operator.name find-condition
              ^topstate.current-game.learning <l>)
   (<l> ^param-list-num <num> ^param-list <pl>)# ^arg <arg>)
-->
   (<l> ^param-list-num <num>  -)
   (<l> ^param-list-num (+ 1 <num>))
   (<pl> ^<num> <pa>)
   (<pa> ^arg <arg> ^type <type>)
}
#sp {learn-parameter*apply*find-condition*remove-interaction
#   (state <s> ^name learn-parameter
#              ^operator.name find-condition
#              ^topstate.current-game.learning <l>)
#   (<l> ^interaction <t> ^arg <arg> ^learn-link <link>)
#   (<link> ^parameters.<arg>)
#-->
#   (<l> ^interaction <t> -)
#}

#TODO change either to object
sp {learn-parameter*apply*find-condition
   (state <s> ^name learn-parameter
              ^parameter <pname>
              ^arg <arg>
              ^operator.name find-condition
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game.learning <l>)
   (<l> ^type <t> ^learn-link <link> ^arg <argold>)
   (<link> ^parameters.<arg>)
-->
   (<l> ^type <t> -)
   (<l> ^arg <argold> -)
   (<l> ^arg <arg>)
   (<l> ^type condition)#^parameter <pname>)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-condition
          ^fields <f>)
   (<f> ^type <pname>)
   (<status> ^performed.dialog-event.type game)
}

sp {finish-parameters*propose*flush-out-conditions
   (state <s> ^name finish-parameters
              ^topstate.current-game <cg>
              ^topstate.current-game.learning.learn-link <link>)
   (<link> ^conditions.cond.prep <p>)
   (<p> -^btype)
-->
   (<s> ^operator <o> + =)
   (<o> ^name flush-out-conditions
       ^category svs)
}
sp {finish-parameters*apply*flush-out-conditions
   (state <s> ^name finish-parameters
              ^topstate.current-game <cg>
              ^operator.name flush-out-conditions
              ^topstate.current-game.learning <l>)
   (<l> ^learn-link <link>)
   (<link> ^conditions.cond.prep <p>)
   (<p> -^btype ^b <arg2>)
   (<link> ^parameters.<arg2>.type <btype>)
-->
   (<p> ^btype <btype>)
}
sp {finish-parameters*apply*flush-out-conditions*paramb
   (state <s> ^name finish-parameters
              ^topstate.current-game <cg>
              ^operator.name flush-out-conditions
              ^topstate.current-game.learning <l>)
   (<l> ^learn-link <link> ^param-list.<arg2> <pl>)
   (<link> ^conditions.cond.prep <p>)
   (<p> -^btype ^paramb <arg2>)
   (<pl> ^type <btype> ^arg <barg>)
  # (<link> ^parameters.<arg2>.type <btype>)
-->
   (<p> ^paramb <arg2> -)
   (<p> ^btype <btype> ^b <barg>)
}
   
sp {finish-parameters*send-message*next-action
   (state <s> ^name finish-parameters
              ^topstate.interaction.status <status>
              ^topstate.current-game <cg>
              ^topstate.io.output-link <out>
              ^topstate.current-game.learning <l>)
   (<l> ^type {<cond> << parameter >>} ^action-number <num> ^learn-link <link>)
   (<link> ^action-name <aname>)
 -{(<link> ^conditions.cond.prep <p>)
    (<p> -^btype)}
-->
   (<l> ^type <cond> -)
   (<l> ^type verb
        ^verb-num 1)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-verb
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
   #hobo
#   (<l> ^type <cond> -)
#   (<l> ^arg <arg> -)
#   (<l> ^action-number <num> -)
#   (<link> ^cond-args (- <arg> 1))
#   (<l> ^type action ^action-number (+ <num> 1))
#   (<out> ^send-message <msg>)
#   (<msg> ^type game-new-action2
#          ^fields <f>)
#   (<status> ^performed.dialog-event.type game)
}

#for goals send another message
sp {finish-parameters*propose*finish-goals*send-message
   (state <s> ^name finish-parameters
              ^topstate.interaction.status <status>
              ^topstate.io.output-link <out>
#             -^topstate.current-game.game.failures
#              ^topstate.current-game.game.goals
              ^topstate.current-game.learning <l>)
   (<l> ^arg <arg> ^type <t> ^learn-link <link> ^goal-number <num> ^param-list <pl> ^param-list-num <pnum>)
   (<link> ^goal-name <gname>)
 -{(<link> ^conditions.cond.prep <p>)
    (<p> -^btype)}
-->
   (<link> ^cond-args (- <arg> 1))
   (<l> ^goal-number <num> -)
   (<l> ^type <t> -)
   (<l> ^param-list <pl> -)
   (<l> ^param-list-num <pnum> -)
   (<l> ^arg <arg> -)
   (<l> ^goal-number (+ <num> 1))
   (<l> ^type game-params)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-params
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
#   (<s> ^operator <o> +)
#   (<o> ^name finish-goal
#        ^category svs)
}

sp {finish-parameters*propose*finish-failures*send-message
   (state <s> ^name finish-parameters
              ^topstate.interaction.status <status>
              ^topstate.io.output-link <out>
#              ^topstate.current-game.game.failures
              ^topstate.current-game.learning <l>)
   (<l> ^arg <arg> ^type <t> ^learn-link <link> ^failure-number <num> ^param-list <pl> ^param-list-num <pnum>)
  (<link> ^failure-name <fname>)
 -{(<link> ^conditions.cond.prep <p>)
    (<p> -^btype)}
-->
   (<link> ^cond-args (- <arg> 1))
   (<l> ^failure-number <num> -)
   (<l> ^type <t> -)
   (<l> ^param-list <pl> -)
   (<l> ^param-list-num <pnum> -)
   (<l> ^arg <arg> -)
   (<l> ^failure-number (+ <num> 1)
        ^type game-params)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-params
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
#   (<s> ^operator <o> +)
#   (<o> ^name finish-failure
#        ^category svs)
}

sp {finish-game-params*send-message*heuristics
   (state <s> ^name finish-game-params
              ^topstate.io.output-link <out>
              ^topstate.interaction.status <status>
              ^topstate.current-game <cg>)
   (<cg> ^learning <l> ^game <g>)
   (<l> ^type <t> )
-->
   (<l> ^type <t> -)
   (<l> ^type heuristic)
   (<out> ^send-message <msg>)
   (<msg> ^type game-new-heuristic
          ^fields <f>)
   (<status> ^performed.dialog-event.type game)
}




