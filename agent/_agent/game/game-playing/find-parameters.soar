sp {find-parameters*elaborate*copy-down-attrs
   (state <s> ^name find-parameters
              ^superstate.operator <o>)
   (<o> ^game-name <name>)
-->
   (<s> ^desired <d> ^game-name <name> ^action-args <aa> ^failure-args <fa> ^goal-args <ga> 
        ^depth-limit 4 ^dcount 0)
   (<d> ^found true)
   (<aa> ^type action)
   (<fa> ^type failure)
   (<ga> ^type goal)
}

sp {find-parameters*impasse*elaborate
   (state <s> ^superstate.name find-parameters
             -^superstate.name evaluate-operator
             -^superstate.valid-arg
             -^superstate.actions
              ^impasse no-change)
-->
 #  (interrupt)
   (force-learn <s>)
   (<s> ^name find-parameters-impasse)
}

sp {find-parameters-impasse*propose*lookup-game
   (state <s> ^name find-parameters-impasse
              ^superstate <ss>)
   (<ss> ^game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name lookup-game
        ^category svs 
        ^game-name <name>)
}

sp {find-parameters-impasse*elaborate*conditions-parameters
   (state <s> ^name find-parameters-impasse
              ^game <g>
              ^superstate <ss>)
   (<ss> ^game-name <name>)
   (<g> ^game-name <name> ^actions <a> ^goals <go> ^failures <f>)
#   (<go> ^goal-cond-args <ga>)
#   (<f> ^failure-cond-args <fa>)
-->
   (<ss> ^actions <a> ^failures <f> ^goals <go>)# ^goal-cond-args <ga> ^failure-cond-args <fa>)
   (<a> ^type action)
   (<f> ^type failure)
   (<go> ^type goal)
}

sp {find-parameters-impasse*elaborate*conditions-parameters*multiplayer
   (state <s> ^name find-parameters-impasse
              ^game <g>
              ^superstate <ss>)
   (<ss> ^game-name <name>)
   (<g> ^game-name <name> ^actions <a> ^goals <go> ^failures <f> ^multiplayer <m>)
#   (<go> ^goal-cond-args <ga>)
#   (<f> ^failure-cond-args <fa>)
-->
   (<ss> ^multiplayer <m>)
}


#### parameter match here for all
sp {find-parameters*propose*parameter-match
   (state <s> ^name find-parameters
              ^dcount 0
              ^goal-args <ga>
              ^action-args <aa>
             -^parameter-match complete
              ^failure-args <fa>
              ^goals <g>
              ^failures <f>
              ^actions <a>)
-->
   (<s> ^operator <o> +)
   (<o> ^name parameter-match
        ^action-args <aa>
        ^action-param <a>
        ^failure-args <fa>
        ^failure-param <f>
        ^goal-args <ga>
        ^goal-param <g>)
}
#copy all relationships

#TODO dont assume that all prepositions are extracted on top state
#### parameter match here for all
sp {find-parameters*propose*copy-relationships
   (state <s> ^name find-parameters
              ^dcount 0
             -^relationships.relations
              ^parameter-match complete)
-->
   (<s> ^operator <op> + =)
   (<op> ^category svs
        ^name copy-rels)
}
sp {find-parameters*propose*delete-duplicates
   (state <s> ^name find-parameters
              ^dcount 0
             -^deleted true
              ^parameter-match complete)
-->
#   (interrupt)
   (<s> ^operator <op> + =)
   (<op> ^category svs
        ^name delete-duplicates)
}

#fuck fix this
sp {find-parameters*elaborate*right-handside-relations
   (state <s> ^name find-parameters
              ^dcount 0
#              ^topstate.found-prep <fprep>
              ^operator <op>
              ^<< action-args failure-args goal-args >> <aa>
              ^parameter-match complete)
   (<aa> ^{<n> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^obj <obj> ^cond <cond>)
#   (<fprep> ^type <name>)
   (<cond> ^prep <prep>)
   (<obj> ^id <id>)
   (<prep> ^name <name>)
   (<op> ^name copy-rels)
# -{(<s> ^relationships <rels2>)
#   (<rels2> ^with <id> ^preposition <name>)}
-->
   (<s> ^relationships <rels>)
   (<rels> ^with <id> ^preposition <name>)
}

sp {find-parameters*apply*copy-rels
   (state <s> ^name find-parameters
              ^operator <o>
              ^topstate.prepositions.<< prep2 prep >> <p>
              ^relationships <rels>)
   (<rels> ^with <id> ^preposition <name>
           -^preposition << linear-with >>)
   (<p> ^name <name> ^pair <pair>)
   (<pair> ^a <id> ^b <id2>)
   (<o> ^name copy-rels)
-->
   (<rels> ^relations <r>)
   (<r> ^name <name> ^obj <id2> ^matched true) 
}

sp {find-parameters*apply*delete-duplicates
   (state <s> ^name find-parameters
              ^dcount 0
              ^relationships <rels>
              ^relationships {<rels2> < <rels>}
              ^operator <op>)
   (<op> ^name delete-duplicates)
   (<rels> ^with <id> ^preposition <name>)
   (<rels2> ^with <id> ^preposition <name>)
-->
   (<s> ^relationships <rels> -)
}
sp {find-parameters*apply*delete-duplicates2
   (state <s> ^name find-parameters
              ^dcount 0
              ^operator <op>)
   (<op> ^name delete-duplicates)
-->
   (<s> ^deleted true)
}

sp {find-parameters*apply*copy-rels*linear
   (state <s> ^name find-parameters
              ^operator <o>
              ^topstate.prepositions.prep2 <p>
              ^relationships <rels>)
   (<rels> ^with <id> ^preposition {<name> << linear-with >>})
   (<p> ^name <name> ^pair <pair>)
   (<pair> ^a <id> ^b <id2> ^c <id3>)
   (<o> ^name copy-rels)
-->
   (<rels> ^relations <r>)
   (<r> ^name <name> ^obj1 <id2> ^obj2 <id3> ^matched true) 
}


sp {find-parameters*propose*constraint-match
   (state <s> ^name find-parameters
             -^processing wait
             -^matches-found.action
              ^parameter-match complete
              ^action-args <aa>)
-->
   (<s> ^operator <o> +)
   (<o> ^name constraint-match
        ^param-args <aa>)
}
sp {find-parameters*propose*select-parameters
   (state <s> ^name find-parameters
              ^matches-found.action true
              ^action-args.parameter-match-set <pms>
              ^parameter-match complete
              ^action-args.<arg0>.verbs <verbs>)
   (<pms> ^argnum <arg0>)
-->
#   (interrupt)
   (<s> ^operator <o> + ) # force tie
   (<o> ^name select-parameters
        ^arg1 1 # HACK shouldnt assume first two conditions are for action
        ^arg2 2 #TODO multi action-remove
        ^action <arg0>
        ^verbs <verbs>
        ^possible-match-set <pms>
        ^category svs)
}




sp {find-parameters*elaborate*problem-space
   (state <s> ^name find-parameters)
-->
   (<s> ^problem-space <p>)
   (<p> ^name find-parameters
        ^default-state-copy yes
        ^two-level-attributes relationships #found-prep #failure-found-possible goal-found-possible#goal-args # found-possible
        ^one-level-attributes depth-limit multiplayer parameter-match)#goal-cond-args failure-cond-args multiplayer)
}
#
#
### NO ACTIONS LEFT
sp {find-parameters*propose*complete-find-parameter-failed
   (state <s> ^name find-parameters
              ^matches-found.action
              ^parameter-match complete)
#             -^processing wait)
-{(<s> ^dcount 0 ^multiplayer true)}
-->
   (<s> ^operator <o> + ) 
   (<o> ^name complete-find-parameter-failed
        ^category svs)
}
sp {find-parameters*propose*complete-find-parameter-failed2
#   :interrupt
   (state <s> ^name find-parameters
              -^matches-found.action
               ^dcount <dc>
               ^depth-limit <dc>
               ^matches-found.goal false
              ^parameter-match complete)
#             -^processing wait)
-{(<s> ^dcount 0 ^multiplayer true)}
-->
   (<s> ^operator <o> + ) 
   (<o> ^name complete-find-parameter-failed
        ^category svs)
}
#
sp {find-parameters*apply*complete-find-parameter-failed*sub
   (state <s> ^name find-parameters
              ^desired <d>
             -^multiplayer true
             -^dcount 0
              ^operator.name complete-find-parameter-failed)
-->
#   (interrupt)
   (<s> ^partial-failure <d>) #TODO mark failure?
}


sp {find-parameters*apply*complete-find-parameter-failed*multiplayer-evaluate
#   :interrupt
   (state <s> ^name find-parameters
              ^multiplayer true
              ^superstate.superstate <sss>
              ^goal-args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.goal-possible-match.{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} <yid>
              ^superstate.operator.superoperator <o>
              ^desired <d>
             -^dcount 0
              ^operator.name complete-find-parameter-failed)
   (<sss> ^operator <o> +)
-->
#   (interrupt)
   (<s> ^indifferent <d>)
   (<sss> ^operator <o> = 1.0)
}


sp {find-parameters*apply*complete-find-parameter-failed*top
   (state <s> ^name find-parameters
              ^desired <d>
              ^dcount 0
              ^depth-limit {<dc> < 13}
              ^operator.name complete-find-parameter-failed)
-->
   (interrupt)
   (<s> ^depth-limit (+ <dc> 1)) 
   (<s> ^depth-limit <dc> -)
}

sp {find-parameters*apply*complete-find-parameter-failed*multiplayer
   (state <s> ^name find-parameters
              ^multiplayer true
              ^desired <d>
              ^dcount 0
              ^depth-limit {<dc> < 13}
              ^operator <o>)
   (<o> ^name complete-find-parameter-failed)
-->
#   (interrupt)
   (<s> ^operator <o> <)
}

#order preferences
sp {selection*prefer*evaluate*select-parameters*over*complete-find-parameter-failed
   (state <s> ^name selection
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name evaluate-operator ^superoperator.name select-parameters)
   (<o2> ^name evaluate-operator ^superoperator.name complete-find-parameter-failed)
-->
   (<s> ^operator <o1> > <o2>)
}

#
##todo failure handle better
##sp {find-parameters*apply*complete-find-parameter-failed
##   (state <s> ^name find-parameters
##              ^conds.<arg>
##              ^superstate <ss>
##              ^operator.name complete-find-parameter-failed)
##-->
##   (<ss> ^valid-arg.<arg> failed ^action failed)
##}
############################################3
#


#COPY DOWN STUFF
sp {find-parameters*elaborate*problem-space*action-args
   (state <s> ^name find-parameters
              ^superstate.superstate.{<args> << action-args >>} <a>)
-->
   (<s> ^<args> <b>)
   (<b> ^type action)
}
sp {find-parameters*elaborate*problem-space*-args*first
   (state <s> ^name find-parameters
              ^superstate.superstate.<args>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^{<args> << goal-args failure-args action-args >>} <ga>)
-->
   (<ga> ^<arg> <garg>)
}
sp {find-parameters*elaborate*problem-space*-args*second
   (state <s> ^name find-parameters
              ^superstate.superstate.<args>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^{<args> << goal-args failure-args action-args >>}.<arg> <garg>)
-->
   (<garg> ^<arg2> <b>)
}
#
sp {find-parameters*elaborate*problem-space*-args*substructs
   (state <s> ^name find-parameters
              ^superstate.superstate.<args>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^{<args> << goal-args failure-args action-args >>} <ga>)
   (<ga> ^<arg>.<arg2> <b>)
   (<a> ^{<something> <> possible-match} <x>)
-->
   (<b> ^<something> <x>)
}
#
sp {find-parameters*elaborate*problem-space*act-other-attributes*verbssamelevel
   (state <s> ^name find-parameters
              ^action-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^actions.<arg0>.{<atr> << verbs >>} <c>)#verb-prep
-->
   (<act> ^<atr> <c>)
}

sp {find-parameters*elaborate*problem-space*act-other-attributes
   (state <s> ^name find-parameters
              ^{<args> << goal-args failure-args action-args >>}.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^superstate.superstate.{<args> << goal-args failure-args action-args >>}.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<atr> << verbs cond-args found-possible >>} <c>)#verb-prep
-->
   (<act> ^<atr> <c>)
}
#sp {find-parameters*elaborate*problem-space*act-other-attributes*verbs
#   (state <s> ^name find-parameters
#              ^action-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^superstate.superstate.actions.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<atr> << verbs >>} <c>)#verb-prep
#-->
#   (<act> ^<atr> <c>)
#}

#
#
#sp {find-parameters*elaborate*problem-space*actions
#   (state <s> ^name find-parameters
#              ^superstate.superstate.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
#-->
#   (<s> ^<arg0> <b>)
#}
#sp {find-parameters*elaborate*problem-space*args
#   (state <s> ^name find-parameters
#              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^superstate.superstate.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
#-->
#   (<act> ^<arg> <b>)
#}

#sp {find-parameters*elaborate*problem-space*args*substructs
#   (state <s> ^name find-parameters
#              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^superstate.superstate.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
#              ^<arg0>.<arg> <b>)
#   (<a> ^{<something> <> possible-match} <x>)
#-->
#   (<b> ^<something> <x>)
#}


sp {find-parameters*elaborate*problem-space*argsdcount
   (state <s> ^name find-parameters
              ^superstate.superstate.dcount <c>)
-->
   (<s> ^dcount (+ <c> 1))
}

#
#
sp {select-parameters*apply*result
#   :interrupt
   (state <s> ^name select-parameters
              ^superstate.superstate <ss>
              ^topstate <ts>
              ^superstate.actions.<arg0>.verbs <verbs> #verb <verb>
              ^superstate.operator <o>)
   (<ss> ^name find-action)
   (<o> ^name select-parameters
        ^action <arg0>
#        ^arg1 <arg1>
#        ^arg2 <arg2>
        ^verbs <verbs>
        ^possible-match-set <pms>)
   (<verbs> ^<a1> <verb1>)
   (<verb1> ^{<a1> 1} <arg1> ^{<a2> 2} <arg2> ^verb-name <vname> ^verb-prep <pname>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>)       
-->
   (<ss> ^valid-arg.<a1> <obj1>
         ^valid-arg.<a2> <obj2> #todo need all parameters of action
         ^action <a>)
   (<a> ^verb <vname> ^pname <pname>)
   (<ts> ^flound-action <fa>)
   (<fa> ^dcount 1 ^obj1 <obj1b> ^obj2 <obj2b> ^mark done ^pname <pname>)
}

sp {select-parameters*apply*result*2verbs
   (state <s> ^name select-parameters
              ^superstate.superstate <ss>
              ^topstate <ts>
              ^superstate.actions.<arg0>.verbs <verbs> #verb <verb>
              ^superstate.operator <o>)
   (<ss> ^name find-action)
   (<o> ^name select-parameters
        ^action <arg0>
#        ^arg1 <arg1>
#        ^arg2 <arg2>
        ^verbs <verbs>
        ^possible-match-set <pms>)
   (<verbs> ^<a1> <verb1> ^<a2> <verb2>)
   (<verb1> ^{<a1> 1} <arg1> ^{<a2> 2} <arg2> ^verb-name <vname> ^verb-prep <pname>)
   (<verb2> ^<a1> <arg1b> ^<a2> <arg2b>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg1b>.possible-match <obj1b>
          ^<arg2b>.possible-match <obj2b>)       
-->
   (<ss> ^valid-arg.<a1> <obj1>
         ^valid-arg.<a2> <obj2> #todo need all parameters of action
         ^action <a>)
   (<a> ^verb <vname> ^pname <pname>)
   (<ts> ^flound-action <fa>)
   (<fa> ^dcount 1 ^obj1 <obj1b> ^obj2 <obj2b> ^pname <pname>)
}

#TODO DEPRICATED?
sp {select-parameters*apply*result*solved
  :interrupt
   (state <s> ^name select-parameters
              ^superstate.superstate <ss>
#              ^superstate.<arg0>.verb <verb>
              ^superstate.depth-limit 1
              ^superstate.operator <o>)
   (<ss> ^name find-action)
   (<o> ^name select-parameters
        ^action <arg0>
        ^arg1 <arg1>
        ^arg2 <arg2>
        ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>)
-->
   (<ss> ^solved true)
}
