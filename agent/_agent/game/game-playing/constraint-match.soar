#############################################
#Parameter set detection


sp {constraint-match*elaborate*copy-operator-attr
   (state <s> ^name constraint-match
              ^superstate.operator <o>)
   (<o> ^name constraint-match
        ^param-args <pa>)
-->
   (<s> ^param-args <pa>)
}

sp {constraint-match*elaborate*superstate*relationships
   (state <s> ^name constraint-match
              ^superstate.relationships <rels>)
-->
   (<s> ^relationships <rels>)
}

sp {constraint-match*check-relation*positive-one*propose*found-possible-prep-match*INDEF
   (state <s> ^name constraint-match
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              -^processing wait
              ^relationships <rels>
              ^topstate.object <tobj>)
   (<a> ^obj <obj> ^cond <conda>)
   (<rels> ^with <id> ^preposition <name> ^relations <r>)
   (<r> ^matched true ^obj <obj-id>)
   (<conda> ^prep <prep>)
   (<obj> ^id <id>)
   (<tobj> ^id <obj-id> ^category <btype>)
   (<prep> ^name <name> ^a this ^b INDEF ^negative false ^btype <btype>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
 -{(<act> ^found-possible <fp>)
   (<fp> ^prep.name <name> ^objid <id> ^arg <arg> ^withid none ^arg2 INDEF)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid none
        ^arg2 INDEF
        ^neg false
        ^prep <prep>
        ^action <arg0>
        ^category svs) 
}

sp {constraint-match*negative-all*propose*found-possible-prep-match*INDEF
   (state <s> ^name constraint-match
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              -^processing wait
              ^relationships <rels>)
   (<a> ^obj <obj> ^cond <conda>)
   (<rels> ^with <id> ^preposition <name>)
   (<conda> ^prep <prep>)
   (<obj> ^id <id>)
   (<prep> ^name <name> ^a this ^b INDEF ^negative true ^btype <btype>)
 -{(<rels> ^relations <r>)
   (<r> ^matched true ^obj <obj-id>)
   (<s> ^topstate.object <o1>)
   (<o1> ^id <obj-id> ^category <btype>)}
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
 -{(<act> ^found-possible <fp>)
   (<fp> ^prep.name <name> ^objid <id> ^arg <arg> ^withid none ^arg2 INDEF)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid none
        ^arg2 INDEF
        ^action <arg0>
        ^neg true
        ^prep <prep>
        ^category svs) 
}

sp {constraint-match*check-relation*positive-one*propose*found-possible-prep-match*arg
   (state <s> ^name constraint-match
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              -^processing wait
              ^relationships <rels>
              ^topstate.object <tobj>)
   (<a> ^obj <obj> ^cond <conda>)
   (<rels> ^with <id> ^preposition <name> ^relations <r>)
   (<r> ^matched true ^obj <obj-id>)
   (<conda> ^prep <prep>)
   (<obj> ^id <id>)
   (<tobj> ^id <obj-id> ^category <btype>)
   (<prep> ^name <name> ^a this ^b {<arg2> <> INDEF} ^negative <bool> ^btype <btype>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
 -{(<act> ^found-possible <fp>)
   (<fp> ^prep.name <name> ^objid <id> ^arg <arg> ^withid <obj-id> ^arg2 <arg2>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid <obj-id>
        ^arg2 <arg2>
        ^action <arg0>
        ^neg <bool>
        ^prep <prep>
        ^category svs)
}
#could possibly reduce by name
sp {constraint-match*check-relation*positive-one*propose*found-possible-prep-match*arg*3arg
   (state <s> ^name constraint-match
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              -^processing wait
              ^relationships <rels>
              ^topstate.object <tobj2>
              ^topstate.object <tobj>)
   (<a> ^obj <obj> ^cond <conda>)
   (<rels> ^with <id> ^preposition <name> ^relations <r>)
   (<r> ^matched true ^obj1 <obj2> ^obj2 {<obj3> <> <obj2>})
   (<conda> ^prep <prep>)
   (<obj> ^id <id>)
   (<tobj> ^id <obj2> ^category <btype>)
   (<tobj2> ^id <obj3> ^category <btype>)
   (<prep> ^name <name> ^a same ^b <arg2> ^c <arg3> ^negative <bool> ^btype <btype>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
 -{(<act> ^found-possible <fp>)
   (<fp> ^prep.name <name> ^objid <id> ^arg <arg> ^withid2 <obj2> ^withid3 <obj3> ^arg2 <arg2> ^arg3 <arg3>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid2 <obj2>
        ^withid3 <obj3>
        ^arg2 <arg2>
        ^arg3 <arg3>
        ^action <arg0>
        ^neg <bool>
        ^prep <prep>
        ^category svs)
}

#sp {find-parameters*check-relation*negative-one*propose*found-possible-prep-match*arg
#   (state <s> ^name find-parameters
#              ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
#              -^processing wait
#              ^relationships <rels>
#              ^object <tobj>)
#   (<a> ^obj <obj> ^cond <conda> ^atr <atr>)
#   (<rels> ^with <id> ^preposition <name> -^relations.obj <obj-id>)
##   (<r> ^matched true ^obj <obj-id>)
#   (<conda> ^prep <prep>)
#   (<obj> ^id <id>)
#   (<tobj> ^id <obj-id> ^<atr> <btype>)
#   (<prep> ^name <name> ^a this ^b {<arg2> <> INDEF} ^negative true ^btype <btype>)
# -{(<s> ^found-possible <fp>)
#   (<fp> ^prep <prep> ^objid <id> ^arg <arg> ^withid <obj-id> ^arg2 <arg2> ^neg true)}
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name found-possible-prep-match
#        ^objid <id>
#        ^arg <arg>
#        ^withid <obj-id>
#        ^arg2 <arg2>
#        ^neg true
#        ^prep <prep>
#        ^category svs)
#}

sp {constraint-match*check-relation*apply*found-possible-prep-match
   (state <s> ^name constraint-match
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^operator <o>)
   (<a> ^obj.id <id> )#^cond.prep <p>)
#   (<p> ^name <prep> ^b <arg2>)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid <with>
        ^neg <neg>
        ^arg2 <arg2>
        ^action <arg0>
        ^prep <prep>)
-->
   (<act> ^found-possible <fp>)
   (<fp> ^prep <prep> ^objid <id> ^arg <arg> ^withid <with> ^arg2 <arg2> ^neg <neg>)
}

sp {constraint-match*check-relation*apply*found-possible-prep-match*3arg
   (state <s> ^name constraint-match
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^operator <o>)
   (<a> ^obj.id <id>)# ^cond.prep <p>)
#   (<p> ^name <prep> ^b <arg2> ^c <arg3>)
   (<o> ^name found-possible-prep-match
        ^objid <id>
        ^arg <arg>
        ^withid2 <obj2>
        ^withid3 <obj3>
        ^neg <neg>
        ^arg2 <arg2>
        ^arg3 <arg3>
        ^action <arg0>
        ^prep <prep>)
-->
   (<act> ^found-possible <fp>)
   (<fp> ^prep <prep> ^objid <id> ^arg <arg> ^withid2 <obj2> ^withid3 <obj3> ^arg3 <arg3> ^arg2 <arg2> ^neg <neg>)
}
#TODO enable work with args

sp {constraint-match*propose*test-action
   (state <s> ^name constraint-match
             -^test-action
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.cond
             -^processing wait)
-->
#   (interrupt)
   (<s> ^operator <o> + =)
   (<o> ^name test-action
        ^category svs)
}

sp {constraint-match*apply*test-action
   (state <s> ^name constraint-match
              ^operator.name test-action)
-->
#   (interrupt)
   (<s> ^test-action true)
}

#TODO rethink could be much better
#NEXT SLOWER DOWN THING 3
sp {constraint-match*check-relation*elaborate*found-possible-arg-match
   (state <s> ^name constraint-match
              ^operator.name test-action
            #  ^test-action true
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^obj.id <id> -^cond.type indiff)
   -{(<a> ^cond.prep <prep>) #has matches for all of its conditions
     (<prep> ^name <name> ^a this ^b <arg2> ^negative false)
     -{(<act> ^found-possible <fop>)
     (<fop> ^arg <arg> ^arg2 <arg2> ^objid <id> ^prep.name <name> ^neg false)}}

  -{(<a> ^cond.prep <prep>)
     (<prep> ^name <name> ^a this ^b {<arg2> INDEF} ^negative true)
     -{(<act> ^found-possible <fop>)
     (<fop> ^arg <arg> ^arg2 <arg2> ^objid <id> ^prep.name <name> ^neg true)}}
  -{(<act> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <p>)
     (<p> ^name <n> ^b <arg> ^a this ^negative false)
    -{(<act> ^found-possible <fp2>)
      (<fp2> ^prep.name <n> ^arg <arg3> ^arg2 <arg> ^withid <id>)}}
# -{(<act> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <p>)
#     (<p> ^name <n> ^b <arg> ^c <something> ^negative false)
#    -{(<act> ^found-possible <fp2>)
#      (<fp2> ^prep.name <n> ^arg <arg3> ^arg2 <arg> ^withid2 <id>)}}
   -{(<a> ^cond.prep <prep>)
     (<prep> ^name <name2> ^b <arg2a> ^c <arg3a>)
     -{(<act> ^found-possible <fop>)
     (<fop> ^arg <arg> ^arg2 <arg2a> ^arg3 <arg3a> ^objid <id> ^prep.name <name2>)}}
#TODO add checks for part c, should be able to make b case for both by changing to withid instead of withid2
-->
#   (interrupt)
   (<a> ^possible-match <pm>)
   (<pm> ^id <id>)
}

# TODO fix indiff paramter
#sp {constraint-match*check-relation*elaborate*found-possible-arg-match*indiff
#   (state <s> ^name constraint-match
#              ^operator.name test-action
#            #  ^test-action true
#              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
#    -{(<s> ^dcount <dc> ^depth-limit <dc>)}
#   (<a> ^obj.id <id> ^cond.type indiff)
#   -{(<a> ^cond.prep <prep>) #has matches for all of its conditions
#     (<prep> ^name <name> ^a this ^b <arg2> ^negative false)
#     -{(<act> ^found-possible <fop>)
#     (<fop> ^arg <arg> ^arg2 <arg2> ^objid <id> ^prep.name <name>)}}
#  -{(<a> ^cond.prep <prep>)
#     (<prep> ^name <name> ^a this ^b {<arg2> INDEF} ^negative true)
#     -{(<act> ^found-possible <fop>)
#     (<fop> ^arg <arg> ^arg2 <arg2> ^objid <id> ^prep.name <name>)}}
#  -{(<act> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <p>)
#     (<p> ^name <n> ^b <arg> -^c ^negative false)
#    -{(<act> ^found-possible <fp2>)
#      (<fp2> ^prep.name <n> ^arg <arg3> ^arg2 <arg> ^withid <id>)}}
## -{(<act> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <p>) #HUH check again?
##     (<p> ^name <n> ^b <arg> ^c <something> ^negative false)
##    -{(<act> ^found-possible <fp2>)
##      (<fp2> ^prep.name <n> ^arg <arg3> ^arg2 <arg> ^withid2 <id>)}}
#   -{(<a> ^cond.prep <prep>)
#     (<prep> ^name <name> ^b <arg2> ^c <arg3>)
#     -{(<act> ^found-possible <fop>)
#     (<fop> ^arg <arg> ^arg2 <arg2> ^arg3 <arg3> ^objid <id> ^prep.name <name>)}}
##TODO add checks for part c, should be able to make b case for both by changing to withid instead of withid2
#-->
#   (<a> ^possible-match <pm>)
#   (<pm> ^id <id> ^type indiff)
#}

#OTHER HUGE SLOWER DOWN TODO 4
sp {constraint-match*check-relation*elaborate*possible-match*conditions
   (state <s> ^name constraint-match
              #^test-action true
              ^operator.name test-action2
              ^param-args.<arg0>.<arg2>.possible-match.id <id2>
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<act> ^found-possible <fp> ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^possible-match <pm>)
   (<pm> ^id <id>)
   (<fp> ^arg <arg> ^arg2 {<arg2> <> INDEF} ^withid <id2> ^objid <id> -^neg true)
 -{(<act> ^found-possible <fp2>)
   (<fp2> ^arg <arg> ^arg2 <arg2> ^withid <id2> ^objid <id> ^neg true)}
-->
   (<pm> ^<arg2> <id2> ^has <arg2>)
}
sp {constraint-match*check-relation*elaborate*possible-match*conditions2
   (state <s> ^name constraint-match
              #^test-action true
              ^operator.name test-action2
              ^param-args.<arg0>.<arg2>.possible-match.id <id2>
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<act> ^found-possible <fp> ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^possible-match <pm>)
   (<pm> ^id <id>)
   (<fp> ^arg <arg> ^arg2 {<arg2> <> INDEF} ^withid2 <id2> ^objid <id> -^neg true)
 -{(<act> ^found-possible <fp2>)
   (<fp2> ^arg <arg> ^arg2 <arg2> ^withid2 <id2> ^objid <id> ^neg true)}
-->
   (<pm> ^<arg2> <id2> ^has <arg2>)
}
sp {constraint-match*check-relation*elaborate*possible-match*conditions3
   (state <s> ^name constraint-match
              #^test-action true
              ^operator.name test-action2
              ^param-args.<arg0>.<arg2>.possible-match.id <id2>
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<act> ^found-possible <fp> ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
   (<a> ^possible-match <pm>)
   (<pm> ^id <id>)
   (<fp> ^arg <arg> ^arg3 {<arg2> <> INDEF} ^withid3 <id2> ^objid <id> -^neg true)
 -{(<act> ^found-possible <fp2>)
   (<fp2> ^arg <arg> ^arg3 <arg2> ^withid3 <id2> ^objid <id> ^neg true)}
-->
   (<pm> ^<arg2> <id2> ^has <arg2>)
}


sp {constraint-match*check-relation*elaborate*possible-match*conditions*23match
   (state <s> ^name constraint-match
              ^operator.name test-action2
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<act> ^found-possible <fp> ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>} <b>)
   (<a> ^possible-match <pgm>)
   (<b> ^possible-match.id {<id2> <> <id>})
   (<pgm> ^id <id>)
   (<fp> ^arg3 <arg3> ^arg2 <arg> <arg> ^withid2 <id> ^withid3 <id2>)
-->
   (<pgm> ^<arg3> <id2> ^has <arg3>)
}
sp {constraint-match*check-relation*elaborate*possible-match*conditions*23match2
   (state <s> ^name constraint-match
              ^operator.name test-action2
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<act> ^found-possible <fp> ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a> ^{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>} <b>)
   (<a> ^possible-match <pgm>)
   (<b> ^possible-match.id {<id2> <> <id>})
   (<pgm> ^id <id>)
   (<fp> ^arg2 <arg3> ^arg3 <arg> <arg> ^withid3 <id> ^withid2 <id2>)
-->
   (<pgm> ^<arg3> <id2> ^has <arg3>)
}


#sp {constraint-match*check-relation*elaborate*possible-match*conditions2
#   (state <s> ^name constraint-match
#              #^test-action true
#              ^operator.name test-action2
#              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
#   (<act> ^found-possible <fp>)
#   (<a> ^possible-match <pm>)
#   (<pm> ^id <id>)
#   (<fp> ^arg <arg> ^arg2 {<arg2> <> INDEF} ^withid2 <id2> ^objid <id> -^neg true)
# -{(<act> ^found-possible <fp2>)
#   (<fp2> ^arg <arg> ^arg2 <arg2> ^withid2 <id2> ^objid <id> ^neg true)}
# -{(<act> ^found-possible <fp3>)
#   (<fp3> ^arg <arg> ^arg2 <arg2> ^withid <id2> ^objid <id> ^neg true)}
# -{(<act> ^found-possible <fp4>)
#   (<fp4> ^arg <arg> ^arg3 <arg2> ^withid3 <id2> ^objid <id> ^neg true)}
#-->
#   (<pm> ^<arg2> <id2> ^has <arg2>)
#}
#sp {constraint-match*check-relation*elaborate*possible-match*conditions3
#   (state <s> ^name constraint-match
#              #^test-action true
#              ^operator.name test-action2
#              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a>)
#   (<act> ^found-possible <fp>)
#   (<a> ^possible-match <pm>)
#   (<pm> ^id <id>)
#   (<fp> ^arg <arg> ^arg3 {<arg2> <> INDEF} ^withid3 <id2> ^objid <id> -^neg true)
# -{(<act> ^found-possible <fp2>)
#   (<fp2> ^arg <arg> ^arg3 <arg2> ^withid3 <id2> ^objid <id> ^neg true)}
# -{(<act> ^found-possible <fp3>)
#   (<fp3> ^arg <arg> ^arg2 <arg2> ^withid <id2> ^objid <id> ^neg true)}
# -{(<act> ^found-possible <fp4>)
#   (<fp4> ^arg <arg> ^arg2 <arg2> ^withid2 <id2> ^objid <id> ^neg true)}
#-->
#   (<pm> ^<arg2> <id2> ^has <arg2>)
#}
#sp {find-parameters*check-relation*elaborate*possible-match*conditions2to3
#   (state <s> ^name find-parameters
#              ^test-action true
#              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^<arg0>.{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>} <b>
#              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} {<a> <> <b>})
#   (<act> ^found-possible <fp>)
#   (<a> ^possible-match <pm>)
#   (<pm> ^id <id>)
#   (<fp> ^arg <arg3> ^arg2 <arg> ^arg3 {<arg2> <> INDEF} ^withid3 <id2> ^withid2 <id> -^neg true)
# -{(<act> ^found-possible <fp2>)
#   (<fp2> ^arg <arg3> ^arg2 <arg> ^arg3 <arg2> ^withid3 <id2> ^withid2 <id> ^neg true)}
#-->
#   (<pm> ^<arg2> <id2> ^has <arg2>)
#}
#sp {find-parameters*check-relation*elaborate*possible-match*conditions3to2
#   (state <s> ^name find-parameters
#              ^test-action true
#              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
#              ^<arg0>.{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>} <b>
#              ^<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} {<a> <> <b>})
#   (<act> ^found-possible <fp>)
#   (<a> ^possible-match <pm>)
#   (<pm> ^id <id>)
#   (<fp> ^arg <arg3> ^arg3 <arg> ^arg2 {<arg2> <> INDEF} ^withid2 <id2> ^withid3 <id> -^neg true)
# -{(<act> ^found-possible <fp2>)
#   (<fp2> ^arg <arg3> ^arg3 <arg> ^arg2 <arg2> ^withid2 <id2> ^withid3 <id> ^neg true)}
#-->
#   (<pm> ^<arg2> <id2> ^has <arg2>)
#} 2
#sp {constraint-match*check-relation*elaborate*possible-match*conditions*none
#   (state <s> ^name constraint-match
#              #^test-action true
#              ^operator.name test-action2
#              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} <b>
#              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} {<a> <> <b>})
##              ^param-args.<arg0>.{<arg3> << 1 2 3 4 5 6 7 8 9 10 >>} <c>) 
#   (<a> ^possible-match <pm> -^cond.prep.b <arg3> -^cond.prep.c <arg3>) #todo for c too
#   (<pm> ^id <id>)
#   (<c> -^cond.prep <cp>)
#   (<cp> ^
##   (<d> ^cond.prep.b <arg3> ^cond.prep.c <arg>) 
#   (<b> ^possible-match.id {<id2> <> <id>} -^cond.prep.b <arg> -^cond.prep.c <arg>) 
#-->
#   (<pm> ^<arg3> <id2>)
#}
sp {constraint-match*check-relation*elaborate*possible-match*conditions*none
   (state <s> ^name constraint-match
              #^test-action true
              ^operator.name test-action2
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} <b>
              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} {<a> <> <b>})
   (<a> ^possible-match <pm> -^cond.prep.b <arg2> -^cond.prep.c <arg2>)  #todo for c too
   (<pm> ^id <id>)
   (<b> ^possible-match.id {<id2> <> <id>}) 
  -{(<s> ^param-args.<arg0>.{<arg5> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <cp>)
    (<cp> ^<something> <arg> ^<something2> <arg2>)}
-->
   (<pm> ^<arg2> <id2>)
}

sp {constraint-match*check-relation*elaborate*possible-match*conditions*negativetrue
   (state <s> ^name constraint-match
              #^test-action true
              ^operator.name test-action2
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>)
   (<act> ^{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <a> ^{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} {<b> <> <a>})
   (<a> ^possible-match <pm> ^cond.prep <prep>)  #todo for c too
   (<prep> ^b <arg2> ^negative true)
   (<pm> ^id <id>)
   (<b> ^possible-match.id {<id2> <> <id>}) 
 -{(<act> ^found-possible <fp2>)
   (<fp2> ^arg <arg> ^arg2 <arg2> ^withid <id2> ^objid <id>)}
-->
   (<pm> ^<arg2> <id2>)
}
#sp {constraint-match*check-relation*elaborate*possible-match*conditions*none2
#   (state <s> ^name constraint-match
#              #^test-action true
#              ^operator.name test-action2
#              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg2> << 1 2 3 4 5 6 7 8 9 10 >>} <b>
#              ^param-args.<arg0>.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} {<a> <> <b>})
#   (<a> ^possible-match <pm> -^cond.prep.b <arg2> -^cond.prep.c <arg2>)  #todo for c too
#   (<pm> ^id <id>)
#   (<b> ^possible-match.id {<id2> <> <id>}) 
#  -{(<s> ^param-args.<arg0>.{<arg5> << 1 2 3 4 5 6 7 8 9 10 >>}.cond.prep <cp>)
#    (<cp> ^c <arg> ^b <arg2>)}
#-->
#   (<pm> ^<arg2> <id2>)
#}


sp {constraint-match*propose*test-action2
   (state <s> ^name constraint-match
             -^test-action-final
              ^test-action-15
              ^test-action true)
  #            ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.possible-match)
-->
   (<s> ^operator <o> + =)
   (<o> ^name test-action2
        ^category svs)
}
sp {constraint-match*apply*test-action2
   (state <s> ^name constraint-match
              ^operator.name test-action2)
-->
   (<s> ^test-action-final true) #changed here
}

sp {constraint-match*propose*test-action15
   (state <s> ^name constraint-match
             -^test-action-15
              ^test-action true
  #            ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>}.possible-match
             -^processing wait)
-->
   (<s> ^operator <o> + =)
   (<o> ^name test-action15
        ^category svs)
}
sp {constraint-match*apply*test-action15
   (state <s> ^name constraint-match
              ^operator.name test-action15)
-->
   (<s> ^test-action-15 true
        ^processing wait)
}


#sp {find-parameters*apply*test-action*remove-impossible
#   (state <s> ^name find-parameters
#              ^{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <pos>
##              ^<arg0>.<arg>.possible-match <p1>
##              ^<arg0>.<arg>.possible-match {<p2> <> <p1>}
#              ^<arg0> <act>
#              ^operator.name test-action15)
#   (<pos> ^possible-match <p2>)
#   (<p2> ^id <id1>)#^type indiff 
#   (<pos> ^cond.prep <cp>)
#   (<cp> ^name ^a this ^b {<arg2> <> INDEF})
# -{(<s> ^<arg0>.<arg2>.possible-match.id <id2>)
#   (<act> ^found-possible <fp>)
#   (<fp> ^arg <arg> ^arg2 <arg2> ^withid <id2> ^objid <id1> -^neg true)}
#-->
##  (<s> ^scratched true)
#  (<pos> ^possible-match <p2> -) #TODO DOESNT WORK
#}
sp {constraint-match*apply*test-action*remove-indifferents
   (state <s> ^name constraint-match
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>}.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <pos>
#              ^<arg0>.<arg>.possible-match <p1>
#              ^<arg0>.<arg>.possible-match {<p2> <> <p1>}
#              ^scratched
              ^operator.name test-action2)
   (<pos> ^possible-match <p1>
          ^possible-match {<p2> <> <p1>})
   (<p1> ^type indiff ^id <id1>)
   (<p2> ^type indiff ^id <id2>)
 -{(<s> ^param-args.<arg0>.<arg>.possible-match <pm3>)
   (<pm3> ^id <id3> > <id1>)}
-->
   (interrupt)
#   (<pos> ^secondary <p2>)
   (<pos> ^possible-match <p2> -) #TODO DOESNT WORK
}

sp {constraint-match*check-relation*elaborate*action-detected
   (state <s> ^name constraint-match
              ^test-action true
              ^test-action-final true
              ^param-args.<arg0>.cond-args 6
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^param-args.<arg0>.{<arg1> 1}.possible-match <pm1>
              ^param-args.<arg0>.{<arg2> 2}.possible-match <pm2>
              ^param-args.<arg0>.{<arg3> 3}.possible-match <pm3>
              ^param-args.<arg0>.{<arg4> 4}.possible-match <pm4>
              ^param-args.<arg0>.{<arg5> 5}.possible-match <pm5>
              ^param-args.<arg0>.{<arg6> 6}.possible-match <pm6>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>
          ^<arg6> <obj6>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>
          ^<arg6> <obj6>)
   (<pm3> ^id <obj3>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg4> <obj4>
          ^<arg5> <obj5>
          ^<arg6> <obj6>)
   (<pm4> ^id <obj4>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg5> <obj5>
          ^<arg6> <obj6>)
   (<pm5> ^id <obj5>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg6> <obj6>)
   (<pm6> ^id <obj6>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg3>.possible-match <obj3>
          ^<arg4>.possible-match <obj4>
          ^<arg5>.possible-match <obj5>
          ^<arg6>.possible-match <obj6>
          ^argnum <arg0>)
}
sp {constraint-match*check-relation*elaborate*action-detected5
   (state <s> ^name constraint-match
              ^test-action true
              ^test-action-final true
              ^param-args.<arg0>.cond-args 5
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^param-args.<arg0>.{<arg1> 1}.possible-match <pm1>
              ^param-args.<arg0>.{<arg2> 2}.possible-match <pm2>
              ^param-args.<arg0>.{<arg3> 3}.possible-match <pm3>
              ^param-args.<arg0>.{<arg4> 4}.possible-match <pm4>
              ^param-args.<arg0>.{<arg5> 5}.possible-match <pm5>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>
          ^<arg3> <obj3>
          ^<arg4> <obj4>
          ^<arg5> <obj5>)
   (<pm3> ^id <obj3>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg4> <obj4>
          ^<arg5> <obj5>)
   (<pm4> ^id <obj4>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg5> <obj5>)
   (<pm5> ^id <obj5>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg3>.possible-match <obj3>
          ^<arg4>.possible-match <obj4>
          ^<arg5>.possible-match <obj5>
          ^argnum <arg0>)
}


sp {constraint-match*check-relation*elaborate*action-detected4
   (state <s> ^name constraint-match
              ^test-action true
              ^test-action-final true
              ^param-args.<arg0>.cond-args 4
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^param-args.<arg0>.{<arg1> 1}.possible-match <pm1>
              ^param-args.<arg0>.{<arg2> 2}.possible-match <pm2>
              ^param-args.<arg0>.{<arg3> 3}.possible-match <pm3>
              ^param-args.<arg0>.{<arg4> 4}.possible-match <pm4>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>
          ^<arg4> <obj4>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>
          ^<arg3> <obj3>
          ^<arg4> <obj4>)
   (<pm3> ^id <obj3>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg4> <obj4>)
   (<pm4> ^id <obj4>
          ^<arg1> <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg3>.possible-match <obj3>
          ^<arg4>.possible-match <obj4>
          ^argnum <arg0>)
}


sp {constraint-match*check-relation*elaborate*action-detected3
   (state <s> ^name constraint-match
              ^test-action true
              ^test-action-final true
              ^param-args.<arg0>.cond-args 3
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^param-args.<arg0>.{<arg1> 1}.possible-match <pm1>
              ^param-args.<arg0>.{<arg2> 2}.possible-match <pm2>
              ^param-args.<arg0>.{<arg3> 3}.possible-match <pm3>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>
          ^<arg3> <obj3>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>
          ^<arg3> <obj3>)
   (<pm3> ^id <obj3>
          ^<arg1> <obj1>
          ^<arg2> <obj2>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^<arg3>.possible-match <obj3>
          ^argnum <arg0>)
}

sp {constraint-match*check-relation*elaborate*action-detected2
   (state <s> ^name constraint-match
              ^test-action true
              ^test-action-final true
              ^param-args.<arg0>.cond-args 2
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <a>
              ^param-args.<arg0>.{<arg1> 1}.possible-match <pm1>
              ^param-args.<arg0>.{<arg2> 2}.possible-match <pm2>)
   (<pm1> ^id <obj1>
          ^<arg2> <obj2>)
   (<pm2> ^id <obj2>
          ^<arg1> <obj1>)
 -{(<s> ^dcount <dc> ^depth-limit <dc>)}
-->
   (<a> ^possible-match-set <pms>)
   (<pms> ^<arg1>.possible-match <obj1>
          ^<arg2>.possible-match <obj2>
          ^argnum <arg0>)
}

#TODO IS THIS STILL NECESSARY???
sp {constraint-match*check-relation*propose*select-parameters
   (state <s> ^name constraint-match
              ^test-action true
              -^parameter-match-set <pms>
              ^test-action-final true
#              ^depth-limit <dc> #TODO fix handling of depth to elsewhere
#              ^param-args.<arg0>.verbs <verbs>
#             -^processing wait
             -^last-action
              ^param-args.{<arg0> << 1 2 3 4 5 6 7 8 9 10 >>} <act>
              ^param-args.<arg0>.possible-match-set <pms>)
   #TODO rethink no undo heuristic for multi actions
#  -{(<s> ^legal-action <la> ^superstate.superstate.relationships <rels2>) #heuristic to not undo last action
#    (<la> ^<arg1> <obj1>)
#    (<rels2> ^with <obj1> ^preposition <name> ^relations.obj <obj2>)}
# TODO fix heuristic??
#  -{(<s> ^legal-action.<arg1> <obj1>)} #dont double touch heuristic (helpful for towers and 5puzzle)
#  -{(<s> ^legal-action <la>)#dont slide back (helpful for sokoban)
#    (<la> -^4 <something> ^3 <obj2>)} 
#  -{(<s> ^dcount <dc> ^depth-limit <dc>)}
   (<pms> ^{<arg1> 1}.possible-match <obj1>
          ^{<arg2> 2}.possible-match <obj2>)
   -{(<act> ^found-possible <fp>)
     (<pms> ^<argv>.possible-match <objv>
            ^{<arg2v> <> <argv>}.possible-match {<obj2v> <> <objv>})
     (<fp> ^objid <objv> ^arg <argv> ^arg2 {<arg2v> <> INDEF} -^arg3 -^neg true)
    -{(<act> ^found-possible <fp2>)
       (<fp2> ^objid <objv> ^arg <argv> ^arg2 <arv2v> ^withid <obj2v> -^arg3)}}
   -{(<act> ^found-possible <fp3>) #TODO again simplify with withid2 gone
     (<pms> ^{<argz> <> <arg3z>}.possible-match {<objz> <> <obj3z>}
            ^{<arg2z> <> <argz>}.possible-match {<obj2z> <> <objz>}
            ^{<arg3z> <> <arg2z>}.possible-match {<obj3z> <> <obj2z>})
     (<fp3> ^objid <objz> ^arg <argz> ^arg2 <arg2z> ^arg3 <arg3z>)
    -{(<act> ^found-possible <fp4>)
       (<fp4> ^objid <objz> ^arg <argz> ^arg2 <arg2z> ^arg3 <arg3z> ^withid2 <obj2z> ^withid3 <obj3z>)}}
#-{(<act> ^found-possible <fp>) #TODO again simplify with withid2 gone
#     (<pms> ^<argv>.possible-match <objv>
#            ^{<arg2v> <> <argv>}.possible-match {<obj2v> <> <objv>})
#     (<fp> ^objid <objv> ^arg <argv> ^arg3 {<arg2v> <> INDEF})
#    -{(<act> ^found-possible <fp2>)
#       (<fp2> ^objid <objv> ^arg <argv> ^arg3 <arv2v> ^withid3 <obj2v>)}}
-->
   (<s> ^operator <o> + = ) #not here anymore # force tie
   (<o> ^name parameter-set-found
        ^arg <arg0>
        ^possible-match-set <pms>
        ^category svs)
}

sp {constraint-match*apply*parameter-set-found
   (state <s> ^name constraint-match
              ^param-args <pa>
#              ^superstate <ss>
              ^operator <o>)
   (<o> ^name parameter-set-found
        ^possible-match-set <pms>
        ^category svs)
-->
   (<s> ^parameter-match-set <pms>)
   (<pa> ^parameter-match-set <pms>)
}
## NO parameter matching set
sp {constraint-match*propose*constraint-match-complete
   (state <s> ^name constraint-match
             ^parameter-match-set <pms>
             ^test-action-final true)
-->
   (<s> ^operator <o> + =) 
   (<o> ^name constraint-match-complete
        ^category svs)
}
sp {constraint-match*apply*constraint-match-complete
   (state <s> ^name constraint-match
              ^param-args.type <type>
              ^superstate <ss>
             ^operator <o>) 
   (<o> ^name constraint-match-complete
        ^category svs)
-->
   (<ss> ^matches-found.<type> true)
}

## NO parameter matching set
sp {constraint-match*propose*parameter-set-none
   (state <s> ^name constraint-match
              ^test-action-final true)
#             -^processing wait)
-{(<s> ^dcount 0 ^multiplayer true)}
-->
   (<s> ^operator <o> + ) 
   (<o> ^name parameter-set-none
        ^category svs)
}
sp {constraint-match*propose*parameter-set-none*empty
   (state <s> ^name constraint-match
              ^param-args <pa>)
   (<pa> ^1 <one> ^type <type>)
   (<one> ^cond-args 0)
-{(<s> ^dcount 0 ^multiplayer true)}
-->
   (<s> ^operator <o> + ) 
   (<o> ^name parameter-set-none
        ^category svs)
}
sp {constraint-match*apply*parameter-set-none*empty
   (state <s> ^name constraint-match
              ^superstate <ss>
              ^param-args <pa>
              ^operator <o>) 
    (<pa> ^1 <one> ^type <type>)
    (<one> ^cond-args 0)
   (<o> ^name parameter-set-none
        ^category svs)
-->
   (<ss> ^matches-found.<type> false)
}
sp {constraint-match*apply*parameter-set-none
   (state <s> ^name constraint-match
              ^superstate <ss>
              ^param-args.type <type>
              ^test-action-final true
              ^operator <o>) 
   (<o> ^name parameter-set-none
        ^category svs)
-->
   (<ss> ^matches-found.<type> false)
}