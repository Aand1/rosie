sp {soar-preposition*propose*extract-spatial-pairs
   (state <s> ^name soar-preposition
             -^result.set.pair.<elem>
              ^superstate.operator <o>)
   (<o> ^args <args>
        ^negative <bool>
        ^parameter <p>
        ^word <prep>)
   (<p> ^num 2 ^<arg1>.type single ^<arg2>.type single ^result.link.link.set.pair.<elem> holder)
   (<args> ^num 2 ^{<arg1> 1} <a1> #result <r>
                  ^{<arg2> 2} <a2>)#result <r2>)
-->
   (<s> ^operator <op> +)
   (<op> ^name extract-spatial-pairs
         ^prep <prep>
         ^negative <bool>
         ^parameter <p>
         ^a <a1>
         ^b <a2>)
}
sp {soar-preposition*propose*extract-set-pairs
   (state <s> ^name soar-preposition
             -^result.set.pair.<elem>
              ^superstate.operator <o>)
   (<o> ^args <args>
        ^negative <bool>
        ^parameter <p>
        ^word <prep>)
   (<p> ^num 2 ^{<arg1> 1}.type single ^{<arg2> 2}.type set ^result.link.link.set.pair.<elem> holder)
   (<args> ^num 2 ^<arg1> <a1> #.result <r>
                  ^<arg2> <a2>) #.result <r2>)
-->
   (<s> ^operator <op> +)
   (<op> ^name extract-set-pairs
         ^prep <prep>
         ^negative <bool>
         ^parameter <p>
         ^a <a1>
         ^b <a2>)
}


sp {soar-preposition*propose*extract-object-set
   (state <s> ^name soar-preposition
             -^result.set.item.object
              ^superstate.operator <o>)
   (<o> ^args <args>
        ^negative <bool>
        ^parameter <p>
        ^word <prep>)
   (<p> ^result.link.link.set.item.object holder) #^num 1 ^{<arg1> 1}.type single 
   (<args> ^num 2 ^{<arg1> 1} <a1> #.result <r>
                  ^{<arg2> 2} <a2>)#.result <r2>)
-->
   (<s> ^operator <op> +)
   (<op> ^name extract-object-set
         ^prep <prep>
         ^negative <bool>
         ^a <a1>
         ^b <a2>)
}
sp {soar-preposition*propose*extract-object-set*set
   (state <s> ^name soar-preposition
             -^result
              ^superstate.operator <o>)
   (<o> ^args <args>
        ^negative <bool>
        ^parameter <p>
        ^word <prep>)
   (<p> ^num 1 ^{<arg1> 1}.type set)# ^result.link.link.set.pair.<elem> holder)
   (<args> ^num 2 ^{<arg1> 1} <a1>
                  ^{<arg2> 2} <a2>)
-->
   (<s> ^operator <op> +)
   (<op> ^name extract-set-set
         ^parameter <p>
         ^prep <prep>
         ^negative <bool>
         ^a <a1>
         ^b <a2>)
}

sp {soar-preposition*propose*extract-spatial-pairs*3arg
   (state <s> ^name soar-preposition
             -^result.set.pair.<elem>
              ^superstate.operator <o>)
   (<o> ^args <args>
        ^negative <bool>
        ^parameter <p>
        ^word <prep>)
   (<p> ^num 3 ^<arg1>.type single ^<arg2>.type single ^<arg3>.type single ^result.link.link.set.pair.<elem> holder)
   (<args> ^num 3 ^{<arg1> 1} <a1>
                  ^{<arg2> 2} <a2>
                  ^{<arg3> 3} <a3>)
-->
   (<s> ^operator <op> +)
   (<op> ^name extract-spatial-pairs
         ^prep <prep>
         ^negative <bool>
         ^a <a1>
         ^b <a2>
         ^c <a3>)
}
#sp {soar-preposition*elaborate*result
#   (state <s> ^name soar-preposition
#              ^superstate <ss>
#              ^result <res>)
#-->
#   (<ss> ^result <res>)
#}
sp {soar-preposition*propose*complete
   (state <s> ^name soar-preposition)

-->
   (<s> ^operator <o> + <)
   (<o> ^name complete)
}

sp {soar-preposition*apply*complete
   (state <s> ^name soar-preposition
              ^superstate <ss>
              ^operator.name complete
              ^result <res>)
-->
   (<ss> ^result <res>)
}

sp {soar-preposition*elaborate*aresult
   (state <s> ^name soar-preposition)
-->
   (<s> ^result.set.item <res>)
}

#sp {soar-preposition*elaborate*object
#   (state <s> ^name soar-preposition
#              ^superstate <ss>
#              ^object <res>)
#-->
#   (<ss> ^object <res>)
#}