sp {pop-action*propose*complete-pop-action
   (state <s> ^name pop-action)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-pop-action)
}

sp {pop-action*apply*complete-pop-action*pop
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-stack <stack>
              ^action-to-pop <action>)
   (<stack> ^next <action>)
   (<action> ^next <next>)
-->
   (<stack> ^next <action> -
            ^next <next>)
   (<action> ^next <next> -)
}

sp {pop-action*apply*complete-pop-action*clear*changes
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-stack.changes <changes>
              ^action-to-pop <action>)
   (<changes> ^pop <action>)
-->
   (<changes> ^pop <action> -)
}


sp {pop-action*apply*complete-pop-action*report*performed*action-event
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-to-pop <action>
              ^top-state.interaction.status <status>)
   (<action> ^status complete
             ^execution-operator.action-handle <action-handle>)
-->
   (<status> ^performed.action-event.type <action-handle>)
}

sp {pop-action*apply*complete-pop-action*push*learning*segment
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-to-pop <action>
              ^top-state.interaction.changes <changes>)
   (<action> ^policy-learning-needed true)
-->
   (<changes> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type retrospective-learning
        ^parameters <params>
        ^satisfaction.learning-event.type retrospective)
   (<params> ^action <action>)
}

        
              