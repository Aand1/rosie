sp {pop-action*propose*complete-pop-action
   (state <s> ^name pop-action)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete-pop-action)
}

sp {pop-action*apply*complete-pop-action*pop
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-stack <stack>
              ^action-to-pop <action>)
   (<stack> ^top <action>)
   (<action> ^prev <prev>)
-->
   (<stack> ^top <action> -
            ^top <prev>)
  (<action> ^next none -)
  (<prev> ^next <action> -
           ^next none)
}

sp {pop-action*apply*complete-pop-action*change*bottom
  (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-stack <stack>
              ^action-to-pop <action>)
  (<stack> ^bottom <action>)
-->
  (<stack> ^bottom <action> -
            ^bottom none)
}

sp {pop-action*apply*complete-pop-action*clear*changes
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-stack.changes <changes>
              ^action-to-pop <action>)
   (<changes> ^pop <action>)
-->
   (<changes> ^pop <action> -)
}


sp {pop-action*apply*complete-pop-action*report*performed*action-event
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-to-pop <action>
              ^top-state.interaction.status <status>)
   (<action> ^status complete
             ^execution-operator.action-handle <action-handle>)
-->
   (<status> ^performed.action-event.type <action-handle>)
}

sp {pop-action*apply*complete-pop-action*push*learning*segment
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-to-pop <action>
              ^top-state.interaction.changes <changes>)
   (<action> ^policy-learning-needed true)
-->
   (<changes> ^new-segment-info <info>)
   (<info> ^purpose <p>
           ^originator agent)
   (<p> ^type retrospective-learning
        ^parameters <params>
        ^satisfaction.learning-event.type retrospective)
   (<params> ^action <action>)
}

        
sp {pop-action*apply*complete-pop-action*remove*remembered*things
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-to-pop.remembered <rem>)
   (<rem> ^object.predicates <preds>
          ^attribute <att>
          ^value <val>)
   (<preds> ^<att> <val>)
-->
   (<preds> ^<att> <val> -)
}
   
              
sp {pop-action*apply*complete-pop-action*remove*added*objects
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-to-pop.added <obj>
              ^top-state.world.objects <objs>)
   (<objs> ^object <obj>)
-->
   (<objs> ^object <obj> -)
}

sp {pop-action*apply*complete-pop-action*remove*added*predicates
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-to-pop.added <obj>
              ^top-state.world.predicates.predicate <pred>)
   (<pred> ^instance <i>)
   (<i> ^<any> <obj>)
-->
   (<pred> ^instance <i> -)
}

sp {pop-action*apply*complete-pop-action*mark*performed*once*subaction
   (state <s> ^name pop-action
              ^operator.name complete-pop-action
              ^action-to-pop.execution-operator <op>
              ^action-to-pop.prev.execution-operator <parent-op>)
   (<op> ^subaction-handle <sub-handle>
         ^perform once)
-->
   (<parent-op> ^performed <sub-handle>)
}
