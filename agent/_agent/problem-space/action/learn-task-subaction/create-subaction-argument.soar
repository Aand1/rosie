# Once an argument has been generalized, copy it onto the subaction-structure

sp {learn-task-subaction*propose*create-subaction-argument
  (state <s> ^name learn-task-subaction
             ^subaction-structure <struct>
             ^argument-info <arg-info>)
  (<arg-info> ^arg-name <arg-name>
              ^generalized.generalized-rep <gen>)
  (<struct> -^<arg-name>)
-->
  (<s> ^operator <o> + =)
  (<o> ^name create-subaction-argument
       ^argument-info <arg-info>)
}

sp {learn-task-subaciton*apply*create-subaction-argument
  (state <s> ^name learn-task-subaction
             ^operator <o>
             ^subaction-structure <struct>)
  (<o> ^name create-subaction-argument
       ^argument-info <arg-info>)
  (<arg-info> ^arg-name <arg-name>
              ^generalized.generalized-rep <gen-rep>)
-->
  (<struct> ^<arg-name> <gen-rep>)
}

sp {learn-task-subaciton*apply*create-subaction-argument*copy*arg-status
  (state <s> ^name learn-task-subaction
             ^operator <o>
             ^subaction-structure <struct>
             ^subaction-id.procedural.<arg-name>.arg-status <status>)
  (<o> ^name create-subaction-argument
       ^argument-info <arg-info>)
  (<arg-info> ^arg-name <arg-name>
              ^generalized.generalized-rep <gen-rep>)
-->
  (<gen-rep> ^arg-status <status>)
}

sp {learn-task-subaciton*apply*create-subaction-argument*mark*until-clause
  (state <s> ^name learn-task-subaction
             ^operator <o>
             ^subaction-structure <struct>)
  (<o> ^name create-subaction-argument
       ^argument-info <arg-info>)
  (<arg-info> ^argument.arg-type until-clause
              ^generalized.generalized-rep <gen-rep>)
-->
  (<gen-rep> ^arg-type until-clause)
}


