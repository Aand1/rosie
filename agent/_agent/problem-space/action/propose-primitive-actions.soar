######## propose driving actions ########
# These have no action models or preconditions, 
#   so they are only proposed when trying to match a primitive action command
#   (the flag propose-driving-operators is present)

## op_turn
sp {composite-action*propose*driving-operator*op_turn1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <oleft> +
        ^operator <oright> +
        ^operator <oaround> +)
   (<oleft> ^name op_turn1
          ^action-handle turn1
          ^action-type primitive
          ^arg1 <left-arg1>)
   (<left-arg1> ^arg-type concept ^handle left1)
   
   (<oright> ^name op_turn1
             ^action-handle turn1
             ^action-type primitive
             ^arg1 <right-arg1>)
   (<right-arg1> ^arg-type concept ^handle right1)
   
   (<oaround> ^name op_turn1
             ^action-handle turn1
             ^action-type primitive
             ^arg1 <around-arg1>)
   (<around-arg1> ^arg-type concept ^handle around1)
}

## op_follow-wall1
sp {composite-action*propose*driving-operator*op_follow-wall1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <left-op> +
        ^operator <right-op> +)
   (<left-op> ^name op_follow-wall1
              ^action-handle follow-wall1
              ^action-type primitive
              ^arg1 <left-arg1>)
   (<left-arg1> ^arg-type object ^id <left-wall>)
   (<left-wall> ^item-type object ^handle left-wall1 ^predicates <left-preds>)
   (<left-preds> ^relative-direction1 left1 ^spatial-shape wall1)

   (<right-op> ^name op_follow-wall1
               ^action-handle follow-wall1
               ^action-type primitive
               ^arg1 <right-arg1>)
   (<right-arg1> ^arg-type object ^id <right-wall>)
   (<right-wall> ^item-type object ^handle right-wall1 ^predicates <right-preds>)
   (<right-preds> ^relative-direction1 right1 ^spatial-shape wall1)
}

## op_orient1
sp {composite-action*propose*driving-operator*op_orient1*each*direction
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <on> +
        ^operator <os> +
        ^operator <oe> +
        ^operator <ow> +)

   (<on> ^name op_orient1
         ^action-handle orient1
         ^action-type primitive
         ^arg1 <n-arg1>)
   (<n-arg1> ^arg-type concept ^handle north1)

   (<os> ^name op_orient1
         ^action-handle orient1
         ^action-type primitive
         ^arg1 <s-arg1>)
   (<s-arg1> ^arg-type concept ^handle south1)

   (<oe> ^name op_orient1
         ^action-handle orient1
         ^action-type primitive
         ^arg1 <e-arg1>)
   (<e-arg1> ^arg-type concept ^handle east1)

   (<ow> ^name op_orient1
         ^action-handle orient1
         ^action-type primitive
         ^arg1 <w-arg1>)
   (<w-arg1> ^arg-type concept ^handle west1)
}

## op_stop1
sp {composite-action*propose*driving-operator*op_stop1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_stop1
        ^action-handle stop1
        ^action-type primitive)
}

####### propose external actions #######

## op_go-to-location1
sp {action*propose*op_go-to-location1
   (state <s> ^problem-space <ps>
              ^world.objects.object <loc>
             -^world.robot.current-location <loc>)
   (<ps> ^name action
         ^action.propose-action-operators true)
  (<loc> ^predicates.category location)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_go-to-location1
        ^action-handle go-to-location1
         ^action-type primitive
         ^arg2 <arg2>)
   (<arg2> ^arg-type predicate
           ^handle in1
           ^2 <loc>)
}


## op_pick-up1
sp {composite-action*propose*op_pick-up1*mobile
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.predicates.predicate <in-pred>
              ^world.robot.current-location <cur-loc>
             -^world.objects.object.predicates.arm-status grabbed)
   (<ps> ^name action
         ^action.propose-action-operators true)
   (<obj> ^predicates <preds>)
   (<preds> ^category object
            ^visible true
            ^arm-status not-grabbed)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 <cur-loc>)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pick-up1 
         ^action-handle pick-up1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^id <obj>)
}

## op_put-down1
sp {composite-action*propose*op_put-down1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>)
   (<ps> ^name action
         ^action.propose-action-operators true)
   (<obj> ^predicates.arm-status grabbed)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^action-handle put-down1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^id <obj>)
}

sp {composite-action*propose*op_put-down1*with*obj2
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj1>
              ^world.objects.object { <obj2> <> <obj1> })
   (<ps> ^name action
         ^action.propose-action-operators true)
   (<obj1> ^predicates.arm-status grabbed)
   (<obj2> ^predicates.visible true
           ^predicates.category object)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down1
         ^action-handle put-down1
         ^arg1 <arg1>
         ^arg2 <arg2>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^id <obj1>)
   (<arg2> ^arg-type predicate
           ^2 <obj2>)
}

## op_give1
sp {composite-action*propose*op_give1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj1>
              ^world.objects.object <person>)
   (<ps> ^name action
         ^action.propose-action-operators true)
   (<obj1> ^predicates.arm-status grabbed)
   (<person> ^predicates.visible true
             ^predicates.category person)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_give1
         ^action-handle give1
         ^arg1 <arg1>
         ^arg2 <arg2>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^id <obj1>)
   (<arg2> ^arg-type predicate
           ^handle in1
           ^2 <person>)
}

#
## HACK for now, so we can learn store (wont try to pick it up once its on the goal)
#sp {composite-action*reject*op_pick-up1*achieved*goal
#   (state <s> ^problem-space <ps>
#              ^operator <o> +
#              ^desired.predicate <pred>)
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<o> ^name op_pick-up1
#        ^arg1.id <obj1>)
#   (<pred> ^type relation ^1 <obj1>
#           ^satisfied true)
#-->
#   (<s> ^operator <o> -)
#}
#

#
######## propose put-down for objects #########################################
## Mobile - put down on the floor
#sp {composite-action*propose*op_put-down1
#   (state <s> ^problem-space <ps>
#              ^world.objects.object <obj>)
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<obj> ^predicates.arm-status grabbed)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_put-down1
#         ^action-handle put-down1
#         ^arg1 <arg1>
#         ^action-type primitive)
#   (<arg1> ^arg-type object
#           ^arg-status imagined
#           ^id <obj>)
#}
#
#
########################## propose op_go ##################################
##
#
######################## propose op_scan ##################################
#sp {composite-action*propose*op_scan1
#   (state <s> ^problem-space <ps>
#              ^world.robot <rob>)
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<rob> ^current-location <loc>
#          ^havent-scanned <loc>)
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name op_scan1
#        ^action-handle scan1
#         ^action-type primitive)
#}
#
#
#
######################### propose explore ##################################
##sp {composite-action*propose*op_explore1*each*direction
##   (state <s> ^problem-space <ps>)
##   (<ps> ^name action
##         ^action-type primitive
##         ^action.propose-action-operators true)
##-->
##   (<s> ^operator <o> +)
##   (<o> ^name op_explore1
##        ^action
#
######################## propose op_orient ##################################
#
#
######################## propose say message #################################
#sp {composite-action*propose*op_say1*message
#   (state <s> ^problem-space <ps>
#              ^world.objects.object <obj>
#              ^world.objects.object <person>
#              ^world.predicates.predicate <heard>
#              ^world.predicates.predicate <in>
#              ^world.robot.current-location <cur-loc>)
#   (<ps> ^name action
#         ^action.propose-action-operators true)
#   (<obj> ^predicates.category message)
#   (<person> ^predicates.category person)
#   (<in> ^handle in1
#         ^instance <in-i>)
#   (<in-i> ^1 <person> ^2 <cur-loc>)
#   (<heard> ^handle heard2)
#   -{(<heard> ^instance <i>)
#     (<i> ^1 <person> ^2 <obj>)}
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_say1
#         ^action-handle say1
#         ^arg1 <arg1>
#         ^action-type primitive)
#   (<arg1> ^arg-type object
#           ^arg-status imagined
#           ^id <obj>)
#}
#
#
#
############################ propose wait ########################################
###sp {propose*op_wait*operator
###   (state <s> ^problem-space.action <act>)
###   (<act> -^type none)
###-->
###   (<s> ^operator <op> +)
###   (<op> ^name op_wait
###        ^action-type primitive)
###}
###   
###
