###################################################################
#
# problem-space.action.propose-driving-operators << true false >>
#   If true, proposes operators for driving actions
#   	turn, orient, follow-wall, stop
#   These do not have action models or preconditions
#       (Only proposed when trying to match a primitive action command)
#
###################################################################


## op_turn
sp {composite-action*propose*driving-operator*op_turn1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <oleft> +
        ^operator <oright> +
        ^operator <oaround> +)
   (<oleft> ^name op_turn1
            ^action-proposal true
          ^action-handle turn1
          ^action-type primitive
          ^arg1 <left-arg1>)
   (<left-arg1> ^arg-type concept ^handle left1)
   
   (<oright> ^name op_turn1
            ^action-proposal true
             ^action-handle turn1
             ^action-type primitive
             ^arg1 <right-arg1>)
   (<right-arg1> ^arg-type concept ^handle right1)
   
   (<oaround> ^name op_turn1
            ^action-proposal true
             ^action-handle turn1
             ^action-type primitive
             ^arg1 <around-arg1>)
   (<around-arg1> ^arg-type concept ^handle around1)
}

## op_follow-wall1
sp {composite-action*propose*driving-operator*op_follow-wall1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <left-op> +
        ^operator <right-op> +)
   (<left-op> ^name op_follow-wall1
            ^action-proposal true
              ^action-handle follow-wall1
              ^action-type primitive
              ^arg1 <left-arg1>)
   (<left-arg1> ^arg-type object ^arg-status abstract ^id <left-wall>)
   (<left-wall> ^item-type object ^predicates <left-preds>)
   (<left-preds> ^category object ^relative-direction1 left1 ^spatial-shape wall1)

   (<right-op> ^name op_follow-wall1
            ^action-proposal true
               ^action-handle follow-wall1
               ^action-type primitive
               ^arg1 <right-arg1>)
   (<right-arg1> ^arg-type object ^arg-status abstract ^id <right-wall>)
   (<right-wall> ^item-type object ^predicates <right-preds>)
   (<right-preds> ^category object ^relative-direction1 right1 ^spatial-shape wall1)
}

## op_orient1
sp {composite-action*propose*driving-operator*op_orient1*each*direction
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <on> +
        ^operator <os> +
        ^operator <oe> +
        ^operator <ow> +)

   (<on> ^name op_orient1
         ^action-proposal true
         ^action-handle orient1
         ^action-type primitive
         ^arg1 <n-arg1>)
   (<n-arg1> ^arg-type concept ^handle north1)

   (<os> ^name op_orient1
         ^action-proposal true
         ^action-handle orient1
         ^action-type primitive
         ^arg1 <s-arg1>)
   (<s-arg1> ^arg-type concept ^handle south1)

   (<oe> ^name op_orient1
         ^action-proposal true
         ^action-handle orient1
         ^action-type primitive
         ^arg1 <e-arg1>)
   (<e-arg1> ^arg-type concept ^handle east1)

   (<ow> ^name op_orient1
         ^action-proposal true
         ^action-handle orient1
         ^action-type primitive
         ^arg1 <w-arg1>)
   (<w-arg1> ^arg-type concept ^handle west1)
}

## op_stop1
sp {composite-action*propose*driving-operator*op_stop1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_stop1 
        ^action-proposal true
        ^action-handle stop1
        ^action-type primitive)
}

## op_drive-forward1
sp {composite-action*propose*driving-operator*op_drive-forward1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <drive-op> +)
   (<drive-op> ^name op_drive-forward1
               ^action-proposal true
              ^action-handle drive-forward1
              ^action-type primitive)
}

## op_scan1
sp {composite-action*propose*driving-operator*op_scan1
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <scan-op> +)
   (<scan-op> ^name op_scan1
              ^action-proposal true
              ^action-handle scan1
              ^action-type primitive)
}

## op_face1
sp {composite-action*propose*driving-operator*op_face1
   (state <s> ^problem-space <ps>
              ^world.objects.object <obj>
              ^world.robot.current-location <cur-loc>
              ^world.predicates.predicate <in-pred>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
   (<obj> ^predicates <preds>)
   (<preds> ^category object
            ^arm-status not-grabbed
            ^visible false)
   (<in-pred> ^handle in1
              ^instance <i>)
   (<i> ^1 <obj> ^2 <cur-loc>)
-->
   (<s> ^operator <scan-op> +)
   (<scan-op> ^name op_face1
              ^action-proposal true
              ^action-handle face1
              ^action-type primitive
              ^arg1 <obj-arg>)
   (<obj-arg> ^arg-type object
              ^id <obj>)
}

sp {composite-action*propose*driving-operator*op_explore
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.propose-action-operators true
         ^action.propose-driving-operators true)
-->
   (<s> ^operator <o> +)
   (<o> ^name op_explore1
        ^action-proposal true
        ^action-handle explore1
        ^action-type primitive)
}
