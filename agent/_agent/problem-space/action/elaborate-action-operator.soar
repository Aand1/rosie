################## elaborate-action-operator.soar ####################
# These rules elaborate an action-operator onto the action substate
# The copying is controlled by two parameters:
#   problem-space.action.action-operator-copy-type << shallow deep >>
#     Whether the action-operator is elaborated, or deep copied
#   problem-space.action.action-operator-source <action-op>
#     The action-operator to copy 
#
#####################################################################


#####################################################################
# Normal action problem-space
#   elaborate using superstate.operator
sp {action*elaborate*action-operator*superoperator
   (state <s> ^problem-space.name action
              ^superstate.operator <o>)
   (<o> ^action-type << primitive composite >>)
-->
   (<s> ^action-operator <o>)
}

sp {action*problem-space*elaborate*action-operator*deep
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator <operator>)
-->
   (<s> ^action-operator <new-operator>)
}


#####################################################################
# action-operator-copy-type shallow

sp {action*problem-space*elaborate*action-operator*copy-type*shallow
   (state <s> ^problem-space <ps>)
   (<ps> ^name action
         ^action.action-operator-copy-type shallow
         ^action.action-operator-source <action-op>)
-->
   (<s> ^action-operator <action-op>)
}

#####################################################################
# action-operator-copy-type deep

# Copy all attributes that don't have substructure
sp {action*problem-space*elaborate*action-operator*copy-type*deep*level*1
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
   (<src-op> ^<att> <val>)
   -{(<val> ^<sub>)}
-->
   (<new-op> ^<att> <val>)
}

####################################################
# object arguments

# CASE 1:
#   If there is an object listed in the copy-object-map, use that copy
sp {action*problem-space*elaborate*action-operator*copy-type*deep*object*argument*existing
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>
              ^deep-copy-world.copy-objects-map.entry <obj-e>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <src-obj>)
   (<obj-e> ^source <src-obj>
            ^copy <new-obj>)
-->
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <new-obj>)
}

# CASE 2:
#   If there is no object listed in the copy-object-map
#   Create a new deep copy of that object

# Create a new object representation
sp {action*problem-space*elaborate*action-operator*copy-type*deep*object*arugment*new
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
   # Source
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <src-obj>)
   (<src-obj> ^handle <obj-handle>)
-->
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <new-obj>)
   (<new-obj> ^item-type object
              ^handle <obj-handle>
              ^predicates <preds>)
}

# copy predicates onto the new object (if no entry in copy-objects-map)
sp {action*problem-space*elaborate*action-operator*copy-type*deep*object*argument*new*copy*predicates
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>
             -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
   # Source
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <src-obj>)
   (<src-obj> ^predicates.<prop-name> <pred-name>)
   # Copy
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^id <new-obj>)
   (<new-obj> ^predicates <new-preds>)
-->
   (<new-preds> ^<prop-name> <pred-name>)
}

####################################################
# concept arguments

sp {action*problem-space*elaborate*action-operator*copy-type*deep*concept*argument
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
   # Source
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type concept
              ^id <concept>)
-->
   (<new-op> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^id <concept>)
}

####################################################
# concept arguments
   
#### copy predicate argument
sp {action*problem-space*elaborate*action-operator*copy-type*deep*level*1
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
sp {action*problem-space*elaborate*action-operator*deep*predicate*argument
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^deep-copy-world.copy-objects-map.entry <obj-e>
              ^action-operator <new-operator>)
   (<arg> ^arg-type predicate
          ^handle <handle>
          ^2 <src-obj>)
  (<obj-e> ^source <src-obj>
            ^copy <obj>)
-->
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^handle <pred>
              ^2 <obj>)
}

sp {action*problem-space*elaborate*action-operator*copy-type*deep*level*1
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
sp {action*problem-space*elaborate*action-operator*deep*abstract*predicate*argument*level1
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^action-operator <new-operator>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<arg> ^arg-type predicate
          ^handle <pred-handle>
          ^2 <src-obj>)
   (<src-obj> ^handle <obj-handle>)
-->
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
              ^handle <pred-handle>
              ^2 <new-obj>)
   (<new-obj> ^item-type object
              ^handle <obj-handle>
              ^predicates <preds>)
}

sp {action*problem-space*elaborate*action-operator*copy-type*deep*level*1
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
sp {action*problem-space*elaborate*action-operator*deep*abstract*object*argument*level2
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^action-operator <new-operator>
              -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<arg> ^arg-type predicate
          ^2 <src-obj>)
   (<src-obj> ^predicates.<prop-name> <pred-name>)
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^{2}.predicates <new-preds>)
-->
   (<new-preds> ^<prop-name> <pred-name>)
}

#### copy until-clause argument
   
sp {action*problem-space*elaborate*action-operator*copy-type*deep*level*1
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
sp {action*problem-space*elaborate*action-operator*deep*until-clause*argument
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^action-operator <new-operator>)
   (<arg> ^arg-type until-clause)
-->
   (<new-operator> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type until-clause)
}
   
sp {action*problem-space*elaborate*action-operator*copy-type*deep*level*1
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
sp {action*problem-space*elaborate*action-operator*deep*until-clause*state*predicate
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^deep-copy-world.copy-objects-map.entry <obj-e>
              ^action-operator.<arg-name> <new-arg>)
   (<arg> ^arg-type until-clause
          ^predicate <until-pred>)
   (<until-pred> ^type state
                 ^handle <pred>
                 ^property-handle <prop-handle>
                 ^1 <src-obj>)
   (<obj-e> ^source <src-obj>
             ^copy <obj>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <pred>
               ^property-handle <prop-handle>
               ^1 <obj>)
}

sp {action*problem-space*elaborate*action-operator*copy-type*deep*level*1
   (state <s> ^problem-space <ps>
              ^action-operator <new-op>)
   (<ps> ^name action
         ^action.action-operator-copy-type deep
         ^action.action-operator-source <src-op>)
sp {action*problem-space*learning*elaborate*action-operator*deep*until-clause*relation*predicate
   (state <s> ^name evaluate-operator
              ^problem-space.name action
              ^superstate.superstate.action-operator.<arg-name> <arg>
              ^deep-copy-world.copy-objects-map <objs-map>
              ^action-operator.<arg-name> <new-arg>)
   (<arg> ^arg-type until-clause
          ^predicate <until-pred>)
   (<until-pred> ^type relation
                 ^handle <pred>
                 ^1 <src-obj1>
                 ^2 <src-obj2>)
   (<objs-map> ^entry <obj1-e> <obj2-e>)
   (<obj1-e> ^source <src-obj1>
              ^copy <obj1>)
   (<obj2-e> ^source <src-obj2>
              ^copy <obj2>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type relation
               ^handle <pred>
               ^1 <obj1>
               ^2 <obj2>)
}
