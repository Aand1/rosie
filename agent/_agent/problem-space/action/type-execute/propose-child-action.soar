sp {action*problem-space*execute*propose*child-action
   (state <s> -^name execute-action
              ^problem-space.name action
              ^problem-space.action.type execute
              ^child-action <a>)
   (<a> ^validated true
        ^execution-operator <ex>)
-->
   (<s> ^operator <ex> + >)
}

#sp {action*problem-space*execute*propose*child-action*matched
#   (state <s> -^name execute-action
#              ^problem-space.name action
#              ^problem-space.action.type execute
#              ^subaction-matched true
#              ^child-action <a>)
#   (<a> ^execution-operator <ex>)
#-->
#   (<s> ^operator <ex> + >)
#}

sp {action*problem-space*apply*child-action*mark*validated
   (state <s> -^name execute-action
              ^problem-space.name action
              ^problem-space.action.type execute
              ^child-action <a>
              ^match-action <ma>
              ^operator <o>)
   (<a> ^execution-operator <ex>)
   (<ma> ^action-operator <ex>
         ^matched <o>)
-->
   (<a> ^validated true
        ^start-of-execution true)
}

sp {action*problem-space*execute*prefer*child-action*over*matched
   (state <s> -^name execute-action
              ^problem-space.name action
              ^problem-space.action.type execute
              ^child-action.execution-operator <o1>
              ^match-action.matched <o2>
              ^operator <o1> +
              ^operator <o2> +)
-->
   (<s> ^operator <o1> > <o2>)
}
