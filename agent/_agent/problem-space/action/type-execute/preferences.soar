sp {action*problem-space*execute*prefer*smem*over*others
   (state <s> -^name execute-action
              ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name << smem-query smem-retrieve smem-retrieve-lti smem-store >> )
   (<o2> -^name << smem-query smem-retrieve smem-retrieve-lti smem-store >> )
-->
   (<s> ^operator <o1> > <o2>)
}

sp {action*problem-space*execute*prefer*child-action*over*report-success
   (state <s> -^name execute-action
              ^problem-space.name action
              ^problem-space.action.type execute
              ^operator <o1> +
              ^operator <o2> +
              ^child-action.execution-operator <o1>)
   (<o2> ^name report-success)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {action*problem-space*execute*prefer*report-success*over*proposed*action
   (state <s> -^name execute-action
              ^problem-space.name action
              ^problem-space.action.type execute
             -^child-action
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name report-success)
   (<o2> ^action-handle <any>)
-->
   (<s> ^operator <o1> > <o2>)
}


sp {action*problem-space*reject*operators*if*unproposed*subaction
   (state <s> -^name execute-action
              ^problem-space.name action
              ^problem-space.action.type execute
              ^action-id.procedural.subaction.handle <sub-handle>
              ^operator <o> +)
  -{(<s> ^operator <o1> +)
    (<o1> ^subaction-handle <sub-handle>)}
-->
   (<s> ^operator <o> -)
}

sp {action*problem-space*prefer*store-subaction*over*learn-task-subaction
  (state <s> ^problem-space.name action
              ^operator <o1> +
              ^operator <o2> +)
  (<o1> ^name store-subaction)
  (<o2> ^name learn-task-subaction)
-->
  (<s> ^operator <o1> > <o2>)
}
