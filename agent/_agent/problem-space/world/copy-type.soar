sp {problem-space*world*copy-type*shallow*elaborate*world
   (state <s> ^problem-space.world <w>)
   (<w> ^copy-type shallow
       -^copy-type deep
        ^source <world>)
-->
   (<s> ^world <world>)
}

sp {problem-space*world*copy-type*deep*elaborate*world
   (state <s> ^problem-space.world <w>)
   (<w> ^copy-type deep
        ^source <world>)
-->
   (<s> ^world <new-world>
        ^copy-objects-map <objs-map>
        ^copy-predicates-map <preds-map>)
   (<new-world> ^objects <objs>
                ^predicates <preds>
                ^robot <robot>
                ^locations <locs>)
   (<robot> ^arm <arm>)
}

sp {problem-space*world*copy-type*deep*copy*robot
   (state <s> ^problem-space.world <w>
              ^world.robot <robot>)
   (<w> ^copy-type deep
        ^source.robot <src-robot>)
   (<src-robot> ^{<att-name> <> arm} <att-val>)
-->
   (<robot> ^<att-name> <att-val>)
}

sp {problem-space*world*copy-type*deep*copy*robot*arm
   (state <s> ^problem-space.world <w>
              ^world.robot.arm <arm>)
   (<w> ^copy-type deep
        ^source.robot.arm <src-arm>)
   (<src-arm> ^{<att-name> <> arm <> predicates} <att-val>)
-->
   (<arm> ^<att-name> <att-val>)
}

sp {problem-space*world*copy-type*deep*copy*object
   (state <s> ^problem-space.world <w>
              ^world.objects <objs>
              ^copy-objects-map <map>)
   (<w> ^copy-type deep
        ^source.objects.object <src-obj>)
-->
   (<objs> ^object <new-obj>)
   (<new-obj> ^predicates <preds>)
   (<map> ^<src-obj> <new-obj>)
}

sp {problem-space*world*copy-type*deep*copy*object*handle
   (state <s> ^problem-space.world.copy-type deep
              ^copy-objects-map.<src-obj> <obj>)
   (<src-obj> ^handle <handle>)
-->
   (<obj> ^handle <handle>)
}

sp {problem-space*world*copy-type*deep*copy*object*predicates
   (state <s> ^problem-space.world.copy-type deep
              ^copy-objects-map.<src-obj> <obj>)
   (<src-obj> ^predicates <src-preds>)
   (<src-preds> ^<pred-name> <pred-val>)
   (<obj> ^predicates <preds>)
-->
   (<preds> ^<pred-name> <pred-val>)
}

sp {problem-space*world*copy-type*deep*copy*location
   (state <s> ^problem-space.world <w>
              ^world.locations <locs>)
   (<w> ^copy-type deep
        ^source.locations.location <loc>)
-->
   (<locs> ^location <loc>)
}

sp {problem-space*world*copy-type*deep*copy*predicate
   (state <s> ^problem-space.world <w>
              ^world.predicates <preds>
              ^copy-predicates-map <map>)
   (<w> ^copy-type deep
        ^source.predicates.predicate <src-pred>)
-->
   (<preds> ^predicate <new-pred>)
   (<map> ^<src-pred> <new-pred>)
}

sp {problem-space*world*copy-type*deep*copy*predicate*info
   (state <s> ^problem-space.world.copy-type deep
              ^copy-predicates-map.<src-pred> <pred>)
   (<src-pred> ^handle <pred-handle>)
-->
   (<pred> ^handle <pred-handle>)
}

sp {problem-space*world*copy-type*deep*copy*predicate*instance*size*2
   (state <s> ^problem-space.world.copy-type deep
              ^copy-predicates-map.<src-pred> <pred>
              ^copy-objects-map.<src-obj1> <obj1>
              ^copy-objects-map.<src-obj2> <obj2>)
   (<src-pred> ^instance <src-instance>)
   (<src-instance> ^1 <src-obj1> ^2 <src-obj2> -^3)
-->
   (<pred> ^instance <new-instance>)
   (<new-instance> ^1 <obj1> ^2 <obj2>)
}
