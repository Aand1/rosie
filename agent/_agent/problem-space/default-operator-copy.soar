sp {problem-space*default-operator-copy*yes*elaborate*dont-copy
   (state <s> ^problem-space <ps>)
   (<ps> ^default-operator-copy yes)
-->
   (<ps> ^dont-copy arg1 arg2 until-clause)
}

sp {problem-space*default-operator-copy*yes*copy*object*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj-e>)
   (<obj-e> ^source <src-obj>
             ^copy <obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <src-obj>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <obj>)
}

# LINK
#sp {problem-space*default-operator-copy*yes*copy*object*arg*linked-to
#   (state <s> ^problem-space.default-operator-copy yes
#              ^operator <o> +
#              ^deep-copy-world <dcw>)
#   (<dcw> ^copy-objects-map.entry <obj-e>)
#   (<obj-e> ^source <src-obj>
#             ^copy <obj>)
#   (<o> ^duplicate-of.<arg-name> <src-arg>
#        ^<arg-name> <new-arg>)
#   (<src-arg> ^arg-type object
#              ^id.linked-to <src-obj>)
#   (<new-arg> ^id <new-obj>)
#-->
#   (<new-obj> ^linked-to <obj>)
#}

sp {problem-space*default-operator-copy*yes*copy*abstract*object*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
             -^deep-copy-world.copy-objects-map.entry.source <obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <obj>)
   (<obj> ^handle <src-handle>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <new-obj>)
   (<new-obj> ^item-type object
              ^handle <src-handle>
              ^predicates <preds>)
}

sp {problem-space*default-operator-copy*yes*copy*abstract*object*arg*predicates
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
             -^deep-copy-world.copy-objects-map.entry.source <obj>)
   (<o> ^duplicate-of.<arg-name> <src-arg>
        ^<arg-name> <new-arg>)
   (<src-arg> ^arg-type object
              ^id <obj>
              ^id.predicates.<prop-name> <pred-name>)
   (<new-arg> ^id.predicates <new-preds>)
-->
   (<new-preds> ^<prop-name> <pred-name>)
}

sp {problem-space*default-operator-copy*yes*copy*concept*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type concept
              ^handle <concept-handle>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^handle <concept-handle>)
}

sp {problem-space*default-operator-copy*yes*copy*predicate*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj-e>)
   (<obj-e> ^source <src-obj> 
            ^copy <obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type predicate
              ^handle <pred-handle>
              ^2 <src-obj>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
               ^handle <pred-handle>
               ^2 <obj>)
}

# LINK
#sp {problem-space*default-operator-copy*yes*copy*predicate*arg*linked-to
#   (state <s> ^problem-space.default-operator-copy yes
#              ^operator <o> +
#              ^deep-copy-world <dcw>)
#   (<dcw> ^copy-objects-map.entry <obj-e>)
#   (<obj-e> ^source <src-obj> 
#            ^copy <obj2>)
#   (<o> ^duplicate-of.<arg-name> <src-arg>
#        ^<arg-name> <new-arg>)
#   (<src-arg> ^arg-type predicate
#              ^{2}.linked-to <src-obj>)
#   (<new-arg> ^2 <new-obj2>)
#-->
#   (<new-obj2> ^linked-to <obj2>)
#}

sp {problem-space*default-operator-copy*yes*copy*predicate*abstract
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
             -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type predicate
              ^handle <pred-handle>
              ^2 <src-obj>)
   (<src-obj> ^handle <src-handle>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
               ^handle <pred-handle>
               ^2 <new-obj>)
   (<new-obj> ^item-type object
              ^handle <src-handle>
              ^predicates <new-preds>)

}

sp {problem-space*default-operator-copy*yes*copy*predicate*abstract*object*predicates
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
             -^deep-copy-world.copy-objects-map.entry.source <src-obj>)
   (<o> ^duplicate-of.<arg-name> <src-arg>
        ^<arg-name> <new-arg>)
   (<src-arg> ^arg-type predicate
              ^handle <pred-handle>
              ^2 <src-obj>
              ^{2}.predicates.<prop-name> <pred-name>)
   (<new-arg> ^{2}.predicates <new-preds>)
-->
   (<new-preds> ^<prop-name> <pred-name>)
}

sp {problem-space*default-operator-copy*yes*copy*until-clause*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type until-clause)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type until-clause)
}

sp {problem-space*default-operator-copy*yes*copy*until-clause*state*predicate
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj-e>)
   (<obj-e> ^source <src-obj>
             ^copy <obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type until-clause
              ^predicate <src-pred>)
   (<src-pred> ^type state
               ^handle <pred-handle>
               ^property-handle <prop-handle>
               ^1 <src-obj>)
   (<o> ^<arg-name> <new-arg>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <pred-handle>
               ^property-handle <prop-handle>
               ^1 <obj>)
}

sp {problem-space*default-operator-copy*yes*copy*until-clause*relation*predicate
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj1-e>
          ^copy-objects-map.entry <obj2-e>)
   (<obj1-e> ^source <src-obj1>
             ^copy <obj1>)
   (<obj2-e> ^source <src-obj2>
             ^copy <obj2>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type until-clause
              ^predicate <src-pred>)
   (<src-pred> ^type relation
               ^handle <pred-handle>
               ^1 <src-obj1>
               ^2 <src-obj2>)
   (<o> ^<arg-name> <new-arg>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type relation
               ^handle <pred-handle>
               ^1 <obj1>
               ^2 <obj2>)
}
