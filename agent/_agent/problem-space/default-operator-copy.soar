sp {problem-space*default-operator-copy*yes*elaborate*dont-copy
   (state <s> ^problem-space <ps>)
   (<ps> ^default-operator-copy yes)
-->
   (<ps> ^dont-copy arg1 arg2 until-clause)
}

sp {problem-space*default-operator-copy*yes*copy*object*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj-e>)
   (<obj-e> ^source <src-obj>
             ^copy <obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type << object location >>
              ^arg-status { <status> << visible imagined >> }
              ^id <src-obj>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^arg-status <status>
              ^id <obj>)
}

sp {problem-space*default-operator-copy*yes*copy*abstract*object*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type << object location >>
              ^arg-status abstract
              ^id <obj>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^arg-status abstract
              ^id <obj>)
}

sp {problem-space*default-operator-copy*yes*copy*concept*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type concept
              ^handle <concept-handle>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^handle <concept-handle>)
}

sp {problem-space*default-operator-copy*yes*copy*predicate*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj-e>)
   (<obj-e> ^source <src-obj> 
            ^copy <obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type predicate
              ^arg-status { <status> << visible imagined desired >> }
              ^handle <pred-handle>
              ^2 <src-obj>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
               ^arg-status <status>
               ^handle <pred-handle>
               ^2 <obj>)
}

sp {problem-space*default-operator-copy*yes*copy*predicate*abstract
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type predicate
              ^arg-status abstract
              ^handle <pred-handle>
              ^2 <src-obj>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
               ^arg-status abstract
               ^handle <pred-handle>
               ^2 <src-obj>)
}

sp {problem-space*default-operator-copy*yes*copy*until-clause*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type until-clause)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type until-clause)
}

sp {problem-space*default-operator-copy*yes*copy*until-clause*state*predicate
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj-e>)
   (<obj-e> ^source <src-obj>
             ^copy <obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type until-clause
              ^predicate <src-pred>)
   (<src-pred> ^type state
               ^handle <pred>
               ^1 <src-obj>)
   (<o> ^<arg-name> <new-arg>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <pred>
               ^1 <obj>)
}

sp {problem-space*default-operator-copy*yes*copy*until-clause*relation*predicate
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj1-e>
          ^copy-objects-map.entry <obj2-e>)
   (<obj1-e> ^source <src-obj1>
             ^copy <obj1>)
   (<obj2-e> ^source <src-obj2>
             ^copy <obj2>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type until-clause
              ^predicate <src-pred>)
   (<src-pred> ^type relation
               ^handle <pred>
               ^1 <src-obj1>
               ^2 <src-obj2>)
   (<o> ^<arg-name> <new-arg>)
-->
   (<new-arg> ^predicate <new-pred>)
   (<new-pred> ^type relation
               ^handle <pred>
               ^1 <obj1>
               ^2 <obj2>)
}
