sp {problem-space*default-operator-copy*yes*elaborate*dont-copy
   (state <s> ^problem-space <ps>)
   (<ps> ^default-operator-copy yes)
-->
   (<ps> ^dont-copy arg1 arg2)
}

sp {problem-space*default-operator-copy*yes*copy*object*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^copy-objects-map.<src-obj> <obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <src-obj>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type object
              ^id <obj>)
}

sp {problem-space*default-operator-copy*yes*copy*concept*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type concept
              ^id <concept-id>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type concept
              ^id <concept-id>)
}

sp {problem-space*default-operator-copy*yes*copy*predicate*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <o> +
              ^copy-objects-map.<src-obj> <obj>)
   (<o> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type predicate
              ^id <pred>
              ^2 <src-obj>)
-->
   (<o> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type predicate
               ^id <pred>
               ^2 <obj>)
}