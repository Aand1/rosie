sp {problem-space*state*world-to-copy*default
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy <any>
            ^state-to-copy.world <world>
           -^world-to-copy <> <world>)
-->
   (<state> ^world-to-copy <world>)
}

sp {problems-pace*state*world-copy*shallow
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy shallow
            ^world-to-copy <world>)
-->
   (<s> ^world <world>)
}

sp {problem-space*state*world-copy*deep*copy*world
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy deep
            ^world-to-copy <source>)
-->
   (<s> ^world <w>)
   (<w> ^objects <objs>
        ^predicates <preds>
        ^robot <robot>)
   (<robot> ^arm <arm>)
}

sp {problem-space*state*world-copy*deep*elaborate*maps
   (state <s> ^problem-space.state <state>)
   (<state> ^world-copy deep
            ^world-to-copy <source>)
-->
   (<s> ^copy-object-map <map>
        ^copy-predicate-map <pred-map>)
}

sp {problem-space*state*world-copy*deep*copy*robot
   (state <s> ^problem-space.state <state>
              ^world.robot <copy-robot>)
   (<state> ^world-copy deep
            ^world-to-copy <source>)
   (<source> ^robot <src-robot>)
   (<src-robot> ^{<att-name> <> arm} <att-val>)
-->
   (<copy-robot> ^<att-name> <att-val>)
}

sp {problem-space*state*world-copy*deep*copy*robot*arm
   (state <s> ^problem-space.state <state>
              ^world.robot.arm <copy-arm>)
   (<state> ^world-copy deep
            ^world-to-copy <source>)
   (<source> ^robot.arm <src-arm>)
   (<src-arm> ^{<att-name> <> arm <> predicates} <att-val>)
-->
   (<copy-arm> ^<att-name> <att-val>)
}

sp {problem-space*state*world-copy*deep*copy*object
   (state <s> ^problem-space.state <state>
              ^world.objects <objs>
              ^copy-object-map <map>)
   (<state> ^world-copy deep
            ^world-to-copy <source>)
   (<source> ^objects.object <src-obj>)
-->
   (<map> ^<src-obj> <copy-obj>)
   (<objs> ^object <copy-obj>)
   (<copy-obj> ^predicates <preds>)
}

sp {problem-space*state*world-copy*deep*copy*object*id
   (state <s> ^problem-space.state.world-copy deep
            ^copy-object-map.<src-obj> <copy-obj>)
   (<src-obj> ^id <id>)
-->
   (<copy-obj> ^id <id>)
}

sp {problem-space*state*world-copy*deep*copy*object*predicates
   (state <s> ^problem-space.state.world-copy deep
            ^copy-object-map.<src-obj> <copy-obj>)
   (<src-obj> ^predicates <src-preds>)
   (<copy-obj> ^predicates <copy-preds>)
   (<src-preds> ^<pred-name> <pred-val>)
-->
   (<copy-preds> ^<pred-name> <pred-val>)
}

sp {problem-space*state*world-copy*deep*copy*predicate
   (state <s> ^problem-space.state <state>
              ^world.predicates <preds>
              ^copy-predicate-map <map>)
   (<state> ^world-copy deep
            ^world-to-copy <source>)
   (<source> ^predicates.predicate <src-pred>)
-->
   (<map> ^<src-pred> <copy-pred>)
   (<preds> ^predicate <copy-pred>)
}

sp {problem-space*state*world-copy*deep*copy*predicate*info
   (state <s> ^problem-space.state.world-copy deep
            ^copy-predicate-map.<src-pred> <copy-pred>)
   (<src-pred> ^name <pred-name>
                 ^predicate-info <pred-info>)
-->
   (<copy-pred> ^name <pred-name>
                ^predicate-info <pred-info>)
}

sp {problem-space*state*world-copy*deep*copy*predicate*instance
   (state <s> ^problem-space.state.world-copy deep
            ^copy-predicate-map.<src-pred> <copy-pred>
            ^copy-object-map.<src-obj1> <copy-obj1>
            ^copy-object-map.<src-obj2> <copy-obj2>)
   (<src-pred> ^instance <src-instance>)
   (<src-instance> ^1 <src-obj1> ^2 <src-obj2>)
-->
   (<copy-pred> ^instance <copy-instance>)
   (<copy-instance> ^1 <copy-obj1> ^2 <copy-obj2>)
}

