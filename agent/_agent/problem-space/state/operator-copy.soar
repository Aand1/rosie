sp {problem-space*default-operator-copy*yes*elaborate*dont-copy
   (state <s> ^problem-space.default-operator-copy yes
              ^problem-space <ps>)
-->
   (<ps> ^dont-copy arg1 arg2)
}

#sp {problem-space*state*operator-copy*deep*copy*level1*attributes
#   (state <s> ^problem-space.default-operator-copy yes
#              ^copy-operator-map.<src-op> <copy-op>
#              ^copy-object-map.<src-obj> <copy-obj>)
#   (<src-op> ^{ <att-name> << name action-type action-name >> } <att-val>)
#-->
#   (<copy-op> ^<att-name> <att-val>)
#}

sp {problem-space*state*operator-copy*deep*copy*object*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <copy-op> +
              ^copy-object-map.<src-obj> <copy-obj>)
   (<copy-op> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type object
              ^id <src-obj>)
-->
   (<copy-op> ^<arg-name> <copy-arg>)
   (<copy-arg> ^arg-type object
              ^id <copy-obj>)
}

sp {problem-space*state*operator-copy*deep*copy*concept*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <copy-op> +)
   (<copy-op> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type concept
              ^id <concept>)
-->
   (<copy-op> ^<arg-name> <copy-arg>)
   (<copy-arg> ^arg-type concept
               ^id <concept>)
}

sp {problem-space*state*operator-copy*deep*copy*predicate*arg
   (state <s> ^problem-space.default-operator-copy yes
              ^operator <copy-op> +
              ^copy-object-map.<src-obj> <copy-obj>)
   (<copy-op> ^duplicate-of <src-op>)
   (<src-op> ^<arg-name> <src-arg>)
   (<src-arg> ^arg-type predicate
              ^id <pred>
              ^2 <src-obj>)
-->
   (<copy-op> ^<arg-name> <copy-arg>)
   (<copy-arg> ^arg-type predicate
               ^id <pred>
               ^2 <copy-obj>)
}