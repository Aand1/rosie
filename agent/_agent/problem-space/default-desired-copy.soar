sp {problem-space*default-desired-copy*yes*elaborate*dont-copy
   (state <s> ^problem-space <ps>)
   (<ps> ^default-desired-copy yes)
-->
   (<ps> ^dont-copy predicate)
}

sp {problem-space*default-desired-copy*yes*copy*state*predicate
   (state <s> ^problem-space.default-desired-copy yes
              ^desired <des>
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj-e>)
   (<obj-e> ^source <src-obj> 
            ^copy <obj>)
   (<des> ^duplicate-of.predicate <src-pred>)
   (<src-pred> ^type state
               ^handle <pred-handle>
               ^1 <src-obj>)
-->
   (<des> ^predicate <new-pred>)
   (<new-pred> ^type state
               ^handle <pred-handle>
               ^1 <obj>)
}

sp {problem-space*default-desired-copy*yes*copy*relation*predicate
   (state <s> ^problem-space.default-desired-copy yes
              ^desired <des>
              ^deep-copy-world <dcw>)
   (<dcw> ^copy-objects-map.entry <obj1-e>
          ^copy-objects-map.entry <obj2-e>)
   (<obj1-e> ^source <src-obj1>
             ^copy <obj1>)
   (<obj2-e> ^source <src-obj2>
             ^copy <obj2>)
   (<des> ^duplicate-of.predicate <src-pred>)
   (<src-pred> ^type relation
               ^handle <pred-handle>
               ^1 <src-obj1>
               ^2 <src-obj2>)
-->
   (<des> ^predicate <new-pred>)
   (<new-pred> ^type relation
                ^handle <pred-handle>
                ^1 <obj1>
                ^2 <obj2>)
}
