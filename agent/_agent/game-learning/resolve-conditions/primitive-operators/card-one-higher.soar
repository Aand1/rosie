#board between modernize link.link
# new card-one-higher is inclusive of last param (good for counting dice rolls/mancala, bad for othello...
sp {card-one-higher*propose*elaborate*args
   (state <s> ^name card-one-higher
              ^superstate.operator <o>)
   (<o> ^args <args>
        ^name card-one-higher
        ^parameter <p>)
   (<args> ^num 2 ^1 <a1>#.result <r>
                  ^2 <a2>)#.result <r2>)
-->
   (<s> ^parameter <p>
         ^a <a1>
         ^b <a2>)
}

#sp {card-one-higher*elaborate*objects
#   (state <s> ^name card-one-higher
#              ^linkstate.successive.pair <p>
#              ^a <r>
#              ^b <r2>)
#   (<r> ^result.set.pair.{<arg1> 1} <obja>)# ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.set.pair.<arg1> {<objb> <> <obja>})# ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<p> ^1 <val2> ^2 <val>)
#   (<obja> ^value <val>)
#   (<objb> ^value <val2>)
#-->
#   (interrupt)
#   (<s> ^pair <s1>)
#   (<s1> ^1 <obja> ^2 <objb>)# ^diff (- <val> <val2>))
#}
sp {card-one-higher*elaborate*objects
   (state <s> ^name card-one-higher
              ^linkstate.successive.pair <p>
              ^a <r>
              ^b <r2>)
   (<r> ^result.set.pair.{<arg1> 1} <val>)# ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
   (<r2> ^result.set.pair.<arg1> <val2>)# ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
   (<p> ^1 <val2> ^2 <val>)
-->
   (interrupt)
   (<s> ^pair <s1>)
   (<s1> ^1 <val> ^2 <val2>)# ^diff (- <val> <val2>))
}

sp {card-one-higher*elaborate*objectszz
   (state <s> ^name card-one-higher
              ^superstate.condition.result.set <res>
              ^operator <op>
              ^pair <s1>)  
   (<op> ^name complete ^pair <s1>)
#   (<s1> ^diff 1)
-->
  (<res> ^pair <s1>)
}

sp {card-one-higher*elaborate*result
   (state <s> ^name card-one-higher)
-->
   (<s> ^result.set <res>)
}


#sp {card-one-higher*elaborate*pairs*samex
#   (state <s> ^name card-one-higher
#             # ^pair <s1>
#              ^a <r>
#              ^c <r3>
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<objb> ^id <idb> ^x <x> ^y <y1>)
#   (<obja> ^id <ida> ^x <x> ^y <y2>)
#   (<objc> ^id <idc> ^x <x>)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
# -{(<objc> ^y {<y> >= <y1>} ^y {<y> >= <y2>})}
# -{(<objc> ^y {<y> <= <y1>} ^y {<y> <= <y2>})}
#-->
#   (<set> ^object <objc>)
#}

#option inclusive (bit of a hack)
#useful for counting out places (backgammon,mancala)
#sp {card-one-higher*elaborate*pairs*samex*inclusive
#   (state <s> ^name card-one-higher
#            #  ^pair <s1>
#              ^superstate.operator.inclusive true
#              ^a <r>
#              ^c <r3>
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
#   (<objb> ^id <idb> ^x <x> ^y {<y1> <> <y2>})
#   (<obja> ^id <ida> ^x <x> ^y <y2>)
#   (<objc> ^id <idb>)
#-->
#   (<set> ^object <objc>)
#}
#
#sp {card-one-higher*elaborate*pairs*samey*inclusive
#   (state <s> ^name card-one-higher
#          #    ^pair <s1>
#              ^a <r>
#              ^c <r3>
#              ^superstate.operator.inclusive true
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
#   (<objb> ^id <idb> ^y <x> ^x {<y1> <> <y2>})
#   (<obja> ^id <ida> ^y <x> ^x <y2>)
#   (<objc> ^id <idb>)
#-->
#   (<set> ^object <objc>)
#}


#sp {card-one-higher*elaborate*result-pairs
#   (state <s> ^name card-one-higher
# #             ^result.set <res>
#              ^pair <set>)
# #  (<set> ^c.object <p>)
#-->
#   (<res> ^pair <set>)
#}
sp {card-one-higher*propose*complete
   (state <s> ^name card-one-higher
              ^pair <pair>
              ^result.set <res>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete
        ^pair <pair>)
}

#search control hack
#sp {card-one-higher*perference*complete*samex
#   (state <s> ^name card-one-higher
#              ^operator <o1> +)
#   (<o1> ^name complete ^pair <pair>)
#   (<pair> ^a <obja> ^b <objb>)
#   (<obja> ^y <x> ^x <y>)
#   (<objb> ^y <x> -^x <y>)
#-->
#   (<s> ^operator <o1> >)
#}
