#board between modernize link.link
# new board-between is inclusive of last param (good for counting dice rolls/mancala, bad for othello...
sp {board-between*propose*elaborate*args
   (state <s> ^name board-between
              ^superstate.operator <o>)
   (<o> ^args <args>
        ^name board-between
        ^parameter <p>)
   (<args> ^num 3 ^1 <a1>#.result <r>
                  ^2 <a2>#.result <r2>
                  ^3 <a3>)#.result <r3>)
-->
   (<s> ^parameter <p>
         ^a <a1>
         ^b <a2>
         ^c <a3>)
}

sp {board-between*elaborate*objects
   (state <s> ^name board-between
              ^superstate.operator.name board-between
              ^b <r>
              ^c <r2>)
   (<r> ^result.set.pair.{1} <obja>)
   (<r2> ^result.set.pair.{1} {<objb> <> <obja>})
-->
#   (interrupt)
   (<s> ^pair <s1>)
   (<s1> ^2 <obja> ^3 <objb> ^1 <set>)
}

sp {board-between*elaborate*objectszz
   (state <s> ^name board-between
              ^superstate.operator.name board-between
              ^superstate.condition.result.set <res>
              ^operator <op>
              #^a <r>
              #^c <r3>
              #^b <r2>
              ^pair <s1>)
 #  (<op> ^name complete ^pair <pair>)
#   (<pair> ^c.object)
   
      (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<objb> ^{<xy> << y x >>} <x> ^{<yx> << y x >>} <y1>)
#   (<obja> ^<xy> <x> ^{<yx> <> <xy>} <y2>)
#   (<objc> ^<xy> <x>)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
# -{(<objc> ^<yx> {<y> >= <y1>} ^<yx> {<y> >= <y2>})}
# -{(<objc> ^<yx> {<y> <= <y1>} ^<yx> {<y> <= <y2>})}
-->
  (<res> ^pair <s1>)
}

#sp {board-between*elaborate*result
#   (state <s> ^name board-between
#              ^superstate.operator.name board-between)
#-->
#   (<s> ^result.set <res>)
#}


#sp {board-between*elaborate*pairs*samex
#   (state <s> ^name board-between
#             # ^pair <s1>
#              ^a <r>
#              ^c <r3>
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<objb> ^id <idb> ^x <x> ^y <y1>)
#   (<obja> ^id <ida> ^x <x> ^y <y2>)
#   (<objc> ^id <idc> ^x <x>)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
# -{(<objc> ^y {<y> >= <y1>} ^y {<y> >= <y2>})}
# -{(<objc> ^y {<y> <= <y1>} ^y {<y> <= <y2>})}
#-->
#   (<set> ^object <objc>)
#}

#sp {board-between*elaborate*pairs*sameyx
#   (state <s> ^name board-between
#           #   ^pair <s1>
#              ^a <r>
#              ^c <r3>
#             ^superstate.operator <sop>
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<sop> ^name board-between -^type between-inclusive)
#   (<r> ^result.set.pair.{1} <objc>)
#   (<r2> ^result.set.pair.{1} <obja>)
#   (<r3> ^result.set.pair.{1} <objb>)
#   (<objb> ^{<xy> << y x >>} <x> ^{<yx> << y x >>} <y1>)
#   (<obja> ^<xy> <x> ^{<yx> <> <xy>} <y2>)
#   (<objc> ^<xy> <x>)
#   (<s1> ^2 <obja> ^3 <objb> ^1 <set>)
# -{(<objc> ^<yx> {<y> >= <y1>} ^<yx> {<y> >= <y2>})}
# -{(<objc> ^<yx> {<y> <= <y1>} ^<yx> {<y> <= <y2>})}
#-->
#   (<set> ^object <objc>)
# #  (<s1> ^done true)
#}
sp {board-between*elaborate*pairs*samey
   (state <s> ^name board-between
           #   ^pair <s1>
              ^a <r>
              ^c <r3>
             ^superstate.operator <sop>
              ^b <r2>
              ^superstate.condition.result.set.pair <s1>
              ^operator <op>)
   (<op> ^name complete ^pair <s1>)
   (<sop> ^name board-between ^type between)
   (<r> ^result.set.pair.{1} <objc>)
   (<r2> ^result.set.pair.{1} <obja>)
   (<r3> ^result.set.pair.{1} <objb>)
   (<objb> ^x <x> ^y <y1>)
   (<obja> ^x <x> ^y <y2>)
   (<objc> ^x <x>)
   (<s1> ^2 <obja> ^3 <objb> ^1 <set>)
 -{(<objc> ^y {<y> >= <y1>} ^y {<y> >= <y2>})}
 -{(<objc> ^y {<y> <= <y1>} ^y {<y> <= <y2>})}
-->
   (<set> ^object <objc>)
#   (<s1> ^done true)
}
sp {board-between*elaborate*pairs*samex
   (state <s> ^name board-between
           #   ^pair <s1>
              ^a <r>
              ^c <r3>
             ^superstate.operator <sop>
              ^b <r2>
              ^superstate.condition.result.set.pair <s1>
              ^operator <op>)
   (<op> ^name complete ^pair <s1>)
   (<sop> ^name board-between ^type between)
   (<r> ^result.set.pair.{1} <objc>)
   (<r2> ^result.set.pair.{1} <obja>)
   (<r3> ^result.set.pair.{1} <objb>)
   (<objb> ^y <x> ^x <y1>)
   (<obja> ^y <x> ^x <y2>)
   (<objc> ^y <x>)
   (<s1> ^2 <obja> ^3 <objb> ^1 <set>)
 -{(<objc> ^x {<y> >= <y1>} ^x {<y> >= <y2>})}
 -{(<objc> ^x {<y> <= <y1>} ^x {<y> <= <y2>})}
-->
   (<set> ^object <objc>)
#   (<s1> ^done true)
}

#sp {board-between*elaborate*pairs*sameyx*inclusive
#   (state <s> ^name board-between
#           #   ^pair <s1>
#              ^a <r>
#              ^c <r3>
#             ^superstate.operator <sop>
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<sop> ^name board-between ^type between-inclusive)
#   (<r> ^result.set.pair.{1} <objc>)
#   (<r2> ^result.set.pair.{1} <obja>)
#   (<r3> ^result.set.pair.{1} <objb>)
#   (<objb> ^{<xy> << y x >>} <x> ^{<yx> << y x >>} <y1>)
#   (<obja> ^<xy> <x> ^{<yx> <> <xy>} <y2>)
#   (<objc> ^<xy> <x>)
#   (<s1> ^2 <obja> ^3 <objb> ^1 <set>)
# -{(<objc> ^<yx> {<y> > <y1>} ^<yx> {<y> >= <y2>})}
# -{(<objc> ^<yx> {<y> < <y1>} ^<yx> {<y> <= <y2>})}
#-->
#   (<set> ^object <objc>)
##   (<s1> ^done true)
#}
sp {board-between*elaborate*pairs*samey*inclusive
   (state <s> ^name board-between
           #   ^pair <s1>
              ^a <r>
              ^c <r3>
             ^superstate.operator <sop>
              ^b <r2>
              ^superstate.condition.result.set.pair <s1>
              ^operator <op>)
   (<op> ^name complete ^pair <s1>)
   (<sop> ^name board-between ^type between-inclusive)
   (<r> ^result.set.pair.{1} <objc>)
   (<r2> ^result.set.pair.{1} <obja>)
   (<r3> ^result.set.pair.{1} <objb>)
   (<objb> ^x <x> ^y <y1>)
   (<obja> ^x <x> ^y <y2>)
   (<objc> ^x <x>)
   (<s1> ^2 <obja> ^3 <objb> ^1 <set>)
 -{(<objc> ^y {<y> > <y1>} ^y {<y> >= <y2>})}
 -{(<objc> ^y {<y> < <y1>} ^y {<y> <= <y2>})}
-->
   (<set> ^object <objc>)
#   (<s1> ^done true)
}
sp {board-between*elaborate*pairs*samex*inclusive
   (state <s> ^name board-between
           #   ^pair <s1>
              ^a <r>
              ^c <r3>
             ^superstate.operator <sop>
              ^b <r2>
              ^superstate.condition.result.set.pair <s1>
              ^operator <op>)
   (<op> ^name complete ^pair <s1>)
   (<sop> ^name board-between ^type between-inclusive)
   (<r> ^result.set.pair.{1} <objc>)
   (<r2> ^result.set.pair.{1} <obja>)
   (<r3> ^result.set.pair.{1} <objb>)
   (<objb> ^y <x> ^x <y1>)
   (<obja> ^y <x> ^x <y2>)
   (<objc> ^y <x>)
   (<s1> ^2 <obja> ^3 <objb> ^1 <set>)
 -{(<objc> ^x {<y> > <y1>} ^x {<y> >= <y2>})}
 -{(<objc> ^x {<y> < <y1>} ^x {<y> <= <y2>})}
-->
   (<set> ^object <objc>)
#   (<s1> ^done true)
}
#sp {board-between*elaborate*pairs*sameyx*inclusive
#   (state <s> ^name board-between
#           #   ^pair <s1>
#              ^a <r>
#              ^c <r3>
#             ^superstate.operator.inclusive true
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objb> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<objb> ^{<xy> << y x >>} <x> ^{<yx> << y x >>} <y1>)
#   (<obja> ^<xy> <x> ^{<yx> <> <xy>} {<y2> <> <y1>})
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
#-->
#   (<set> ^object <objb>)
#}

#option inclusive (bit of a hack)
#useful for counting out places (backgammon,mancala)
#sp {board-between*elaborate*pairs*samex*inclusive
#   (state <s> ^name board-between
#            #  ^pair <s1>
#              ^superstate.operator.inclusive true
#              ^a <r>
#              ^c <r3>
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
#   (<objb> ^id <idb> ^x <x> ^y {<y1> <> <y2>})
#   (<obja> ^id <ida> ^x <x> ^y <y2>)
#   (<objc> ^id <idb>)
#-->
#   (<set> ^object <objc>)
#}
#
#sp {board-between*elaborate*pairs*samey*inclusive
#   (state <s> ^name board-between
#          #    ^pair <s1>
#              ^a <r>
#              ^c <r3>
#              ^superstate.operator.inclusive true
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
#   (<objb> ^id <idb> ^y <x> ^x {<y1> <> <y2>})
#   (<obja> ^id <ida> ^y <x> ^x <y2>)
#   (<objc> ^id <idb>)
#-->
#   (<set> ^object <objc>)
#}


#sp {board-between*elaborate*result-pairs
#   (state <s> ^name board-between
# #             ^result.set <res>
#              ^pair <set>)
# #  (<set> ^c.object <p>)
#-->
#   (<res> ^pair <set>)
#}
sp {board-between*propose*complete
   (state <s> ^name board-between
              ^pair <pair>)
              #^superstate.operator.name board-between
              #^result.set <res>)
#   -{(<s> ^pair <s1>)
#     (<s1> ^c.object <p>)
#     (<res> -^pair <s1>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete
        ^pair <pair>)
}

#search control hack
sp {board-between*perference*complete*samex
   (state <s> ^name board-between
              ^operator <o1> +)
   (<o1> ^name complete ^pair <pair>)
   (<pair> ^2 <obja> ^3 <objb>)
   (<obja> ^y <x> ^x <y>)
   (<objb> ^y <x> -^x <y>)
-->
   (<s> ^operator <o1> >)
}

#sp {board-between*apply*complete
#   (state <s> ^name board-between
#              ^result <res>
#              ^superstate <ss>
#              ^operator.name complete)
#-->
#   (<ss> ^result <res>)
#}
