sp {soar-sum*propose*complete
   (state <s> ^name soar-sum
              ^pair <pair>)
-->
#   (interrupt)
   (<s> ^operator <o> + =)
   (<o> ^name complete
        ^pair <pair>)
}
sp {soar-sum*apply*complete
   (state <s> ^name soar-sum
              ^superstate.condition.result.set <res>
              ^operator <op>
              ^pair <s1>)  
   (<op> ^name complete ^pair <s1>)
#   (<s1> ^diff 1)
-->
  (<res> ^pair <s1>)
}

#sp {soar-sum*apply
#    (state <s1> ^gtype <gtype> ^list <l1> ^<gtype> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^result.set.pair <p2>)
#    (<p2> ^soar_sum <thing>)
#-->
#   (<p2> ^1 (sum <thing>))
#}
sp {soar-sum*numeric-evaluate*value
   (state <s> ^name soar-sum
              ^linkstate <ls>
            #  ^superstate <ss>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^args <args> ^parameter.num < 2)
   (<args> ^num 1
           ^2 <a1>)
   (<a1> ^result.set.pair.{1} <set>)# ^parameter.result.link.link.<s2>.<o2>.<elem2> holder)  
     -{(state <ls>)
    (<set> -^<something>)}
-->
   (<s> ^pair <p>)
   #(<p> ^soar_sum <set>)#<arg1> (sum <set>))
   (<p> ^1 (sum <set>))
}

sp {soar-sum*numeric-evaluate*value*pair
   (state <s> ^name soar-sum
            #  ^superstate <ss>
              ^linkstate <ls>
              #^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^args <args> ^parameter.num 2 ^name soar-sum)
   (<args> ^num 1
           ^2 <a1>)
   (<a1> ^result.set.pair.{1} <obja>)
  -{(state <ls>)
    (<obja> -^<something>)}
-->
#   (interrupt)
#   (<ss> ^result <res>)
   (<s> ^pair <pair>)
   #(<pair> ^2 <obja> ^soar_sum <obja>)
   (<pair> ^2 <obja> ^1 (sum <obja>))
}