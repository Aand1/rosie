#board between modernize link.link
# new integer-range is inclusive of last param (good for counting dice rolls/mancala, bad for othello...
sp {integer-range*propose*elaborate*args
   (state <s> ^name integer-range
              ^superstate.operator <o>)
   (<o> ^args <args>
        ^name integer-range
        ^parameter <p>)
   (<args> ^num 3 ^{<arg1> 1} <a1>#.result <r>
                  ^{<arg2> 2} <a2>#.result <r2>
                  ^{<arg3> 3} <a3>)#.result <r3>)
-->
   (<s> ^parameter <p>
         ^a <a1>
         ^b <a2>
         ^c <a3>)
}

sp {integer-range*elaborate*objects
   (state <s> ^name integer-range
              ^b <r>
              ^a <r3>
              ^c <r2>)
   (<r> ^result.set.pair.{<arg1> 1} <obja>)
   (<r2> ^result.set.pair.<arg1> {<objb> > <objc>})
   (<r3> ^result.set.pair.<arg1> {<objc> > <obja>})
-->
   (interrupt)
   (<s> ^pair <s1>)
   (<s1> ^2 <obja> ^3 <objb> ^1 <objc>)
}

sp {integer-range*elaborate*objectszz
   (state <s> ^name integer-range
              ^superstate.condition.result.set <res>
              ^operator <op>
              ^a <r>
              ^c <r3>
              ^b <r2>
              ^pair <s1>)
 #  (<op> ^name complete ^pair <pair>)
#   (<pair> ^c.object)
   
      (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<objb> ^{<xy> << y x >>} <x> ^{<yx> << y x >>} <y1>)
#   (<obja> ^<xy> <x> ^{<yx> <> <xy>} <y2>)
#   (<objc> ^<xy> <x>)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
# -{(<objc> ^<yx> {<y> >= <y1>} ^<yx> {<y> >= <y2>})}
# -{(<objc> ^<yx> {<y> <= <y1>} ^<yx> {<y> <= <y2>})}
-->
  (<res> ^pair <s1>)
}

sp {integer-range*elaborate*result
   (state <s> ^name integer-range)
-->
   (<s> ^result.set <res>)
}


#sp {integer-range*elaborate*pairs*samex
#   (state <s> ^name integer-range
#             # ^pair <s1>
#              ^a <r>
#              ^c <r3>
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<objb> ^id <idb> ^x <x> ^y <y1>)
#   (<obja> ^id <ida> ^x <x> ^y <y2>)
#   (<objc> ^id <idc> ^x <x>)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
# -{(<objc> ^y {<y> >= <y1>} ^y {<y> >= <y2>})}
# -{(<objc> ^y {<y> <= <y1>} ^y {<y> <= <y2>})}
#-->
#   (<set> ^object <objc>)
#}

#sp {integer-range*elaborate*pairs
#   (state <s> ^name integer-range
#           #   ^pair <s1>
#              ^a <r>
#              ^c <r3>
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> {<objb> > <objc>} ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> {<objc> > <obja>} ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
#-->
#   (<set> ^<elem3> <objc>)
#}

#option inclusive (bit of a hack)
#useful for counting out places (backgammon,mancala)
#sp {integer-range*elaborate*pairs*samex*inclusive
#   (state <s> ^name integer-range
#            #  ^pair <s1>
#              ^superstate.operator.inclusive true
#              ^a <r>
#              ^c <r3>
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
#   (<objb> ^id <idb> ^x <x> ^y {<y1> <> <y2>})
#   (<obja> ^id <ida> ^x <x> ^y <y2>)
#   (<objc> ^id <idb>)
#-->
#   (<set> ^object <objc>)
#}
#
#sp {integer-range*elaborate*pairs*samey*inclusive
#   (state <s> ^name integer-range
#          #    ^pair <s1>
#              ^a <r>
#              ^c <r3>
#              ^superstate.operator.inclusive true
#              ^b <r2>
#              ^superstate.condition.result.set.pair <s1>
#              ^operator <op>)
#   (<op> ^name complete ^pair <s1>)
#   (<r> ^result.<se1>.<o1>.<elem> <obja> ^parameter.result.link.link.<se1>.<o1>.<elem> holder)
#   (<r2> ^result.<se2>.<o2>.<elem2> <objb> ^parameter.result.link.link.<se2>.<o2>.<elem2> holder)
#   (<r3> ^result.<se3>.<o3>.<elem3> <objc> ^parameter.result.link.link.<se3>.<o3>.<elem3> holder)
#   (<s1> ^a <obja> ^b <objb> ^c <set>)
#   (<objb> ^id <idb> ^y <x> ^x {<y1> <> <y2>})
#   (<obja> ^id <ida> ^y <x> ^x <y2>)
#   (<objc> ^id <idb>)
#-->
#   (<set> ^object <objc>)
#}


#sp {integer-range*elaborate*result-pairs
#   (state <s> ^name integer-range
# #             ^result.set <res>
#              ^pair <set>)
# #  (<set> ^c.object <p>)
#-->
#   (<res> ^pair <set>)
#}
sp {integer-range*propose*complete
   (state <s> ^name integer-range
              ^pair <pair>
              ^result.set <res>)
#   -{(<s> ^pair <s1>)
#     (<s1> ^c.object <p>)
#     (<res> -^pair <s1>)}
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete
        ^pair <pair>)
}

#search control hack

#sp {integer-range*apply*complete
#   (state <s> ^name integer-range
#              ^result <res>
#              ^superstate <ss>
#              ^operator.name complete)
#-->
#   (<ss> ^result <res>)
#}
