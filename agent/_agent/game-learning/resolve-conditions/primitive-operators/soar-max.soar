#sp {soar-count*propose*complete
#   (state <s> ^name soar-count
#              ^pair <pair>
#              ^result.set <res>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name complete
#        ^pair <pair>)
#}
#sp {soar-count*elaborate*result
#   (state <s> ^name soar-count)
#-->
#   (<s> ^result.set <res>)
#}
#sp {soar-count*apply*complete
#   (state <s> ^name soar-count
#              ^superstate.condition.result.set <res>
#              ^operator <op>
#              ^pair <s1>)  
#   (<op> ^name complete ^pair <s1>)
##   (<s1> ^diff 1)
#-->
#  (<res> ^pair <s1>)
#}


sp {soar-max*numeric-evaluate*single
   (state <s> ^name soar-max
            #  ^superstate <ss>
              ^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^args <args> ^parameter.num 1)
   (<args> ^num 1
           ^{<arg2> 2} <a1>)
   (<a1> -^rtype set ^result.set <rsp>)
   (<rsp> ^pair.{<arg1> 1} <value>)
  -{(<rsp> ^pair.<arg1> {<value2> > <value>})}           
-->
#   (<ss> ^result <res>)
   (<res> ^pair.<arg1> <value>)
}

sp {soar-max*numeric-evaluate*set
   (state <s> ^name soar-max
            #  ^superstate <ss>
              ^superstate.condition.result.set <res>
              ^superstate.operator <o>)
   (<o> ^args <args> ^parameter.num 1)
   (<args> ^num 1
           ^{<arg2> 2} <a1>)
   (<a1> ^rtype set ^result.set.pair.{<arg1> 1} <rsp>)
   (<rsp> ^<something> <value>)
  -{(<rsp> ^<something> {<value2> > <value>})}           
-->
#   (<ss> ^result <res>)
   (<res> ^pair.<arg1> <value>)
}