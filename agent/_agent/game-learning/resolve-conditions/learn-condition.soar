sp {eval-condition*elaborate*conditions
   (state <s> ^name eval-condition
              ^superstate.operator.condition <co>)
-->
   (<s> ^condition <co>)
}

sp {eval-condition*impasse
   (state <s> ^superstate.name eval-condition
              ^choices none
              ^attribute state
              ^superstate.condition <co>
              ^impasse no-change)
-->
#   (force-learn <s>) #these chunks not needed
   (<s> ^name eval-condition-impasse
        #^new-op <op>
        ^condition <co>)
}

#sp {eval-condition-impasse*query*smem
#   (state <s> ^name eval-condition-impasse
#              ^condition <co>
#              ^smem.command <sc>)
#   (<co> ^name <name>)# -^type <type>)
#-->
#   (<sc> ^query <q>)
#   (<q> ^name <name> ^concept <oper>)
#}
#sp {eval-condition-impasse*propose*lookup-operator
#   (state <s> ^name eval-condition-impasse
#              ^result.operator <o>)
#   (<o> -^name)
#-->
#   (<s> ^operator <op> + =)
#   (<op> ^name lookup-operator
#         ^lti <o>)
#}
#sp {eval-condition-impasse*copy-operators
#   (state <s> ^name eval-condition-impasse
#              ^new-op <op>
#              ^result.operator <o>)
#   (<o> ^<something> <a>)
#-->
#   (<op> ^<something> <a>)
#}
#sp {lookup-operator*smem-retrive-lti
#   (state <s> ^name lookup-operator
#              ^superstate.operator.lti <lti>
#              ^smem.command <sc>)
#-->
#   (<sc> ^retrieve <lti>)
#}

sp {eval-condition-impasse*query*success
   (state <s> ^name eval-condition-impasse 
              ^smem.result.success <cue>
              ^smem.result.retrieved <res>)
-->
   (<s> ^result <res>)
}

sp {eval-condition-impasse*propose*with-attribute
   (state <s> ^name eval-condition-impasse
              ^superstate <ss>)
            #  ^result <res>)
   (<ss> ^condition <co>)
   #(<res> ^name <name> ^type attribute ^attribute <attr>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <name> ^type attribute ^attribute <attr>)
   (<args> ^1 <a1>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args2>
         ^name with-attribute
         ^negative <bool>
         ^parameter <p>)
   (<args2> ^3 <a2> ^2 <a3> ^1 <a1>)
   (<a2> ^name number ^args <ag2> ^rtype single ^result.set.pair <a22> ^return-type number)
   (<a22> ^1 <attr>)
   (<a3> ^name number ^args <ag3> ^rtype single ^result.set.pair <a33> ^return-type number)
   (<a33> ^1 <name>)
}
sp {eval-condition-impasse*propose*with-attribute22
   (state <s> ^name eval-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <name> ^type attribute ^attribute <attr>)
   (<args> -^1 <a1>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args2>
         ^name with-attribute
         ^negative <bool>
         ^parameter <p>)
   (<args2> ^3 <a2> ^2 <a3>)
   (<a2> ^name number ^args <ag2> ^rtype single ^result.set.pair <a22> ^return-type number)
   (<a22> ^1 <attr>)
   (<a3> ^name number ^args <ag3> ^rtype single ^result.set.pair <a33> ^return-type number)
   (<a33> ^1 <name>)
}

#normally here need to retrieve structure and elab linkstate predicate (already have)

sp {eval-condition-impasse*propose*top-pair
   (state <s> ^name eval-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <name> ^type state-pair ^attribute <attr>)
 #  (<args> -^1 <a1>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args>
         ^name top-pair
         ^type <name>
         ^attribute <attr>
         ^negative <bool>
         ^parameter <p>)
}

sp {eval-condition-impasse*propose*function
   (state <s> ^name eval-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <name> ^type function ^function <func>)
 #  (<args> -^1 <a1>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args>
         ^name <func>
         ^type <name>
         ^negative <bool>
         ^parameter <p>)
}

sp {eval-condition-impasse*propose*attribute-of
   (state <s> ^name eval-condition-impasse
              ^superstate <ss>)
   (<ss> ^condition <co>)
   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <type> ^type attribute-of)# ^attribute <func>)
 #  (<args> -^1 <a1>)
-->
   (<ss> ^operator <op> + =)
   (<op> ^args <args>
         ^name attribute-of
         ^type <type>
         ^negative <bool>
         ^parameter <p>)
}

#sp {eval-condition-impasse*propose*new-operator
#   (state <s> ^name eval-condition-impasse
#              ^superstate <ss>
#              ^new-op <op>
#              ^superstate.condition <co>
#              ^result <res>)
#   (<op> ^name <name2>)
#   (<res> ^name <name> ^operator.name <name2>)
#   (<co> ^args <args> ^negative <bool> ^parameter <p> ^name <name>)
#-->
#   (<ss> ^operator <op> + =)
#   (<op> ^args <args>
#         ^negative <bool>
#         ^parameter <p>)
#}
