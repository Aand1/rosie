##REAL copy

sp {learn-property*propose*learn-property-complete
   (state <s> ^name learn-property
              ^done)
-->
   (<s> ^operator <o> + >)
   (<o> ^name learn-property-complete)
}

sp {learn-property*apply*learn-property-complete
   (state <s> ^name learn-property
              ^topstate.current-game <cg>
              ^operator.name learn-property-complete
              ^superstate <ss>
              ^gtype <type>
             -^tcn.verbs <verbs>
              ^<type> <t>
              ^done)
   (<t> ^nlp-set <nps> ^parameter-set.argnum <num>)
-->
   (<ss> ^done chunked-action)
   (<cg> ^<type> <t2>)
   (<t2> ^nlp-set <nps> ^parameter-set.argnum <num>)
}

sp {learn-property*apply*learn-property-complete*verbs
   (state <s> ^name learn-property
              ^topstate.current-game <cg>
              ^operator.name learn-property-complete
              ^superstate <ss>
              ^gtype <type>
              ^tcn.verbs <verbs>
              ^<type> <t>
              ^done)
   (<t> ^nlp-set <nps> ^parameter-set.argnum <num>)
   (<nps> ^aname <aname>)
-->
   (<ss> ^done chunked-action)
   (<cg> ^<type> <t2>)
   (<t2> ^nlp-set <nps> ^parameter-set <ps>)
   (<ps> ^aname <aname>)
   (<ps> ^argnum <num> ^verbs <verbs>)
}


sp {learn-property*propose*lookup-game
   (state <s> ^name learn-property
             -^tcn
              ^superstate.operator <op>)
   (<op> ^game-name <name>
        -^tcn)
-->
   (<s> ^operator <o> + = >)
   (<o> ^name lookup-game
        ^game-name <name>)
}

sp {learn-property*elaborate*tcn
#   :o-support
   (state <s> ^name learn-property
              ^superstate.operator <op>)
   (<op> ^game-name <name>
         ^tcn <tcn>
         ^type {<type> << action goal >>})
-->
   (<s> ^tcn <tcn>  #TEMP HACK PUT BACK
        ^gtype <type>
        ^<type> <act>)
  (<act> ^parameter-set <ps>
        ^potential-args <po>)
}

#TEMP HACK PUT BACK
#sp {learn-property*propose*convert-language-format
#   (state <s> ^name learn-property
#             -^action.nlp-set
#              ^gtype action
#             -^tcn)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name convert-language-format)
#}

sp {learn-property*elaborate*sub-conditions
   (state <s> ^name learn-property
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}
sp {learn-property*elaborate*sub-conditions*predicate
   (state <s> ^name learn-property
              ^gtype predicate
              ^predicate <t>)
   (<t> ^nlp-set.nlp <cond>)
-->
   (<t> ^condition <cond>)
}


sp {learn-property*elaborate*list-games
   (state <s> ^name learn-property
             # ^gtype <type>
              ^superstate.operator <op>)
   (<op> ^game-name <name>)
-->
   (<s> ^list.game <g> ^objects <o> ^simulated true)
   (<g> ^game <name> ^type action predicate) 
   (<s> ^current <g> ^game <name>)
   (<s> ^prepositions <p>)
}
sp {learn-property*elaborate*actiongoalname
   (state <s> ^name learn-property
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.aname <aname>)
-->
   (<t> ^aname <aname>)
}

#TEMP TEST TODO NEED FOR FORMATTING
sp {learn-property*propose*formate-conditions
   (state <s> ^name learn-property
              ^gtype {<type> << goal action >>}
              ^<type> <t>)
   (<t> ^nlp-set <nlp> -^formated <type>)
-->
   (<s> ^operator <o> + = >)
   (<o> ^name format-conditions
        ^type <type>
        ^nlp-set <nlp>)
}
#sp {learn-property*propose*convert-TCN-to-NLP
#   (state <s> ^name learn-property
#             -^<type>.nlp-set
#              ^gtype <type>
#              ^tcn <g>)
#-->
##   (interrupt)
#   (<s> ^operator <o> + = >)
#   (<o> ^name convert-TCN-to-NLP
#        ^type <type>
#        ^tcn <g>)
#}

sp {learn-property*prefer*copy-topstate*over*format-conditions
   (state <s> ^name learn-property
              ^operator <o> +
              ^operator <o2> +)
   (<o> ^name copy-topstate)
   (<o2> ^name format-conditions)
-->
   (<s> ^operator <o> > <o2>)
}
sp {learn-property*prefer*copy-topstate*over*convert-TCN-to-NLP
   (state <s> ^name learn-property
              ^operator <o> +
              ^operator <o2> +)
   (<o> ^name copy-topstate)
   (<o2> ^name convert-TCN-to-NLP)
-->
   (<s> ^operator <o> > <o2>)
}              

sp {learn-property*propose*copy-topstate
   (state <s> ^name learn-property
              ^gtype <type>
             -^prepositions.prep.instance.{1})
-->
   (interrupt)
   (<s> ^operator <o> + >)
   (<o> ^name copy-topstate)
}

sp {learn-property*apply*copy-topstate*objects
   (state <s> ^name learn-property
              ^objects <objs>
              ^operator.name copy-topstate
              ^topstate.object <obj>)
   (<obj> ^id <id> ^category <cat>)
-->
   (<objs> ^object <obj2>)
   (<obj2> ^id <id> ^type <cat>)
}

sp {learn-property*apply*copy-topstate*objects*desc
   (state <s> ^name learn-property
              ^objects.object <obj2>
              ^operator.name copy-topstate
              ^topstate.object <obj>)
   (<obj> ^id <id> ^linguistic-desc.word <word>)
   (<obj2> ^id <id>)
-->
   (<obj2> ^word <word>)
}
sp {learn-property*apply*copy-topstate*objects*attr
   (state <s> ^name learn-property
              ^objects.object <obj2>
              ^operator.name copy-topstate
              ^topstate.object <obj>)
   (<obj> ^id <id> ^{<something> <> object-desc <> linguistic-desc <> category <> id <> type} <word>)
   (<obj2> ^id <id>)
-->
   (<obj2> ^<something> <word>)
}
sp {learn-property*apply*copy-topstate*objects*desc*percept
   (state <s> ^name learn-property
              ^objects.object <obj2>
              ^operator.name copy-topstate
              ^topstate.object <obj>)
   (<obj> ^id <id> ^object-desc.<< color shape size >> <word>)
   (<obj2> ^id <id>)
-->
   (<obj2> ^word <word>)
}
sp {learn-property*apply*copy-topstate*contexts
   (state <s> ^name learn-property
              ^operator.name copy-topstate
              ^topstate.{<contexts> << successive dictionary word-pairs integers heuristics >>} <int>)
-->
   (<s> ^<contexts> <int>)
}

sp {learn-property*apply*copy-topstate*preps
   (state <s> ^name learn-property
              ^prepositions <p>
              ^operator.name copy-topstate
              ^topstate.prepositions.<< prep prep2 >> <prep>)
   (<prep> ^name <name>)
-->
   (<p> ^prep <prep2>)
   (<prep2> ^name <name>)
}
sp {learn-property*apply*copy-topstate*pairs
   (state <s> ^name learn-property
              ^objects <o>
              ^prepositions.prep <prep2>
              ^operator.name copy-topstate
              ^topstate.prepositions.<< prep prep2 >> <prep>)
   (<o> ^object <obj> ^object <obj2>)
   (<obj> ^id <ida>)
   (<obj2> ^id <idb>)
   (<prep> ^name <name> ^instance <pair>)
   (<prep2> ^name <name>)
   (<pair> ^1 <ida> ^2 <idb> -^3)
-->
   (<prep2> ^instance <pair2>)
   (<pair2> ^1 <obj> ^2 <obj2>)
}
sp {learn-property*apply*copy-topstate*pairsstring
   (state <s> ^name learn-property
              ^objects <o>
              ^prepositions.prep <prep2>
              ^operator.name copy-topstate
              ^topstate.prepositions.<< prep prep2 >> <prep>)
   (<o> ^object <obj> ^object <obj2>)
   (<obj> ^id <ida>)
   (<obj2> ^id <idb>)
   (<prep> ^name <name> ^instance <pair>)
   (<prep2> ^name <name>)
   (<pair> ^|1| <ida> ^|2| <idb> -^3)
-->
   (<prep2> ^instance <pair2>)
   (<pair2> ^1 <obj> ^2 <obj2>)
}
sp {learn-property*apply*copy-topstate*pairs*3arg
   (state <s> ^name learn-property
              ^objects <o>
              ^prepositions.prep <prep2>
              ^operator.name copy-topstate
              ^topstate.prepositions.prep2 <prep>)
   (<o> ^object <obj> ^object <obj2> ^object <obj3>)
   (<obj> ^id <ida>)
   (<obj2> ^id <idb>)
   (<obj3> ^id <idc>)
   (<prep> ^name <name> ^instance <pair>)
   (<prep2> ^name <name>)
   (<pair> ^1 <ida> ^2 <idb> ^3 <idc>)
-->
   (<prep2> ^instance <pair2>)
   (<pair2> ^1 <obj> ^2 <obj2> ^3 <obj3>)
}

