sp {topstate*elaborate*missionaries-and-cannibals
   (state <s> ^superstate nil)
-->
   (<s> ^current-game <cg> 
        ^prepositions <F7> 
        ^object <o1> ^object <o2>
         ^object <o3> ^object <o4>
         ^object <o14> ^object <o15>
         ^object <o16>
        )
   (<cg> ^game <g> ^name missionaries-and-cannibals ^action <T5> ^multiplayer false ^learning <lll>)
    (<lll> ^action-number 1 ^verb-num 1 ^type verb)# ^action-name <aname>)
   (<g> ^actions <a> ^name missionaries-and-cannibals)
   (<a> ^1 <tcn>)
   
(<F7> ^prep <p1xx>
        ^prep <p2xx>)
   (<p1xx> ^name left-of ^pair <p21>
         ^pair <p22>)
   (<p21> ^1 13 ^2 11)
   (<p22> ^1 14 ^2 11)
   (<p2xx> ^name right-of ^pair <p31>
         ^pair <p32> ^pair <p33>
         ^pair <p34>)
   (<p31> ^1 12 ^2 11)
   (<p32> ^1 21 ^2 11)
   (<p33> ^1 22 ^2 11)
   (<p34> ^1 23 ^2 11)
 
   
   (<o1> ^id 11 ^category location ^word river ^primitive object)
   (<o2> ^id 12 ^category block ^word missionary ^primitive object)
   (<o3> ^id 13 ^category block ^word missionary ^primitive object)
   (<o4> ^id 14 ^category block ^word missionary ^primitive object)
   (<o14> ^id 21 ^category block ^word cannibal ^primitive object)
   (<o15> ^id 22 ^category block ^word cannibal ^primitive object)
   (<o16> ^id 23 ^category block ^word cannibal ^primitive object)


(<nlps> ^nlp <c6s> ^aname stack-block)
   
   (<c1> ^name missionary ^args <ag2> ^type attribute ^attribute word)
   (<ag2> ^1 <c4>)
   (<c4> ^name block ^rtype single ^type attribute ^attribute type)
   
   (<c3> ^name cannibal ^args <ag9> ^type attribute ^attribute word)
   (<ag9> ^1 <c4>)
   
   (<c12> ^name river ^args <ag1212> ^type attribute ^attribute word)
   (<ag1212> ^1 <c2>)
   (<c2> ^name location ^rtype single ^type attribute ^attribute type)
   
   (<c6s> ^name less ^args <agg5> ^parameter <pg3> ^return-type number ^type function ^function soar-less)
   (<pg3> ^1 <p1cg> ^2 <p2cg>)
   (<p1cg> ^param-id 3 ^type single)
   (<p2cg> ^param-id 4 ^type single)
   (<agg5> ^1 <c6> ^2 <c6a>)
   
   (<c6> ^name count ^return-type number ^args <ag34> ^parameter <ppp> ^type function ^function soar-count)
   (<ppp> ^1 <pa21> ^2 <pa21b>)
   (<pa21b> ^param-id 1 ^type set)
   (<pa21> ^param-id 3 ^type single)
   (<ag34> ^2 <c8>) 
   
   (<c6a> ^name count ^return-type number ^args <ag11> ^parameter <p3z7> ^type function ^function soar-count)
   (<p3z7> ^2 <pa11> ^1 <pa11b>)
   (<pa11> ^param-id 2 ^type set)
   (<pa11b> ^param-id 4 ^type single)
   (<ag11> ^2 <c7>)
  
    
   (<c8> ^name right-of ^args <ag5> ^parameter <p71> ^type state-pair ^attribute prepositions)
   (<p71> ^1 <p71a>)
   (<p71a> ^param-id 1 ^type set)
   (<ag5> ^1 <c1> ^2 <c12>)
   
   (<c7> ^name right-of ^args <ag66> ^parameter <p81> ^type state-pair ^attribute prepositions)
   (<p81> ^1 <p81a>)
   (<p81a> ^param-id 2 ^type set)
   (<ag66> ^1 <c3> ^2 <c12>)

   (<T5> ^nlp-set <nlps>)
}

#sp {chunk-multi*justification-715*t94-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name count ^args <a2> ^parameter <p1> ^result <r1>)
#    (<a2> ^num 1 ^2 <*1>)
#    (<p1> ^num 2)
#    (<*1> ^rtype set ^result <r2>)
#    (<r1> ^set <s2>)
#    (<r2> ^set <s3>)
#    (<s3> ^pair <p2>)
#    (<p2> ^1 <*2>)
#   -{(state <s1>)
#     (<*2> -^<something>)}
#    -->
#    (<s2> ^pair <p3> +)
#    (<p3> ^1 (size <*2>) + ^2 <*2> +)
#}
#sp {chunk-multi*justification-1337*t327-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name count ^args <a2> ^parameter <p1> ^result <r1>)
#    (<a2> ^num 1 ^1 <*1>)
#    (<p1> ^num 2)
#    (<*1> ^rtype set ^parameter <p2> ^result <r2>)
#    (<r1> ^set <s2>)
#    (<r2> ^set <s3>)
#    (<s3> ^<pair> <p3>)
#    (<p3> ^<caa> <c2>)# ^done true)
#    (<p2> ^result <r3>)
#    (<r3> ^link <l2>)
#    (<l2> ^link <l3>)
#    (<l3> ^set <s4>)
#    (<s4> ^<pair> <p4>)
#    (<p4> ^<caa> holder)
#  -{(state <s1>)
#    (<c2> -^<something>)}
#    -->
#   (interrupt)
#    (<s2> ^pair <p5> +)
#    (<p5>  ^1 <c2> + ^2 (size <c2>) +)
#}
#sp {chunk-multi*justification-1328*onc*t319-2
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name between-inclusive ^args <a2> ^parameter <p1>
#          ^result <r7>)
#    (<a2> ^num 3 ^3 <*1> ^2 <*2> ^1 <*3>)
#    (<*1> ^parameter <p2> ^result <r4>)
#    (<*2> ^parameter <p3> ^result <r5>)
#    (<*3> ^parameter <p4> ^result <r6>)
#    (<p2> ^result <r1>)
#    (<r1> ^link <l2>)
#    (<l2> ^link <l3>)
#    (<l3> ^set <s2>)
#    (<s2> ^item <i1>)
#    (<i1> ^object holder)
#    (<p3> ^result <r2>)
#    (<r2> ^link <l4>)
#    (<l4> ^link <l5>)
#    (<l5> ^set <s3>)
#    (<s3> ^item <i2>)
#    (<i2> ^object holder)
#    (<p4> ^result <r3>)
#    (<r3> ^link <l6>)
#    (<l6> ^link <l7>)
#    (<l7> ^set <s4>)
#    (<s4> ^item <i3>)
#    (<i3> ^object holder)
#    (<r4> ^set <s5>)
#    (<r5> ^set <s6>)
#    (<r6> ^set <s7>)
#    (<r7> ^set <s8>)
#    (<s8> ^pair <p5>)
#    (<p5> ^2 <b1> ^1 { <a3> <> <b1> } ^c <c2>)
#    (<b1> ^{<xy> << y x >>} <pp1> ^{<yx> << y x >>} <y11>)
#    (<a3> ^<xy> <pp1> ^{<yx> <> <xy>} <y12>)
#    (<b3> ^<xy> <pp1>)
#    (<s5> ^item <i4>)
#    (<i4> ^object <b3>)
#    (<s6> ^item <i5>)
#    (<i5> ^object <b1>)
#    (<s7> ^item <i6>)
#    (<i6> ^object <a3>)
#  -{(<b3> ^<yx> {<y> > <y11>} ^<yx> {<y> >= <y12>})}
# -{(<b3> ^<yx> {<y> < <y11>} ^<yx> {<y> <= <y12>})}
#    -->
#    (<c2> ^object <b3> +)
#}
#   
#   sp {chunk-multi*justification-1289*t319-1
#    :chunk
#    (state <s1> ^gtype action ^list <l1> ^action <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c1>)
#    (<c1> ^negative false ^name between-inclusive ^args <a2> ^parameter <p1>
#          ^result <r5>)
#    (<a2> ^num 3 ^3 <*1> ^2 <*2> ^1 <*3>)
#    (<*2> ^parameter <p2> ^result <r3>)
#    (<*3> ^parameter <p3> ^result <r4>)
#    (<p2> ^result <r1>)
#    (<r1> ^link <l2>)
#    (<l2> ^link <l3gi>)
#    (<l3> ^set <s2>)
#    (<s2> ^item <i1>)
#    (<i1> ^object holder)
#    (<p3> ^result <r2>)
#    (<r2> ^link <l4>)
#    (<l4> ^link <l5>)
#    (<l5> ^set <s3>)
#    (<s3> ^item <i2>)
#    (<i2> ^object holder)
#    (<r3> ^set <s4>)
#    (<r4> ^set <s5>)
#    (<r5> ^set <s6>)
#    (<s4> ^item <i3>)
#    (<s5> ^item <i4>)
#    (<i3> ^object <o1>)
#    (<i4> ^object { <o2> <> <o1> })
#    -->
#    (<s6> ^pair <p4> +)
#    (<p4> ^c <c2> + ^2 <o1> + ^1 <o2> +)
#}