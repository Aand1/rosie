
sp {chunk-multi*chunk-parameters*preference*prefer*single-operators*2args*tie*t352-1
    :chunk
    (state <s1> ^predicate <t1> ^list <l1> ^operator <o1> +)
    (<t1> ^ntype heuristic ^prefer <p5> ^parameter-set <p4>)
    (<p5> -^2 <v*1> ^1 <c1>)
    (<c1> ^type concept ^attribute action ^parameter <p2> ^result <r2>)
    (<p2> ^num 2 ^2 <p3> ^1 <p1>)
    (<p4> ^set <i2>)
    (<p3> ^param-id <c4>)
    (<l1> ^game <g1>)
    (<p1> ^param-id <c3>)
    (<r2> ^set <r1>)
    (<r1> ^pair <i1>)
    (<i1> ^2 <o3> ^1 <o2>)
    (<i2> ^<c4> <o3> ^<c3> <o2>)
    (<o1> ^parameters <i1>)
    -->
    (<s1> ^operator <o1> >)
}


sp {chunk-multi*chunk-parameters*preference*disprefer*two-operators*1args1*tie*t280-1
    :chunk
    (state <s1> ^predicate <t1> ^list <l1> ^operator <o3> + ^operator <o1> +)
    (<t1> ^ntype heuristic ^disprefer <p6> ^parameter-set <p5>)
    (<p6> ^2 <c4> ^1 <c2>)
    (<c4> ^type concept ^attribute action ^parameter <p4> ^result <r4>)
    (<p4> ^num 1 ^1 <p3>)
    (<c2> ^type concept ^attribute action ^parameter <p2> ^result <r2>)
    (<p2> ^num 1 ^1 <p1>)
    (<p5> ^set <i2>)
    (<l1> ^game <g1>)
    (<p3> ^param-id <c3>)
    (<p1> ^param-id <c1>)
    (<r4> ^set <r3>)
    (<r3> ^pair <i3>)
    (<i3> ^1 <o4>)
    (<i2> ^<c3> <o4> ^<c1> <o2>)
    (<o3> ^parameters <i3>)
    (<r2> ^set <r1>)
    (<r1> ^pair <i1>)
    (<i1> ^1 <o2>)
    (<o1> ^parameters <i1>)
    -->
    (<s1> ^operator <o1> < <o3>)
}

sp {chunk-multi*chunk-parameters*preference*disprefer*single-operators*1args*any*tie*t6289-1
    :chunk
    (state <s1> ^predicate <t1> ^list <l1> ^operator <o1> +)
    (<t1> ^ntype heuristic ^disprefer <p4> ^parameter-set <p3>)
    (<p4> -^2 <v*1> ^1 <c2>)
    (<c2> ^type concept ^attribute action ^parameter <p2> #^name
          ^result <r2>)
    (<p2> ^num 1 ^1 <p1>)
    (<p3> ^set <i2>)
    (<l1> ^game <g1>)
    (<p1> ^param-id <c1>)
    (<r2> ^set <r1>)
    (<r1> ^pair <i1>)
    (<i1> ^1 <o2>)
    (<i2> ^<c1> <o2>)
    (<o1> ^parameters <i1>)
    -->
    (<s1> ^operator <o1> <)
}

sp {chunk-multi*chunk-parameters*preference*disprefer*single-operators*2args*tie*t243-1
    :chunk
    (state <s1> ^predicate <t1> ^list <l1> ^operator <o1> +)
    (<t1> ^ntype heuristic ^disprefer <p5> ^parameter-set <p4>)
    (<p5> -^2 <v*1> ^1 <c1>)
    (<c1> ^type concept ^attribute action ^parameter <p2> ^result <r2>)
    (<p2> ^num 2 ^2 <p3> ^1 <p1>)
    (<p4> ^set <i2>)
    (<p3> ^param-id <c4>)
    (<l1> ^game <g1>)
    (<p1> ^param-id <c3>)
    (<r2> ^set <r1>)
    (<r1> ^pair <i1>)
    (<i1> ^2 <o3> ^1 <o2>)
    (<i2> ^<c4> <o3> ^<c3> <o2>)
    (<o1> ^parameters <i1>)
    -->
    (<s1> ^operator <o1> <)
}

sp {chunk-multi*chunk-parameters*preference*prefer*two-operators*1args1*tie*t292-1
    :chunk
    (state <s1> ^predicate <t2> ^predicate <t1> ^list <l1> ^operator <o3> +
          ^operator <o1> +)
    (<t2> ^ntype heuristic ^parameter-set <p6> ^prefer <p5>)
    (<t1> ^ntype heuristic)
    (<p6> ^set <i2>)
    (<p5> ^2 <c4> ^1 <c2>)
    (<c4> ^type concept ^attribute action ^parameter <p4> ^result <r4>)
    (<p4> ^num 1 ^1 <p3>)
    (<c2> ^type concept ^attribute action ^parameter <p2> ^result <r2>)
    (<p2> ^num 1 ^1 <p1>)
    (<l1> ^game <g1>)
    (<p3> ^param-id <c3>)
    (<p1> ^param-id <c1>)
    (<r4> ^set <r3>)
    (<r3> ^pair <i3>)
    (<i3> ^1 <o4>)
    (<i2> ^<c3> <o4> ^<c1> <o2>)
    (<o3> ^parameters <i3>)
    (<r2> ^set <r1>)
    (<r1> ^pair <i1>)
    (<i1> ^1 <o2>)
    (<o1> ^parameters <i1>)
    -->
    (<s1> ^operator <o1> > <o3>)
}