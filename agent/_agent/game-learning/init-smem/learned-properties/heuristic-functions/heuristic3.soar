sp {topstate*elaborate*heuristic3
   (state <s> ^name learn-param2
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-card)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <p3> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<p3> ^1 <cs2> ^2 <cs3>)
##action stack
  (<nlps> ^nlp <cs2> <cs3> <c5>  ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-card ^args <aag5> ^parameter <pa3> ^type concept ^attribute action ^return-type number)
   (<pa3> ^1 <pa2d>  ^num 1)#^1 <pa1d> ^3 <pa3d>
   #(<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 1 ^type single)
   #(<pa3d> ^param-id 3 ^type single)
   
   (<cs3> ^result.set <res3> ^name play-card ^args <aag3> ^parameter <pa33> ^type concept ^attribute action ^return-type number)
   (<pa33> ^1 <pa2d3> ^num 1)#^1 <pa1d3> ^3 <pa3d3> 
   #(<pa1d3> ^param-id 4 ^type single)
   (<pa2d3> ^param-id 2 ^type single)
   #(<pa3d3> ^param-id 3 ^type single)
     
   (<c5> ^args <ag> ^function soar-less ^name less ^negative false
                 ^parameter <param1> ^result <R92> ^rtype single ^type function ^return-type number)
   (<ag> ^1 <cs2> ^2 <cs3> ^num 2)
   (<param1> ^1 <p11> ^2 <p12> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p12> ^param-id 2 ^type single)
   (<R92> ^set <S152>)
   
#   
#   (<c4> ^args <A57> ^attribute primitive ^name object ^negative false
#                 ^parameter <P225> ^result <R94> ^rtype single ^type attribute)
#            (<P225> ^num 0)
#            (<R94> ^set <S158>)

}
sp {topstate*elaborate*heuristic45
   (state <s> ^name learn-param2
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname draw-card)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 1)
(<pref> ^1 <cs2>)
  (<nlps> ^nlp <cs2>  ^aname heuristic)

   (<cs2> ^result.set <res> ^name draw-card ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^num 1)
   (<pa1d> ^param-id 1 ^type single)

}



#crazy8s heuristics
#1 disfer draw card over any
sp {topstate*elaborate*crazy8s*disprefer*draw-card*any-action
   (state <s> ^name learn-param
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname draw-card)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2> ^2 <cs3>)
  (<nlps> ^nlp <cs2> <cs3> ^aname heuristic)

   (<cs2> ^result.set <res> ^name draw-card ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^num 1)
   (<pa1d> ^param-id 1 ^type single)
   
   (<cs3> ^result.set <res5> ^name any ^args <aag3> ^parameter <pa5> ^type concept ^attribute action)
   (<pa5> ^1 <pa5d> ^num 1)
   (<pa5d> ^param-id 2 ^type single)

}
#2 disprefer any action with a card with value 8
sp {topstate*elaborate*heuristic-any
   (state <s> ^name learn-param
              ^gtype action)#<gtype>
              #^<gtype>.nlp-set.aname draw-card)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
  (<nlps> ^nlp <c6z> <c5z>  ^aname heuristic)

   (<cs2> ^result.set <res> ^name any ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^num 1)
   (<pa1d> ^param-id 1 ^type single)
   
   (<c6z> ^name value ^args <ag11z> ^parameter <p3z7z> ^rtype single ^return-type number ^type attribute-of ^attribute none ^negative false ^result.set <resz>)
   (<p3z7z> ^1 <p11z> ^2 <p112z> ^num 2)
   (<p11z> ^param-id 2 ^type single)
   (<p112z> ^param-id 1 ^type single)
   (<ag11z> ^2 <cs2> ^num 1)
   
   (<c5z> ^name number ^args <ag11zz> ^parameter <p4az> ^negative false ^type attribute ^attribute primitive ^rtype single ^result.set.pair <pa22z> ^return-type number)
   (<p4az> ^1 <p4aaz> ^num 1)
   (<p4aaz> ^param-id 2 ^type single)
   (<pa22z> ^1 8)

}
##3 disprefer play-on rank with suited deck card
sp {topstate*elaborate*disprefer*play-on-rank
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-on-rank)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^disprefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
##action stack
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-on-rank ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name more-suits ^negative false
                 ^parameter <param1> ^result.set <R92> ^rtype single ^type concept)
   (<ag> ^1 <c7x> ^2 <cs2> ^num 2)
   (<param1> ^1 <p11> ^2 <p21> ^num 2)
   (<p11> ^param-id 2 ^type single)
   (<p21> ^param-id 1 ^type single)
   
   (<c7x> ^name on ^args <ag5x> ^parameter <pzatx> ^type state-pair ^attribute prepositions ^rtype single ^negative false ^result.set <res2x>)
   (<pzatx> ^1 <pz1x> ^num 1)
   (<pz1x> ^param-id 2 ^type single)
   (<ag5x> ^1 <c4> ^2 <c3x> ^num 2)
   
   (<c3x> ^name deck ^type attribute ^args <ag9x> ^parameter.num 0 ^attribute word ^type attribute ^rtype single ^negative false ^result.set <resx>)
   (<ag9x> ^1 <c4> ^num 1)
   
   (<c4> ^args <A57> ^attribute primitive ^name object ^negative false
                 ^parameter <P225> ^result <R94> ^rtype single ^type attribute)
            (<P225> ^num 0)
            (<R94> ^set <S158>)

}

#4 perfer play on rank with more hand suits over any action 
sp {topstate*elaborate*prefer*play-on-rank*over*any
   (state <s> ^name learn-param
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-on-rank)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2> ^2 <cs3>)
##action stack
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-on-rank ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^num 1)
   (<pa1d> ^param-id 1 ^type single)
   
   (<cs3> ^result.set <res5> ^name any ^args <aag3> ^parameter <pa5> ^type concept ^attribute action)
   (<pa5> ^1 <pa5d> ^num 1)
   (<pa5d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name more-suits ^negative false
                 ^parameter <param1> ^result.set <R92> ^rtype single ^type concept)
   (<ag> ^1 <cs2> ^2 <cs3> ^num 2)
   (<param1> ^1 <p11> ^2 <p21> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p21> ^param-id 2 ^type single)

}




sp {topstate*elaborate*prefer*play-on-rank
   (state <s> ^name learn-param2
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-on-rank)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
##action stack
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-on-rank ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name more-same-suits ^negative false
                 ^parameter <param1> ^result.set <R92> ^rtype single ^type concept)
   (<ag> ^1 <cs2> ^2 <c7x> ^num 2)
   (<param1> ^1 <p11> ^2 <p21> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p21> ^param-id 2 ^type single)
   
   (<c7x> ^name on ^args <ag5x> ^parameter <pzatx> ^type state-pair ^attribute prepositions ^rtype single ^negative false ^result.set <res2x>)
   (<pzatx> ^1 <pz1x> ^num 1)
   (<pz1x> ^param-id 2 ^type single)
   (<ag5x> ^1 <c4> ^2 <c3x> ^num 2)
   
   (<c3x> ^name deck ^type attribute ^args <ag9x> ^parameter.num 0 ^attribute word ^type attribute ^rtype single ^negative false ^result.set <resx>)
   (<ag9x> ^1 <c4> ^num 1)
   
   (<c4> ^args <A57> ^attribute primitive ^name object ^negative false
                 ^parameter <P225> ^result <R94> ^rtype single ^type attribute)
            (<P225> ^num 0)
            (<R94> ^set <S158>)

}

sp {topstate*elaborate*prefer*play-on-rank2
   (state <s> ^name learn-param2
            #  ^condition.name adjacent
              ^gtype <gtype>
              ^<gtype>.nlp-set.aname play-on-rank)
#   (<co> ^type concept ^attribute predicate ^name heuristic)
-->
    (<s> ^predicate <T5> ^gtype predicate)
   
   (<T5> ^nlp-set <nlps> ^prefer <pref> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^ntype heuristic)
(<P124> ^argnum 2)
(<pref> ^1 <cs2>)
##action stack
  (<nlps> ^nlp <cs2> <c5> ^aname heuristic)#^nlp <cs> <cs1>

   (<cs2> ^result.set <res> ^name play-on-rank ^args <aag5> ^parameter <pa3> ^type concept ^attribute action)
   (<pa3> ^1 <pa1d> ^2 <pa2d> ^num 2)
   (<pa1d> ^param-id 1 ^type single)
   (<pa2d> ^param-id 2 ^type single)
     
   (<c5> ^args <ag> ^attribute predicate ^name more-suits ^negative false
                 ^parameter <param1> ^result.set <R92> ^rtype single ^type concept)
   (<ag> ^1 <cs2> ^2 <c7x> ^num 2)
   (<param1> ^1 <p11> ^2 <p21> ^num 2)
   (<p11> ^param-id 1 ^type single)
   (<p21> ^param-id 2 ^type single)
   
   (<c7x> ^name on ^args <ag5x> ^parameter <pzatx> ^type state-pair ^attribute prepositions ^rtype single ^negative false ^result.set <res2x>)
   (<pzatx> ^1 <pz1x> ^num 1)
   (<pz1x> ^param-id 2 ^type single)
   (<ag5x> ^1 <c4> ^2 <c3x> ^num 2)
   
   (<c3x> ^name deck ^type attribute ^args <ag9x> ^parameter.num 0 ^attribute word ^type attribute ^rtype single ^negative false ^result.set <resx>)
   (<ag9x> ^1 <c4> ^num 1)
   
   (<c4> ^args <A57> ^attribute primitive ^name object ^negative false
                 ^parameter <P225> ^result <R94> ^rtype single ^type attribute)
            (<P225> ^num 0)
            (<R94> ^set <S158>)

}






   sp {chunk*chunk-parameters*propose*new-operator*snc*t71-4
    :chunk
    (state <s1> ^gtype action ^action <p1> ^list <l1>)
    (<p1> ^parameter-set <p2> ^potential-args <p3>) #^aname play-card 
    (<p2> ^tested calculate3 ^tested calculate2 ^tested calculate5 ^tested calculate6 
          ^tested calculate4 ^tested calculate1 ^set <s2>)
    (<l1> ^game <g1>)
  #  (<g1> ^type predicate)
    -->
    (<p1> ^pair <s2> +)
}

#sp {chunk*justification-472*snc*t77-2
#    :chunk
#    (state <s1> ^gtype <c2> ^list <l1> ^<c2> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^parameter-set <p2> ^potential-args <p1> ^condition <c1>)
#    (<p2> ^tested calculate1)
#    (<c1> ^parameter <p3> ^result <r1>)
#    (<p3> ^<c6> <p4>)
#    (<p4> ^param-id <c4>)
#    (<p1> ^<c4> <o1>)
#   -{ (<r1> ^set <s*1>)
#      (<s*1> ^pair <p*1>)
#      (<p*1> ^<c6> <o1>)}
#    -->
#    (<p2> ^neg <n1> +)
#    (<n1> ^<c4> <o1> +)
#}
#sp {chunk-multi*justification-1309*snc*t742-2
#    :chunk
#    (state <s1> ^gtype <c2> ^list <l1> ^<c2> <p1>)
#    (<l1> ^game <g1>)
#    (<p1> ^parameter-set <p2> ^potential-args <p3>)
#    (<p2> ^tested calculate4 ^argnum 2)
#    (<p3> ^2 <*1> ^1 { <*2> <> <*1> })
#   -{ (<p2> ^neg <n1>)
#      (<n1> ^2 <*1>)}
#   -{ (<p2> ^neg <n2>)
#      (<n2> ^1 <*2>)}
#    -->
#    (<p2> ^iset <i1> +)
#    (<i1> ^1 <*2> + ^2 <*1> +)
#}
#sp {chunk*justification-532*snc*t79-1
#    :chunk
#    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c3> ^potential-args <p1> ^parameter-set <p2>)
#    (<c3> ^return-type number ^parameter <p3> ^result <r1>)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p5>)
#    (<p3> ^<c4> <p4>)
#    (<p4> ^type single ^param-id <c6>)
#    (<p5> ^<c4> <c7>)
#    -->
#    (<p1> ^<c6> <c7> +)
#}