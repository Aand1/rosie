
sp {finished-game-teaching*propose*setup-search
   (state <s> ^name finished-game-teaching
              ^superstate.operator.type game
              ^top-state.dialog-context.structure.handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name setup-search
        ^game-name <name>)
}

sp {finished-game-teaching*propose*setup-search*yes
   (state <s> ^name finished-game-teaching
             -^top-state.dialog-context.structure.multiplayer true #JAMES UNDO
              ^superstate.operator.response yes
              ^top-state.dialog-context.structure.handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name setup-search
        ^game-name <name>)
}
#### JAMES UNDO!!!!! for chunking test
sp {finished-game-teaching*propose*prepare-game*yes
   (state <s> ^name finished-game-teaching
             ^top-state.dialog-context.structure.multiplayer true
              ^superstate.operator.response yes
              ^top-state.dialog-context.structure.handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name prepare-game)
}
##JAMES UNDO for per task stats data
sp {finished-game-teaching*apply*clean-up-after-learning*recorddata
   (state <s> ^name finished-game-teaching
              ^top-state <ts>
              ^operator <o>)
   (<o> ^name clean-up-after-learning)
-->
    (<ts> ^capture-data yes)
        #(write (cmd |ctf -a statsmax.txt stats --max|))
#(write (cmd |ctf -a smemuse.txt smem --stats mem-usage|))
#(write (cmd |ctf -a topstate10.txt print -d 10 s1|))
#(write (cmd |ctf -a pertaskstats.txt stats|)) #has cpu time, WM size, number of chunks
}


#sp {interruptdecisioncycle
#   (state <s> ^epmem.present-id 44123  #48140# << 4052 4053 4054 48140 48141 48142 >>
#              
#              ^superstate nil)
#             # ^operator <o> +)
#  # (<o> ^type action)
#-->
#(write (cmd |excise --chunks|))
##(write (cmd |stats --reset|))
#
##	(write (cmd |ctf -a statsmax.txt mem 15|))
##(interrupt)
#}

#sp {interruptdecisioncycleasdfasdf
#   (state <s> ^epmem.present-id << 3 44140 >>  #48140# << 4052 4053 4054 48140 48141 48142 >>
#              ^operator.name process-new-sentence)
#            #  ^superstate nil)
#             # ^operator <o> +)
#  # (<o> ^type action)
#-->
#(write (cmd |ctf -a pertaskstats2.txt stats -m|))
#	(write (cmd |ctf -a statsmax.txt mem 15|))
#(interrupt)
#}

sp {finished-game-teaching*propose*clean-up-after-learning*no
   (state <s> ^name finished-game-teaching
              ^superstate.operator.response no
              ^top-state.dialog-context.structure.handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name clean-up-after-learning
        ^game-name <name>)
}
#sp {apply*clean-up-after-learning*capture-dataexcise
#   (state <s> ^superstate nil
#              ^dialog-context.structure.word-structure.spelling othello
#              ^capture-data <ys>
#              ^operator.name interaction)
#-->
#(write (cmd |excise --chunks|))
#}

sp {apply*clean-up-after-learning*capture-data
   (state <s> ^superstate nil
              #^top-state.epmem.present-id <epid>
              ^capture-data <ys>
              ^operator.name interaction)
-->
 #   (interrupt)
    (<s> ^capture-data <ys> -)
        #(write (cmd |ctf -a smemtimequery.txt smem --stats|))
    (write (cmd |ctf -a pertaskstats.txt stats|))
 #   (write (crlf) |FINISHED TEACHING GAME |)
  #  (write (crlf) <epid>)
 #(write (cmd |ctf -a smemtimethree.txt smem --timers three_activation|))
 #(write (cmd |ctf -a smemtimeret.txt smem --timers smem_ncb_retrieval|))
 # smem_query|))
 #(write (cmd |ctf -a smemtimestore.txt smem --timers smem_storage|))
 #(write (cmd |ctf -a smemstore.txt smem --stats stores|))
 #(write (cmd |ctf -a smemquery.txt smem --stats queries|))
#        (write (cmd |stats --reset|))
(write (cmd |ctf -a smemuse.txt smem --stats mem-usage|))
#(write (cmd |ctf -a topstate10.txt print s1|))
 #has cpu time, WM size, number of chunks
}

###JAMES ctf parse breaks for processing(not building time)
#sp {apply*startparsingtime*capture-data
#   (state <s> #^superstate nil
#               ^name format-conditions
#              ^operator.name complete)
#-->
#(write (cmd |ctf -a startparsetime.txt stats|)) #has cpu time, WM size, number of chunks
#}
#sp {apply*parsingtime*capture-data
#   (state <s> #^name learn-predicate
#              ^operator.name finished-learning)
#-->
#(write (cmd |ctf -a endparsetime.txt stats|)) #has cpu time, WM size, number of chunks
#}

###JAMES ctf parse breaks here
#sp {apply*startparsingtime*capture-data
#   (state <s> ^superstate nil
#              ^operator.name comprehension)
#-->
#(write (cmd |ctf -a startparsetime.txt stats|)) #has cpu time, WM size, number of chunks
#}
#sp {apply*parsingtime*capture-data
#   (state <s> ^name interaction
#              ^operator.name interpret-message)
#-->
#(write (cmd |ctf -a endparsetime.txt stats|)) #has cpu time, WM size, number of chunks
#}

sp {finished-game-teaching*apply*clean-up-after-learning
   (state <s> ^name finished-game-teaching
              ^operator <o>
              ^top-state <ts>
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<ts> ^dialog-context <dc>)
   (<o> ^name clean-up-after-learning)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type ok)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
   (<ts> ^dialog-context <dc> -)
 }

sp {finished-game-teaching*apply*prepare-game
   (state <s> ^name finished-game-teaching
              ^operator <o>
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name prepare-game)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type tell-me-go)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
 }
