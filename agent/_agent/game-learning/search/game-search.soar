sp {game-search*elaborate*problem-space
   (state <s> ^name game-search)
-->
   (<s> #^problem-space <p>
        ^ntype action goal
        ^gtype action)
#   (<p> ^name action
#        ^default-state-copy yes
#        ^one-level-attributes depth-limit
#        ^two-level-attributes objects list )
}
sp {game-search*elaborate*operator
   (state <s> ^name game-search
              ^superstate.operator <o>)
   (<o> ^name game-search
        #^objects <objs>
        ^dcount <dc>
        ^depth-limit <dl>
        ^list <l>
        ^current <g> 
        ^game <name>)
-->
   (<s> #^objects <objs>
        ^dcount <dc>
        ^depth-limit <dl>
        ^list <l>
       # ^world.predicates <w>
        ^desired <d>
        ^current <g> 
        ^game <name>)
   (<d> ^found true)
}
#sp {game-search*elaborate*operator
#   (state <s> ^name game-search
#              ^world <w>
#              ^objects <objs>)
#-->
#   (<w> ^objects <objs>)
#}
sp {game-search*elaborate*goal #for not only at depth
   (state <s> ^name game-search
              ^dcount <dc>
              ^depth-limit <dc>)
-->
   (<s> ^gtype goal)
}

sp {game-search*elaborate*multiplayer
   (state <s> ^name game-search
              ^superstate.superstate.multiplayer <m>)
-->
   (<s> ^multiplayer <m>)
}
              
sp {game-search*elaborate*depth-limit
   (state <s> ^name game-search
              ^superstate.superstate.depth-limit <m>)
-->
   (<s> ^depth-limit <m>)
}
sp {game-search*elaborate*list
   (state <s> ^name game-search
              ^superstate.superstate.list <m>)
-->
   (<s> ^list <m>)
}
sp {game-search*elaborate*dcount
   (state <s> ^name game-search
              ^superstate.superstate.dcount <dc>)
-->
   (<s> ^dcount (+ 1 <dc>))
}

sp {game-search*elaborate*problem-space*world
   (state <s> ^name game-search
              ^superstate.superstate.world <world2>)
-->
   (<s> ^problem-space.world <world>)
   (<world> ^source <world2>
            ^copy-type deep)
}

#need to make sure objects same?
sp {game-search*apply*simulate
   (state <s> ^name game-search
              ^action <act>
              ^world.predicates <p2>
              ^operator <o>)
   (<act> ^verb-structure <v1> ^handle <cname>)
   (<o> ^type action
        ^name <cname>
     #   ^game << towers-of-hanoi tic-tac-toe eight-puzzle tic-tac-toe-stored >>
        ^parameters <p>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle below1 ^instance <instance>)
   (<instance> ^2 <obj>)
   (<prep2> ^handle on1 ^instance <instance2>)
   (<instance2> ^1 <obj>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   #(<v> ^1 <v1>)#for now only handle 1 verb actions
   (<v1> ^verb-prep on ^1 <i1> ^2 <i2>)
   
-->
   (<prep> ^instance <instance> -
           ^instance <instance3>)
   (<prep2> ^instance <instance2> -
            ^instance <instance4>)
   (<instance3> ^1 <obj1> ^2 <obj>)
   (<instance4> ^1 <obj> ^2 <obj1>)
}
sp {game-search*apply*simulate2
   (state <s> ^name game-search
              ^action <act>
              ^prepositions <p2>
              ^operator <o>)
   (<act> ^verb-structure <v1> ^handle <cname>)
   (<o> ^type action
        ^name <cname>
        ^parameters <p>)
   (<p2> ^prep <prep> ^prep <prep2>)
   (<prep> ^name below -^instance.{2} <obj>)
   (<prep2> ^name on -^instance.{1} <obj>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   #(<v> ^1 <v1>)#for now only handle 1 verb actions
   (<v1> ^verb-prep on ^1 <i1> ^2 <i2>)
-->
   (<prep> ^instance <instance3>)
   (<prep2> ^instance <instance4>)
   (<instance3> ^1 <obj1> ^2 <obj>)
   (<instance4> ^1 <obj> ^2 <obj1>)
}

sp {game-search*elaborate*copy-stucture*elaborate*goal
   (state <s> ^name game-search
              ^copy-count 20
              #^gtype goal
              ^copy-structure.destination <dest>)
    (<dest> ^goal <goal>)
    (<goal> ^argnum <an>)
-->
	(<s> ^goal <goal>)
 (<goal> ^parameter-set <ps> ^potential-args <po>)
 (<ps> ^argnum <an>)
}
sp {game-search*elaborate*top-level*simulated
   (state <s> ^name game-search
              ^copy-count 20
              ^superstate.name find-solution)
-->
   (<s> ^simulated true)
}
sp {game-search*elaborate*copy-stucture*elaborate*action
   (state <s> ^name game-search
              ^copy-count 20
              ^copy-structure.destination <dest>)
    (<dest> ^action <act>)
    (<act> ^argnum <an>)
-->
	(<s> ^action <act>)
  (<act> ^parameter-set <ps> ^potential-args <po>)
 (<ps> ^argnum <an>)
}
sp {game-search*elaborate*action*nlp-set
   (state <s> ^name game-search
              ^gtype <gtype>
              ^<gtype> <act>)
   (<act> ^predicate-structure <p>)
-->
	(<act> ^nlp-set <p>)
}
sp {game-search*elaborate*sub-conditions
   (state <s> ^name game-search
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}
sp {game-search*elaborate*sub-conditions*predicate
   (state <s> ^name game-search
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}

sp {game-search*elaborate*nlp-set*verb-structure
   (state <s> ^name game-search
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.verb-structure <vs>)
-->
(<t> ^verb-structure <vs>)
}

sp {game-search*elaborate*action*nlp-set
   (state <s> ^name game-search
              ^gtype <gtype>
              ^<gtype> <act>)
   (<act> ^predicate-structure <p>)
-->
	(<act> ^nlp-set <p>)
}

sp {game-search*elaborate*copy-stucture
   (state <s> ^name game-search
              ^top-state.dialog-context.structure <dcs>)
   (<dcs> ^actions.action <act> ^goals.goal <goal>)
-->
   (<s> ^copy-structure <copy> ^copy-count 0 ^copy-map <cm> ^pending-map <pm>)
   (<copy> ^source <cg>
           ^destination <dest>
            ^copy-type deep)
   (<cg> ^action <act>
         ^goal <goal>)
}


sp {game-search*elaborate*input-args
   (state <s> ^name game-search
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype <rtype>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}
sp {game-search*elaborate*input-args*set-to-single*objects
   (state <s> ^name game-search
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set ^parameter.num 0)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^result.set <res> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype single)
   (<nlps> ^aname <name>)
-->
   (<res> ^instance <i15>)
   (<i15> ^1 <obj>)
}



#sp {game-search*elaborate*gtypes
#   (state <s> ^name game-search
#              ^ntype <type>
#              ^superstate.superstate.<type> <a>)
#-->
#   (<s> ^<type> <b>)
#   (<b> ^parameter-set <ps2> ^copy-of <a>
#        ^potential-args <po2>)
#}
#
#sp {game-search*elaborate*condition
#   (state <s> ^name game-search
#              ^ntype <type>
#              ^<type> <t>
#              ^superstate.superstate.<type> <t2>)
#   (<t2> ^condition <co>)
#   (<t> ^copy-of <t2>)
#   (<co> ^name <name> ^parameter <p> ^negative <neg> ^rtype <rt>)
#-->
#   (<t> ^condition <c>)
#   (<c> ^name <name> ^parameter <p> ^duplicate-of <co> ^negative <neg> ^rtype <rt>)
#}
#sp {game-search*propose*started
#   (state <s> ^name game-search
#              ^dcount 0
#              ^ntype <type>
#              ^<type>.condition <co>)
#    (<co> -^args)
#-->
#   (<s> ^operator <o> + > =)
#   (<o> ^name started)
#}
#sp {game-search*elaborate*condition*args2
#   (state <s> ^name game-search
#              ^ntype <type>  
#              ^<type> <t>
#              ^operator <oper>)#.name action)
#   (<t> ^condition <c>
#        ^condition <c1>
#        ^condition <c2>)
#   (<c>  ^duplicate-of <co1> -^args)
#   (<co1> ^args <args> ^parameter.result.link.link.<s1>.<i2>.<o1> holder)
#   (<args> ^num 2 ^1 <co2> ^2 <co3>)
#   (<c1> ^duplicate-of <co2>)
#   (<c2> ^duplicate-of <co3>)
#-->
#   (<c> ^args <args3> ^result.<s1>.<i2> <i>)
#   (<args3> ^num 2 ^1 <c1> ^2 <c2>)
#}
#sp {game-search*elaborate*condition*args3
#   (state <s> ^name game-search
#              ^ntype <type>  
#              ^<type> <t>
#              ^operator <oper>)#.name action)
#   (<t> ^condition <c>
#        ^condition <c1>
#        ^condition <c2>
#        ^condition <c3>)
#   (<c> ^duplicate-of <co1> -^args)
#   (<co1> ^args <args> ^parameter.result.link.link.<s1>.<i2>.<o1> holder)
#   (<args> ^num 3 ^1 <co2> ^2 <co3> ^3 <co4>)
#   (<c1> ^duplicate-of <co2>)
#   (<c2> ^duplicate-of <co3>)
#   (<c3> ^duplicate-of <co4>)
#-->
#   (<c> ^args <args3> ^result.<s1>.<i2> <i>)
#   (<args3> ^num 3 ^1 <c1> ^2 <c2> ^3 <c3>)
#}
#sp {game-search*elaborate*condition*args1
#   (state <s> ^name game-search
#              ^ntype <type>  
#              ^<type> <t>
#              ^operator <oper>)#.name action)
#   (<t> ^condition <c>
#        ^condition <c1>)
#   (<c> ^duplicate-of <co1> -^args)
#   (<co1> ^args <args> ^parameter.result.link.link.<s1>.<i2>.<o1> holder)
#   (<args> ^num 1 ^1 <co2>)
#   (<c1> ^duplicate-of <co2>)
#-->
#   (<c> ^args <args3> ^result.<s1>.<i2> <i>)
#   (<args3> ^num 1 ^1 <c1>)
#}
#sp {game-search*elaborate*condition*noargs
#   (state <s> ^name game-search
#              ^ntype <type>  
#              ^<type> <t>
#              ^operator <oper>)#.name action)
#   (<t> ^condition <c>)
#   (<c> ^duplicate-of <co1> -^args)
#   (<co1> ^args <args> ^parameter.result.link.link.<s1>.<i2>.<o1> holder)
#   (<args> -^num)
#-->
#   (<c> ^args <args3> ^result.<s1>.<i2> <i>)
#}
#
#
#sp {game-search*elaborate*parameter-set*argnum
#   (state <s> ^name game-search
#              ^ntype <type>
#              ^superstate.superstate.<type> <t2> 
#              ^<type> <t> )
#    (<t2> ^parameter-set.argnum <num>)
#	(<t> ^parameter-set <ps> ^copy-of <t2>)
#-->
#   (<ps> ^argnum <num>)
#}
#
#sp {game-search*elaborate*parameter-set*name
#   (state <s> ^name game-search
#              ^ntype <type>
#              ^superstate.superstate.<type> <t2> 
#              ^<type> <t> )
#    (<t2> ^name <name>)
#	(<t> ^copy-of <t2>)
#-->
#   (<t> ^name <name>)
#}
#sp {game-search*elaborate*parameter-set*verbs
#   (state <s> ^name game-search
#              ^gtype <type>
#              ^superstate.superstate.<type> <t2> 
#              ^<type> <t> )
#    (<t2> ^parameter-set.verbs <v>)
#	(<t> ^parameter-set <ps> ^copy-of <t2>)
#-->
#   (<ps> ^verbs <v>)
#}



sp {game-search*apply*action-success
   (state <s> ^name game-search
              ^desired <d>
              ^operator <o>)
   (<o> ^name action -^duplicate-of)
-->
   (<s> ^success <d>)
}
sp {game-search*apply*action*flound-action
   (state <s> ^name game-search
              ^top-state <ts>
              ^dcount <dc>
             -^multiplayer true
             -^dcount 0
              ^action <act>
              ^operator <o>)
   (<o> ^type action -^duplicate-of ^parameters <p> ^name <cname>)
   (<act> ^verb-structure <v1> ^handle <cname>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
   (<o1> ^id <oa>)
   (<o2> ^id <ob>)
  # (<v> ^1 <v1>)#for now only handle 1 verb actions
   (<v1> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
-->
   (<ts> ^flound-action <fa>)
   (<fa> ^dcount <dc> ^obj1 <oa> ^obj2 <ob> ^pname <vp>)
}

sp {game-search*apply*action*flound-action*top
   (state <s> ^name game-search
              ^top-state <ts>
              ^superstate.superstate.superstate <sss>
              ^dcount 0
              ^action <act>
              ^operator <o>)
   (<o> ^type action -^duplicate-of ^parameters <p> ^name <cname>)
   (<act> ^verb-structure <v1> ^handle <cname>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
   (<o1> ^id <oa>)
   (<o2> ^id <ob>)
   #(<v> ^1 <v1>)#for now only handle 1 verb actions
   (<v1> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
-->
   (<sss> ^valid-arg.<a1> <oa>
         ^valid-arg.<a2> <ob>
         ^action <a>)
   (<a> ^verb <vname> ^pname <vp>)
   (<ts> ^flound-action <fa>)
   (<fa> ^dcount 0 ^obj1 <oa> ^obj2 <ob> ^mark done ^pname <vp>)
}

sp {game-search*apply*goal
   (state <s> ^name game-search
              ^desired <d>
              ^operator.name goal)
-->
   (<s> ^success <d>)
}
sp {game-search*depth-limit
   (state <s> ^name game-search
              ^desired <d>
              ^operator <o> +
             -^goal.parameter-set.set
              ^action <act>
              ^dcount <dc>
              ^depth-limit <dc>)
   (<o> -^duplicate-of ^name action ^cname <cname>)
   (<act> ^parameter-set.set ^name <cname>)
 -{(<s> ^operator <o2> +)
   (<o2> ^name goal)}
-->
   (<s> ^partial-failure <d>)
}
sp {game-search*prefer*goal
   (state <s> ^name game-search
              ^operator <o1> +)
   (<o1> ^name goal)
-->
   (<s> ^operator <o1> > =)
}
sp {game-search*heuristic*reject
   (state <s> ^name game-search
              ^superstate.operator.superoperator.parameters <p2>
              ^action <act>
              ^operator <o> +)
   (<act> ^handle <cname> ^verb-structure.{1} <ind>)
   (<o> ^type action -^duplicate-of ^parameters <p> ^name <cname>)
   (<p> ^<ind> <obj1>)
   (<p2> ^<ind> <obj1>)
-->
   (<s> ^operator <o> -)
}
sp {game-search*propose*default
   (state <s> ^name game-search)
   -{(<s> ^action <a>)
     (<a> -^parameter-set.argnum)}
-->
   (<s> ^operator <o1> +)
   (<o1> ^name default)
}

sp {game-search*apply*default
   (state <s> ^name game-search
              ^desired <d>
             -^dcount 0
              ^operator.name default)
-->
   (<s> ^partial-failure <d>)
}


sp {game-search*apply*default*depth-limit-increase
   (state <s> ^name game-search
              ^dcount 0
              ^superstate <ss>
              ^operator.name default)
   (<ss> ^depth-limit <d>)
-->
   (<ss> ^depth-limit <d> -)
   (<ss> ^depth-limit (+ <d> 1))

   }

sp {selection*prefer*evaluate*action*over*default
   (state <s> ^name selection
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name evaluate-operator ^superoperator.type action)
   (<o2> ^name evaluate-operator ^superoperator.name default)
-->
   (<s> ^operator <o1> > <o2>)
}