sp {game-search*elaborate*problem-space
   (state <s> ^name game-search)
             # ^simulated true)
-->
   (<s> ^ntype action goal
        ^gtype action)
#   (<p> ^name action
#        ^default-state-copy yes
#        ^one-level-attributes depth-limit
#        ^two-level-attributes objects list )
}
sp {game-search*elaborate*operator
   (state <s> ^name game-search
              ^superstate.operator <o>)
   (<o> ^name game-search
        ^dcount <dc>
        ^depth-limit <dl>
        ^list <l>
        ^current <g> 
        ^game <name>)
-->
   (<s> ^dcount <dc>
        ^depth-limit <dl>
        ^list <l>
        ^problemspace games
        ^desired <d>
        ^current <g> 
        ^game <name>)
   (<d> ^found true)
}

sp {game-search*elaborate*goal #for only at depth
   (state <s> ^name game-search
              ^simulated true
              ^dcount <dc>
              ^depth-limit <dc>)
-->
   (<s> ^gtype goal)
}

sp {game-search*elaborate*multiplayer
   (state <s> ^name game-search
              ^superstate.superstate.multiplayer <m>)
-->
   (<s> ^multiplayer <m>)
}

sp {game-search*elaborate*game
   (state <s> ^name game-search
              ^superstate.superstate.game <m>)
-->
   (<s> ^game <m>)
}
              
sp {game-search*elaborate*depth-limit
   (state <s> ^name game-search
              ^superstate.superstate.depth-limit <m>)
-->
   (<s> ^depth-limit <m>)
}
sp {game-search*elaborate*list
   (state <s> ^name game-search
              ^superstate.superstate.list <m>)
-->
   (<s> ^list <m>)
}
sp {game-search*elaborate*dcount
   (state <s> ^name game-search
              ^superstate.superstate.dcount <dc>)
-->
   (<s> ^dcount (+ 1 <dc>))
}

sp {game-search*elaborate*problem-space*world
   (state <s> ^name game-search
              ^superstate.superstate.world <world2>)
-->
   (<s> ^problem-space <ps>)
   (<ps> ^world <world> ^name action ^dont-copy-anything true)
   (<world> ^source <world2>
            ^copy-type deep)
}


#need to make sure objects same?
sp {game-search*apply*simulate
   (state <s> ^name game-search
              ^action <act>
              ^copy-objects-map <com>
              ^world.predicates <p2>
              ^operator <o>)
   (<act>  ^handle <cname>)
   (<o> ^type action
        ^name <cname>
        ^verb-structure <v1>
        ^parameters <p>)
   (<p2> ^predicate <prep> ^predicate <prep2>)
   (<prep> ^handle below1 ^instance <instance>)
   (<instance> ^2 <obja>)
   (<prep2> ^handle on1 ^instance <instance2>)
   (<instance2> ^1 <obja>)
   (<p> ^<i1> <obj> ^<i2> <obj1>)
   (<com> ^<obj> <obja> ^<obj1> <objb>)
   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2>)
   
-->
   (<prep> ^instance <instance> -
           ^instance <instance3>)
   (<prep2> ^instance <instance2> -
            ^instance <instance4>)
   (<instance3> ^1 <objb> ^2 <obja>)
   (<instance4> ^1 <obja> ^2 <objb>)
}
#sp {game-search*apply*simulate2
#   (state <s> ^name game-search
#              ^action <act>
#              
#              ^prepositions <p2>
#              ^operator <o>)
#   (<act> ^handle <cname>)
#   (<o> ^type action
#        ^name <cname>
#        ^verb-structure <v1>
#        ^parameters <p>)
#   (<p2> ^prep <prep> ^prep <prep2>)
#   (<prep> ^name below -^instance.{2} <obj>)
#   (<prep2> ^name on -^instance.{1} <obj>)
#   (<p> ^<i1> <obj> ^<i2> <obj1>)
#   #(<v> ^1 <v1>)#for now only handle 1 verb actions
#   (<v1> ^verb-prep on1 ^1 <i1> ^2 <i2>)
#-->
#   (<prep> ^instance <instance3>)
#   (<prep2> ^instance <instance4>)
#   (<instance3> ^1 <obj1> ^2 <obj>)
#   (<instance4> ^1 <obj> ^2 <obj1>)
#}


sp {game-search*elaborate*top-level*simulated
   (state <s> ^name game-search
              ^superstate.name find-solution)
-->
   (<s> ^simulated true)
}

sp {game-search*elaborate*other-levels*simulated
   (state <s> ^name game-search
              ^operator <o>)
   (<o> ^type action ^duplicate-of)
-->
   (<s> ^simulated true)
}

sp {game-search*elaborate*action*nlp-set
   (state <s> ^name game-search
              ^gtype <gtype>
              ^<gtype> <act>)
   (<act> ^predicate-structure <p>)
-->
	(<act> ^nlp-set <p>)
}

sp {game-search*elaborate*sub-conditions
   (state <s> ^name game-search
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}
sp {game-search*elaborate*sub-conditions*predicate
   (state <s> ^name game-search
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.conditions <cond>)
-->
   (<t> ^condition <cond>)
}

sp {game-search*elaborate*nlp-set*verb-structure
   (state <s> ^name game-search
              ^gtype action
              ^action <t>)
   (<t> ^nlp-set.verb-structure <vs>)
-->
(<t> ^verb-structure <vs>)
}


sp {game-search*elaborate*predicate-handle
   (state <s> ^name game-search
              ^top-state.dialog-context.structure <dcs>)  
   (<dcs> ^actions.handle <name>)
-->
    (<s> ^retrieve-handle <name>)
    }

sp {game-search*elaborate*predicate-handle*goal
   (state <s> ^name game-search
              ^gtype goal
              ^top-state.dialog-context.structure <dcs>)  
   (<dcs> ^goals.handle <name>)
-->
    (<s> ^retrieve-handle <name>)
    }


sp {game-search*elaborate*input-args
   (state <s> ^name game-search
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance <in1> ^rtype <rtype>)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype <rtype>)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res2>)
-->
   (<res2> ^instance <in1>)
}
sp {game-search*elaborate*input-args*set-to-single*objects
   (state <s> ^name game-search
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set.instance.{1}.<elem> <obj> ^rtype set ^parameter.num 0)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^result.set <res> ^attribute input-arg ^parameter.{1}.param-id <a1> ^rtype single)
   (<nlps> ^aname <name>)
-->
   (<res> ^instance <i15>)
   (<i15> ^1 <obj>)
}


sp {game-search*apply*action*perform-action
   (state <s> ^name selection
              ^evaluation <e>
              ^superstate.dcount <dc>
              ^top-state <ts>
              ^problemspace games)
   (<e> ^symbolic-value success ^superoperator <so>)
   (<so> ^parameters <p> ^verb-structure <vs>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
  # (<v> ^1 <v1>)#for now only handle 1 verb actions
   (<vs> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
-->
   (<ts> ^perform-action <fa>)
   (<fa> ^dcount <dc> ^obj1 <o1> ^obj2 <o2> ^pname <vp> ^vname <vname>)
}

sp {game-search*apply*action-success
   (state <s> ^name game-search
              ^desired <d>
              ^operator <o>)
   (<o> ^name action -^duplicate-of)
-->
   (<s> ^success <d>)
}


sp {game-search*apply*action*perform-action*top
   (state <s> ^name game-search
              ^top-state <ts>
              ^superstate <sss>
              ^dcount 0
              ^action <act>
              ^operator <o>)
   (<o> ^type action -^duplicate-of ^parameters <p> ^name <cname>)
   (<act> ^verb-structure <v1> ^handle <cname>)
   (<p> ^<i1> <o1> ^<i2> <o2>)
   #(<v> ^1 <v1>)#for now only handle 1 verb actions
   (<v1> ^verb-prep <vp> ^verb-name <vname> ^1 <i1> ^2 <i2>)
-->
   (<sss> ^found-action true)
 #  (<a> ^verb <vname> ^pname <vp>)
#   (<ts> ^perform-action <fa>)
#   (<fa> ^dcount 0 ^obj1 <o1> ^obj2 <o2> ^mark done ^pname <vp>)
}

sp {game-search*apply*goal
   (state <s> ^name game-search
              ^desired <d>
              ^operator.type goal)
-->
   (<s> ^success <d>)
}

sp {game-search*depth-limit
   (state <s> ^name game-search
              ^desired <d>
              ^operator <o> +
             -^goal.parameter-set.set
              ^simulated true
              ^dcount <dc>
              ^depth-limit <dc>)
   (<o> ^type action -^duplicate-of)
 -{(<s> ^operator <o2> +)
   (<o2> ^type goal)}
-->
   (<s> ^partial-failure <d>)
}
sp {game-search*prefer*goal
   (state <s> ^name game-search
              ^operator <o1> +)
   (<o1> ^type goal)
-->
   (<s> ^operator <o1> > =)
}

sp {game-search*heuristic*reject
   (state <s> ^name game-search
              ^superstate.operator.superoperator.parameters <p2>
              ^action <act>
              ^operator <o> +)
   (<act> ^handle <cname> ^verb-structure.{1} <ind>)
   (<o> ^type action -^duplicate-of ^parameters <p> ^name <cname>)
   (<p> ^<ind>.handle <h1>)
   (<p2> ^<ind>.handle <h1>)
-->
   (<s> ^operator <o> -)
}
sp {game-search*propose*default
   (state <s> ^name game-search)
   -{(<s> ^action <a>)
     (<a> -^parameter-set.argnum)}
-->
   (<s> ^operator <o1> +)
   (<o1> ^name default)
}

sp {game-search*apply*default
   (state <s> ^name game-search
              ^desired <d>
             -^dcount 0
              ^operator.name default)
-->
   (<s> ^partial-failure <d>)
}

#failure
sp {game-search*apply*default*depth-limit-increase
   (state <s> ^name game-search
              ^dcount 0
              ^superstate <ss>
              ^operator.name default)
   (<ss> ^depth-limit <d>)
-->
#    (halt)
   (<ss> ^depth-limit <d> -)
   (<ss> ^depth-limit (+ <d> 1))
}

sp {selection*prefer*evaluate*action*over*default
   (state <s> ^name selection
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name evaluate-operator ^superoperator.type action)
   (<o2> ^name evaluate-operator ^superoperator.name default)
-->
   (<s> ^operator <o1> > <o2>)
}