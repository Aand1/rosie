#sp {find-solution*propose*game-search*elab-depth-limit
#   (state <s> ^name find-solution
#              -^superstate.operator.game-name frog-toad
#              -^superstate.operator.game-name tower-chunk)
#-->
#   (<s> ^depth-limit 1)
#}


sp {find-solution*propose*game-search*elab-depth-limit*tower
   (state <s> ^name find-solution
   	      ^superstate.operator.game-name tower-of-hanoi1)
-->
   (<s> ^depth-limit 7)
}

sp {find-solution*propose*game-search*elab-depth-limit*frog
   (state <s> ^name find-solution
   	      ^superstate.operator.game-name frog-toad)
-->
   (<s> ^depth-limit 8)
}
              

sp {find-solution*propose*game-search
   (state <s> ^name find-solution
              ^superstate.multiplayer false
              ^depth-limit <dl>
             -^found-action
              ^superstate.operator <op>)
   (<op> ^game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name game-search
        ^dcount 0
        ^depth-limit <dl> #todo fix
        ^list.game <g>
        ^current <g> 
        ^game <name>)
   (<g> ^game <name> ^type action goal)
}
sp {find-solution*propose*game-search*muliplayer
   (state <s> ^name find-solution
              ^top-state.flound-action.mark)
-->
    (<s> ^found-action true)
}

sp {find-solution*propose*game-search*muliplayer
   (state <s> ^name find-solution
              -^found-action
              ^superstate.multiplayer true
              ^superstate.operator <op>)
   (<op> ^game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name game-search
        ^dcount 0
        ^depth-limit 1
        ^list.game <g>
        ^current <g> 
        ^game <name>)
   (<g> ^game <name> ^type action goal)
}





sp {find-solution*propose*do-action
   (state <s> ^name find-solution
              ^top-state <ts>
              ^found-action)
   (<ts> ^flound-action <fa> ^world.predicates.predicate <p>)
   (<p> ^handle <pname> ^predicate-info <pred>)
   (<fa> ^obj1 <oa> ^obj2 <ob> ^dcount <dc> -^mark ^pname <pname>)
  -{(<ts> ^flound-action <fa2>)
    (<fa2> -^mark ^dcount < <dc>)}          
-->
    (interrupt)
   (<s> ^operator <o> +)
   (<o> ^name do-action
        ^predicate <pred>
        ^obj1 <oa>
        ^obj2 <ob>
        ^action <fa>)
}

#sp {start-turn*propose*do-action
#   (state <s> ^name find-solution
#              ^action <action>
#              ^predicate <p>
#             -^robot-state.arm.grabbed
#             -^success
#              ^obj1 <oa>
#              ^obj2 <ob>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name do-action
#        ^category svs
#        ^action <action>
#        ^predicate <p>
#        ^obj1 <oa>
#        ^obj2 <ob>)
#}

#TODO need?
sp {find-solution*elabroate*attend-to-arm 
   (state <s> ^name  find-solution
              ^found-action
              ^robot-state.arm.grabbed)
-->
   (<s> ^attend-to-arm true)
}

sp {do-action*propose*comprehend-action-command
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
             -^found-op
              ^predicate <p>
              ^obj2 <ob>)
   (<action> ^verb <verb-word>)
-->
   (<s> ^operator <o> + = )
   (<o> ^name comprehend-action-command ^parameter <pa> ^initialized true)
   (<pa> ^direct-object <do-param>
       ^pp-object <po-param>
       ^verb <verb-param>
       ^type action-command)
   (<do-param> ^type direct-object
               ^result <oa>)
   (<po-param> ^type pp-object
               ^result <res1>)
   (<res1> ^object <ob>)
   (<verb-param> ^type verb
                 ^lexical <verb-word>)
}

sp {do-action*apply*comprehend-action-command*hackforargument4
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> -^argument4 
          ^_metadata.map-id <mid>)
   (<mid> ^procedural.argument4 <n7>
          ^linguistic.pp-object.object <n3>)
-->
   (<s> ^found-op <op>)
   (<op> ^argument4 <arg4>)
   (<arg4> ^argument <ob>)
}
sp {do-action*apply*comprehend-action-command*hackforargument5
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> -^argument5 
          ^_metadata.map-id <mid>)
   (<mid> ^procedural.argument5 <n7>
          ^linguistic.pp-object.object <n3>)
-->
   (<s> ^found-op <op>)
   (<op> ^argument5 <arg4>)
   (<arg4> ^argument <ob>)
}
sp {do-action*apply*comprehend-action-command*hackforargument10
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> -^argument10 
          ^_metadata.map-id <mid>)
   (<mid> ^procedural.argument10 <n7>
          ^linguistic.pp-object.object <n3>)
-->
   (<s> ^found-op <op>)
   (<op> ^argument10 <arg4>)
   (<arg4> ^argument <ob>)
}
sp {do-action*apply*comprehend-action-command*hackforargument11
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> -^argument11 
          ^_metadata.map-id <mid>)
   (<mid> ^procedural.argument11 <n7>
          ^linguistic.pp-object.object <n3>)
-->
   (<s> ^found-op <op>)
   (<op> ^argument11 <arg4>)
   (<arg4> ^argument <ob>)
}

sp {do-action*apply*comprehend-action-command
   (state <s> ^name do-action
              ^action <action>
              ^obj1 <oa>
              ^predicate <p>
              ^obj2 <ob>
              ^operator <o>)
   (<o> ^name comprehend-action-command 
        ^parameter <pa>)
   (<pa> ^result <op>)
   (<op> ^<< argument2 argument3 argument4 argument5 argument6 argument7 argument8 argument9 argument10 argument11 >>)
-->
   (<s> ^found-op <op>)
}




#sp {find-solution*apply*found-next-action
#   (state <s> ^name find-solution
#              ^top-state <ts>
#              ^top-state.found-prep <fprep>
#              ^top-state.flound-action <fa>
#              ^operator <o>)
#   (<o> ^name found-next-action ^action <fa>)
#   (<fa> ^obj1 <oa> ^obj2 <ob> ^dcount <dc> ^pname <pname>)
#   (<fprep> ^type <pname> ^predicate <p>)   
#-->
#   (<s> ^action <a>
#        ^valid-arg <va>
#        ^predicate <p>
#        ^done <dc>
#        ^valid-arg <vb>)
#   (<va> ^1 <oa>)
#   (<vb> ^2 <ob>)
#   (<a> ^verb move ^pname <pname>)
#   (<fa> ^mark done)
#}


#sp {find-solution*propose*no-actions
#   (state <s> ^name find-solution
#              ^game-name <name>
#             -^no-actions
#              -^topstate.flound-action
#              -^valid-arg)    
#-->
#   (<s> ^operator <o> +)
#   (<o> ^name no-actions)
#}
#sp {find-action*apply*no-actions
#   (state <s> ^name find-solution
#              ^game-name <name>
#              -^topstate.flound-action
#              ^operator <o>)
#   (<o> ^name no-actions
#        ^category svs)
#-->
#   (<s> ^no-actions true)
#}
#
#
sp {find-action*propose*completed-all-actions
   (state <s> ^name find-action
              ^topstate <ts>
              ^topstate.flound-action <fa>)
   (<fa> ^obj1 <oa> ^obj2 <ob> ^dcount <dc> ^mark)
  -{(<ts> ^flound-action <fa2>)
    (<fa2> -^mark)}          
-->
   (<s> ^operator <o> + =)
   (<o> ^name completed-all-actions)
}

#sp {find-action*apply*completed-all-actions
#   (state <s> ^name find-action
#              ^superstate <ss>
#              ^operator <o>)
#   (<o> ^name completed-all-actions)
#-->
#   (<ss> ^completed-all-actions true)
#}
##sp {find-action*apply*completed-all-actions*remove-found-action
##   (state <s> ^name find-action
##              ^topstate <ts>
##              ^operator <o>)
##   (<o> ^name completed-all-actions)
##   (<ts> ^flound-action <fa>)
##-->
##   (<ts> ^flound-action <fa> -)
##}
#


#
#
#

#
#sp {find-action*propose*complete-action
#   (state <s> ^name find-action
#              ^virtual-action <va>)
# -->
#   (<s> ^operator <o> +)
#   (<o> ^name complete-turn)
#}
#
#
#sp {find-action*apply*complete-turn*solved*did-all-actions
#   (state <s> ^name find-action
#              ^topstate.interaction.status <status>
#              ^topstate.io.output-link <out>
#              ^virtual-action <va>
#              ^operator <o>)
#   (<o> ^name complete-turn)
#   (<va> ^name <name> ^object <id>)
#-->
#   (<status> ^performed.dialog-event.type turn)
#   (<out> ^game-action-command <gac>)
#   (<gac> ^name <name> ^oid <id> ^pid 0) # unhardcode player int
#   
#}
#
#
#sp {find-action*propose*complete-find-action
#   (state <s> ^name find-action       
##              ^found-prep.predicate <p1>
#              ^topstate.found-prep <fp>
#              ^action <a>
##              ^predicate <p1>
#              ^valid-arg <va>
#              ^valid-arg <vb>)
#   (<va> ^1 <o1>)
#   (<vb> ^2 <o2>)
#   (<a> ^pname <pname>)
#   (<fp> ^type <pname> ^predicate <p1>)
#-->
#   (<s> ^operator <o> + =)
#   (<o> ^name complete-find-action
#        ^category svs
#        ^action <a>
#        ^predicate <p1>
#        ^obja <o1>
#        ^objb <o2>)
#}
#
#sp {find-action*apply*complete-find-action
#   (state <s> ^name find-action
#              ^operator <o>
#              ^object <o1>
#              ^object <o2>
#              ^superstate <ss>)
#   (<o1> ^id <id1>)
#   (<o2> ^id <id2>)
#   (<o> ^name complete-find-action
#        ^obja <id1>
#        ^objb <id2>
#        ^predicate <p>
#        ^action <a>)
#-->
#   (<ss> ^action <a>
#         ^predicate <p>
#         ^obj1 <o1>
#         ^obj2 <o2>)
#}
#
#sp {find-action*apply*complete-find-action*solved
#   (state <s> ^name find-action
#              ^operator <o>
#              ^object <o1>
#              ^object <o2>
#              ^solved <t>
#              ^superstate <ss>)
#   (<o1> ^id <id1>)
#   (<o2> ^id <id2>)
#   (<o> ^name complete-find-action
#        ^obja <id1>
#        ^objb <id2>
#        ^predicate <p>
#        ^action <a>)
#-->
#   (<ss> ^solved <t>)
#}



