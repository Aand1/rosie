sp {find-solution*propose*game-search*elab-depth-limit
   (state <s> ^name find-solution
              ^superstate.operator.game-name <name>)
-->
   (<s> ^depth-limit 1
        ^game <name>
        ^gtype goal action failure)
}

sp {find-solution*elaborate*problem-space*world
(state <s> ^name find-solution
            ^top-state.world <world2>)
-->
   (<s> ^problem-space.world <world>)
   (<world> ^source <world2>
            ^copy-type shallow)
}


sp {find-solution*propose*chunk-predicate-structure*action
   (state <s> ^name find-solution
             -^action.handle <h>
              -^found-action
              ^top-state.dialog-context.structure.actions.handle <h>)
-->
    (<s> ^operator <o> + =)
    (<o> ^name chunk-predicate-structure
         ^gtype action
         ^predicate-handle <h>)
}

sp {find-solution*propose*chunk-predicate-structure*goal
   (state <s> ^name find-solution
             -^goal.handle <h>
              -^found-action
              ^top-state.dialog-context.structure.goals.handle <h>)
-->
    (<s> ^operator <o> + =)
    (<o> ^name chunk-predicate-structure
         ^gtype goal
         ^predicate-handle <h>)
}

sp {find-solution*propose*chunk-predicate-structure*failure
   (state <s> ^name find-solution
             -^failure.handle <h>
              -^found-action
              ^top-state.dialog-context.structure.failures.handle <h>)
-->
    (<s> ^operator <o> + =)
    (<o> ^name chunk-predicate-structure
         ^gtype failure
         ^predicate-handle <h>)
}

sp {find-solution*propose*game-search
   (state <s> ^name find-solution
              -^superstate.multiplayer true
              ^depth-limit <dl>
              ^action
              ^goal
             -^found-action
              ^superstate.operator <op>)
   (<op> ^game-name <name>)
-->
   (<s> ^operator <o> + = <)
   (<o> ^name game-search
        ^dcount 0
        ^depth-limit <dl> #todo fix
        ^list.game <g>
        ^current <g> 
        ^game <name>)
   (<g> ^game <name> ^type action goal failure)
}
sp {find-solution*elaborate*depth-limit-1-less
   (state <s> ^name find-solution
              ^depth-limit <dl>)
-->
    (<s> ^depth-limit-1-less (- <dl> 1))
}
sp {find-solution*elaborate*found-true
   (state <s> ^name find-solution
              ^depth-limit-1-less <dl>
              ^top-state.perform-action.dcount <dl>
              ^top-state.perform-action.dcount 0)
-->
    (<s> ^found-action true)
}


sp {find-solution*prefer*chunk-predicate-structure*over*game-learning-complete
   (state <s> ^name find-solution
              ^operator <o2> +
              ^operator <o> +)
   (<o> ^name chunk-predicate-structure)
   (<o2> ^name game-learning-complete)
-->
   (<s> ^operator <o> > <o2>)
}

sp {find-solution*propose*game-learning-complete
   (state <s> ^name find-solution
              -^found-action
             -^top-state.dialog-context.finished-game-teaching true
              ^superstate.multiplayer true
              ^superstate.operator <op>)
   (<op> ^game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name game-learning-complete
        ^type game
        ^game <name>)
}
sp {find-solution*propose*game-learning-complete*puzzle
   (state <s> ^name find-solution
              -^found-action
             -^top-state.dialog-context.finished-game-teaching true
             -^superstate.multiplayer true
              ^superstate.operator <op>)
   (<op> ^game-name <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name game-learning-complete
        ^type puzzle
        ^game <name>)
}
sp {find-solution*apply*game-learning-complete
   (state <s> ^name find-solution
              ^top-state.dialog-context <dc>
               ^operator <o>
               ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name game-learning-complete
        ^type <type>
        ^game <name>)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type learned-game
          ^fields <f>)
   (<f> ^game <name> ^type <type>)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
   (<dc> ^finished-game-teaching true)
}


sp {find-solution*propose*game-search*muliplayer
   (state <s> ^name find-solution
              -^found-action
              ^superstate.multiplayer true
              ^superstate.operator <op>)
   (<op> ^game-name <name>)
-->
   (<s> ^operator <o> + = <)
   (<o> ^name game-search
        ^dcount 0
        ^depth-limit 1
        ^list.game <g>
        ^current <g> 
        ^game <name>)
   (<g> ^game <name> ^type action goal failure)
}

sp {find-solution*mark*found-action
   (state <s> ^superstate nil
              ^operator.name execute-put-down1
              ^perform-action <fa>)
   (<fa> ^started -^mark)
-->
    (<fa> ^mark done)
}


sp {find-solution*propose*execute-action
   (state <s> ^name find-solution
              ^top-state <ts>
              ^world.objects <objs>
              ^found-action)
   (<ts> ^perform-action <fa> -^game-scripting true)
   #(<p> ^handle <pname>)
   (<fa> ^obj1 <oa> ^obj2 <ob> ^dcount <dc> -^mark ^pname <pname>)
  -{(<ts> ^perform-action <fa2>)
    (<fa2> -^mark ^dcount < <dc>)}
(<oa> ^handle <id1>)
(<ob> ^handle <id2>)
(<objs> ^object <obj1> ^object <obj2>)
(<obj1> ^handle <id1>)
(<obj2> ^handle <id2>)
-->
  (<s> ^operator <o> +)
  (<o> ^name execute-action
       ^action-ref <fa>
       ^dcount <dc>
       ^action-operator <op>)
 (<op> ^name op_move1 ^action-handle move1 ^action-type composite ^arg1 <arg1> ^arg2 <arg2>)
 (<arg1> ^arg-type object ^id <obj1>)
 (<arg2> ^2 <obj2> ^arg-type predicate ^handle <pname>)
}

sp {find-solution*propose*complete-finding-solution
   (state <s> ^name find-solution
              ^top-state <ts>
              ^world.objects <objs>
              ^found-action)
   (<ts> ^perform-action <fa> ^game-scripting true)
   #(<p> ^handle <pname>)
   (<fa> ^obj1 <oa> ^obj2 <ob> ^dcount <dc> -^mark ^pname <pname>)
  -{(<ts> ^perform-action <fa2>)
    (<fa2> -^mark ^dcount < <dc>)}
(<oa> ^handle <id1>)
(<ob> ^handle <id2>)
(<objs> ^object <obj1> ^object <obj2>)
(<obj1> ^handle <id1>)
(<obj2> ^handle <id2>)
-->
  (<s> ^operator <o> + = >)
  (<o> ^name complete-finding-solution)
}


sp {find-solution*apply*execute-action
   (state <s> ^name find-solution
              ^operator <o>)
   (<o> ^name execute-action
       ^action-ref <fa>)
-->
#    (interrupt)
    (<fa> ^started true)
}


sp {find-solution*elabroate*attend-to-arm 
   (state <s> ^name  find-solution
              ^found-action
              ^robot-state.arm.grabbed)
-->
   (<s> ^attend-to-arm true)
}

#uncomment
sp {find-solution*propose*completed-all-actions
   (state <s> ^name find-solution
              ^top-state <ts>
              ^top-state.perform-action <fa>)
   (<fa> ^obj1 <oa> ^obj2 <ob> ^dcount <dc> ^mark)
  -{(<ts> ^perform-action <fa2>)
    (<fa2> -^mark)}          
-->
   (<s> ^operator <o> + < =)
   (<o> ^name completed-all-actions)
}

sp {find-solution*propose*completed-all-actions*game-lost
   (state <s> ^name find-solution
              ^top-state.dialog-context.game-lost true)       
-->
   (<s> ^operator <o> + > =)
   (<o> ^name completed-all-actions)
}


sp {find-solution*apply*completed-all-actions*remove*found-action
   (state <s> ^name find-solution
              ^operator <o>
              ^top-state <ts>)
   (<o> ^name completed-all-actions)
   (<ts> ^perform-action <fa>)
-->
   (<ts> ^perform-action <fa> -)
}

sp {find-solution*apply*complete-finding-solution*remove*found-action
   (state <s> ^name find-solution
              ^operator <o>
              ^game <game>
              ^top-state <ts>)
   (<o> ^name complete-finding-solution)
   (<ts> ^perform-action <fa> ^game-scripting true ^<game> <g1>)
-->
   (<ts> ^perform-action <fa> -)
   (<g1> ^performed-action <fa>)
}

sp {find-solution*apply*complete-finding-solution*remove*dialog-context
   (state <s> ^name find-solution
              ^operator <o>         
              ^top-state <ts>)
   (<o> ^name complete-finding-solution)
   (<ts> ^dialog-context <dc>)
-->
   (<ts> ^dialog-context <dc> -)
}

sp {find-solution*apply*completed-all-actions*remove*dialog-context
   (state <s> ^name find-solution
             -^superstate.multiplayer true
              ^operator <o>         
              ^top-state <ts>)
   (<o> ^name completed-all-actions)
   (<ts> ^dialog-context <dc>)
-->
   (<ts> ^dialog-context <dc> -)
}

sp {find-solution*apply*completed-all-actions*remove*dialog-context*game
   (state <s> ^name find-solution
             ^superstate.multiplayer true
             ^top-state.dialog-context.<< game-lost game-won >> true
             ^operator <o>         
             ^top-state <ts>)
   (<o> ^name completed-all-actions)
   (<ts> ^dialog-context <dc>)
-->
   (<ts> ^dialog-context <dc> -)
}

#sp {find-solution*apply*completed-all-actions*remove*predicate-monitors*puzzle
#   (state <s> ^name find-solution
#             -^superstate.multiplayer true
#              ^operator <o>         
#              ^top-state <ts>)
#   (<o> ^name completed-all-actions)
#   (<ts> ^perception-monitor.predicate-monitor <pm>)
#   (<pm> ^predicate-info <pi>)      
#-->
#   (<pm> ^predicate-info <pi> -) 
#}
#
#sp {find-solution*apply*completed-all-actions*remove*predicate-monitors
#   (state <s> ^name find-solution
#             ^superstate.multiplayer true
#             ^top-state.dialog-context.game-won true
#              ^operator <o>         
#              ^top-state <ts>)
#   (<o> ^name completed-all-actions)
#   (<ts> ^perception-monitor.predicate-monitor <pm>)
#   (<pm> ^predicate-info <pi>)      
#-->
#   (<pm> ^predicate-info <pi> -) 
#}

sp {find-solution*apply*completed-all-actions*send-message
   (state <s> ^name find-solution
              ^operator <o>
              ^superstate.multiplayer false
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name completed-all-actions)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type easy)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
 }

sp {find-solution*apply*completed-all-actions*send-message*your-turn
   (state <s> ^name find-solution
              ^operator <o>
              -^top-state.dialog-context.game-lost true
              -^top-state.dialog-context.game-won true
              ^superstate.multiplayer true
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name completed-all-actions)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type your-turn)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
 }

sp {find-solution*apply*completed-all-actions*send-message*won
   (state <s> ^name find-solution
              ^operator <o>
              ^top-state.dialog-context.game-won true
              ^superstate.multiplayer true
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name completed-all-actions)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type i-win)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
 }

sp {find-solution*apply*completed-all-actions*send-message*lose
   (state <s> ^name find-solution
              ^operator <o>
              ^top-state.dialog-context.game-lost true
              ^superstate.multiplayer true
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name completed-all-actions)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type i-lose)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
 }

sp {find-solution*apply*complete-finding-solution*send-message*lose
   (state <s> ^name find-solution
              ^operator <o>
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<o> ^name complete-finding-solution)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type easy)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
 }


sp {clean-up*top-state*found-action-aftersolve
   (state <s> ^operator.name complete-interaction
              ^name interaction
              ^top-state <ts>)
   (<ts> ^perform-action <fa>)
   (<fa> ^mark done)
-->
   (<ts> ^perform-action <fa> -)
}
