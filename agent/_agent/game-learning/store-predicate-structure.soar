sp {store-predicate-structure*elaborate*attributes
   (state <s> ^name store-predicate-structure
              ^superstate.operator <o>)
   (<o> ^storing <t> ^handle <h> ^message <msg> ^type <y>)
-->
   (<s> ^storing <t> ^handle <h> ^message <msg> ^ptype <y>)
}

sp {store-predicate-structure*elaborate*multiplayer
   (state <s> ^name store-predicate-structure
              ^superstate.operator <o>)
   (<o> ^multiplayer <m>)
-->
   (<s> ^multiplayer <m>)
}


#only store at end
sp {store-predicate-structure*propose*complete
   (state <s> ^name store-predicate-structure)
-->
   (<s> ^operator <o> + =)
   (<o> ^name complete)
}

sp {store-predicate-structure*apply*complete*game-name
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^ptype game
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type describe-game)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}
sp {store-predicate-structure*apply*complete*puzzle-name
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^ptype puzzle
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type describe-puzzle)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}

sp {store-predicate-structure*apply*complete*goal-name
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^found-transferable-knowledge false
              ^ptype goal
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type setup-goal)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}
sp {store-predicate-structure*apply*complete*action-name
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^found-transferable-knowledge false
              ^ptype action
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
-->
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type simple-message
          ^message-type describe-action)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}

sp {store-predicate-structure*apply*complete*action-goal-transfer
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^found-transferable-knowledge true
              ^copied <r>
          #    ^smem.command <sc>
              ^handle <handle>
              ^ptype {<ptype> << action goal >>}
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
-->
 #  (<sc> ^store <r>)
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type already-know
          ^fields <f>)
   (<f> ^concept-name <handle> ^type <ptype>)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
}


#TODO REMOVE?
sp {store-predicate-structure*apply*complete*remove-learn-link
   (state <s> ^name store-predicate-structure
              ^operator.name complete
             -^message.predicate <ll>
              ^top-state <ts>)
   (<s> ^storing name)
   (<ts> ^dialog-context <dc>)
   (<dc> ^learn-link <ll>)
-->
   (<dc> ^learn-link <ll> -)
}

sp {store-predicate-structure*elaborate*top-state*dialogue-context*puzzle
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^top-state <ts>)
   (<s> ^storing name ^ptype puzzle ^handle <handle> ^message.predicate <pred>)
-->
   (<ts> ^dialog-context <dc>)
   (<dc> ^type game-learning ^name <handle> ^structure <pred> ^learning true ^needs-setup true)
   (<pred> ^actions <act> ^goals <go> ^heuristics <heu> ^multiplayer false ^task-type puzzle)
#   (<act> ^handle stack-block2)
#   (<go> ^handle all-stacked2)
   #test learning predicates
#   (<dc> ^learning-predicate <lp>)
#   (<lp> ^name adjacent)
}

sp {store-predicate-structure*elaborate*top-state*dialogue-context*game
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^top-state <ts>)
   (<s> ^storing name ^ptype game ^handle <handle> ^message.predicate <pred> )
-->
   (<ts> ^dialog-context <dc>)
   (<dc> ^type game-learning ^name <handle> ^structure <pred> ^learning true ^needs-setup true)
   (<pred> ^actions <act> ^goals <go> ^heuristics <heu> ^multiplayer true ^task-type game)
#   (<act> ^handle stack-block2)
#   (<go> ^handle all-stacked2)
   #test learning predicates
#   (<dc> ^learning-predicate <lp>)
#   (<lp> ^name adjacent)
}

sp {store-predicate-structure*elaborate*top-state*dialogue-context*goal
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^top-state <ts>)
   (<s> ^storing name ^ptype goal ^handle <handle> ^message.predicate <pred2> ^found-transferable-knowledge false)
   (<ts> ^dialog-context <dc>)
   (<dc> ^structure <pred>)
   (<pred> ^goals <go>)
-->
   (<go> ^goal <pred2>)
   (<pred2> ^predicate-structure <ps> ^type goal)
   (<dc> ^learn-link <pred2> ^needs-goal-setup true)
}


sp {store-predicate-structure*elaborate*top-state*dialogue-context*action
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^top-state <ts>)
   (<s> ^storing name ^ptype action ^handle <handle> ^message.predicate <pred2> ^found-transferable-knowledge false)
   (<ts> ^dialog-context <dc>)
   (<dc> ^structure <pred>)
   (<pred> ^actions <act>)
-->
   (<act> ^action <pred2>)
   (<pred2> ^predicate-structure <ps> ^type action)
   (<dc> ^learn-link <pred2>)
}

#sp {store-predicate-structure*elaborate*top-state*dialogue-context*action*transfer
#   (state <s> ^name store-predicate-structure
#              ^operator.name complete
#              ^smem.command <sc>
#              ^smem.result.retrieved <r>
#              ^top-state <ts>)
#   (<s> ^storing name ^ptype action ^handle <handle> ^message.predicate <pred2> ^found-transferable-knowledge true)
#   (<ts> ^dialog-context <dc>)
#   (<dc> ^structure <pred> ^name <gname>)
#   (<pred> ^actions <act>)
#-->
#    (<s> ^copied <r>)
#   (<r> ^from <gname>)
#   (<sc> ^store <r>)
#   (<act> ^handle <handle>)
#}
#sp {store-predicate-structure*elaborate*top-state*dialogue-context*goal*transfer
#   (state <s> ^name store-predicate-structure
#              ^operator.name complete
#              ^smem.command <sc>
#              ^smem.result.retrieved <r>
#              ^top-state <ts>)
#   (<s> ^storing name ^ptype goal ^handle <handle> ^message.predicate <pred2> ^found-transferable-knowledge true)
#   (<ts> ^dialog-context <dc>)
#   (<dc> ^structure <pred> ^name <gname>)
#   (<pred> ^goals <go>)
#-->
#    (<s> ^copied <r>)
#   (<r> ^from <gname>)
#   (<sc> ^store <r>)
#   (<go> ^handle <handle>)
#}

sp {store-predicate-structure*elaborate*query*find-transferable*knowlege
   (state <s> ^name store-predicate-structure
              ^smem.command <sc>)
             # ^operator.name complete)
   (<s> ^storing name ^ptype << action goal >> ^handle <handle> ^message.predicate <pred2>)
-->
   (<sc> ^query <pred2> ^depth 1)
   (<pred2> ^handle <handle> ^item-type predicate)
}


sp {store-predicate-structure*elaborate*found-transferable-knowledge*true
    :o-support
   (state <s> ^name store-predicate-structure
              ^smem.result.retrieved)
-->
   (<s> ^found-transferable-knowledge true)
}
sp {store-predicate-structure*propose*transfer-action-goal
   (state <s> ^name store-predicate-structure
              ^smem.result.retrieved <struc>
              ^found-transferable-knowledge true
              ^storing name ^ptype <type> ^handle <handle>)
-->
    (<s> ^operator <o> + >)
    (<o> ^name transfer-action-goal
         ^type <type>
         ^structure <struc>
         ^handle-name <handle>)
}


sp {store-predicate-structure*elaborate*found-transferable-knowledge*false
    :o-support
   (state <s> ^name store-predicate-structure
              ^smem.result.failure)
-->
   (<s> ^found-transferable-knowledge false)
}



sp {store-predicate-structure*elaborate*top-state*dialogue-context*multiplayer
   (state <s> ^name store-predicate-structure
              ^operator.name complete
              ^top-state <ts>)
   (<s> ^multiplayer <mult>)
   (<ts> ^dialog-context <dc>)
   (<dc> ^structure <pred>)
-->
   (<pred> ^multiplayer <mult>)
}