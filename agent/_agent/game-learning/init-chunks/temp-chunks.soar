sp {chunk-multi*chunk-predicate-impasse*apply*complete*snc*t1062-1
    :chunk
    (state <s1> ^gtype { << action goal >> <c2> } ^<c2> <g1>)
    (<g1> ^condition <c1>)
    (<c1> ^name clear ^type concept ^attribute predicate)
    -->
    (<s1> ^predicate <p1> + ^gtype predicate +)
    (<p1> ^link <c1> + ^potential-args <p2> + ^parameter-set <p3> +
           ^formated predicate + ^primary-rtype single + ^nlp-set <p9> +
           ^aname clear + ^handle clear +)
    (<p3> ^argnum 1 +)
    (<p9> ^conditions <c3> + ^aname clear +)
    (<c3> ^type state-pair + ^name below1 + ^attribute prepositions +
           ^result <r1> + ^parameter <p5> + ^negative true + ^args <a2> +
           ^rtype single +)
    (<r1> ^set <r2> +)
    (<p5> ^1 <p4> + ^num 1 +)
    (<p4> ^type single + ^param-id 1 +)
    (<a2> ^1 <c4> + ^2 <c5> + ^num 2 +)
    (<c4> ^name object + ^attribute input-arg + ^result <r3> +
           ^parameter <p7> + ^negative false + ^args <a1> + ^rtype single +)
    (<r3> ^set <r4> +)
    (<p7> ^1 <p6> + ^num 1 +)
    (<p6> ^type single + ^param-id 1 +)
    (<c5> ^type attribute + ^name object + ^attribute primitive +
           ^result <r5> + ^parameter <p8> + ^negative false + ^args <a3> +
           ^rtype single +)
    (<r5> ^set <s2> +)
    (<p8> ^num 0 +)
}

#
#sp {chunk*elaborate*clear
#   :chunk
#   (state <s> ^name game-search
#              ^gtype <gtype>
#              ^<gtype>.condition <co>)
#   (<co> ^type concept ^attribute predicate ^name clear)
#-->
#   (<s> ^predicate <T5> ^gtype predicate)
#   
#   (<T5> ^primary-rtype single ^aname clear ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125> ^link <co>)
#(<P124> ^argnum 1)
#
#  (<nlps> ^conditions <cs> ^aname clear ^name clear)
#  
#   (<cs> ^result <r4> ^name below1 ^parameter <param1> ^rtype single ^negative true ^args <ag> ^type state-pair ^attribute prepositions)
#   (<r4> ^set <res4>)
#   (<ag> ^1 <c5> ^2 <c6> ^num 2)
#   (<param1> ^1 <p11> ^num 1)
#   (<p11> ^param-id 1 ^type single)     
#   
#    (<c5> ^args <A57> ^attribute input-arg ^name object ^negative false ^result <r5>
#                 ^parameter <P225> ^rtype single)
#   (<P225> ^1 <P224> ^num 1)
#   (<r5> ^set <res0>)
#   (<P224> ^param-id 1 ^type single)
#   
#   (<c6> ^args <A56> ^attribute primitive ^name object ^negative false
#                 ^parameter <P226> ^result <R96> ^rtype single ^type attribute)
#            (<P226> ^num 0)
#            (<R96> ^set <S156>)
#}



sp {chunk*justification-1226*t2386-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^world <n1> ^<c2> <a1>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^instance <n3> ^handle <c1>)
    (<n3> ^2 <n4> ^1 <n5>)
    (<a1> ^condition <n6>)
    (<n6> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a2>
          ^parameter <p2> ^result <r3> ^attribute <c3>)
    (<a2> ^num 2 ^2 <c4> ^1 <c5>)
    (<c4> -^rtype set ^result <r1>)
    (<c5> -^rtype set ^result <r2>)
    (<p2> ^num { < 2 <c6> })
    (<r3> ^set <p5>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n4>)
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^1 <n5> +)
}

sp {chunk*justification-554*t1110-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^world <n1> ^<c2> <a1>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^instance <n3> ^handle <c1>)
    (<n3> ^2 <n4> ^1 <n5>)
    (<a1> ^condition <n6>)
    (<n6> ^rtype single ^negative false ^name <c1> ^type state-pair ^args <a2>
          ^parameter <p2> ^result <r3> ^attribute <c3>)
    (<a2> ^num 2 ^2 <c4> ^1 <c5>)
    (<p2> ^num 2)
    (<c4> -^rtype set ^result <r1>)
    (<c5> -^rtype set ^result <r2>)
    (<r3> ^set <p5>)
    (<r2> ^set <p4>)
    (<p4> ^instance <i2>)
    (<i2> ^1 <n5>)
    (<r1> ^set <p3>)
    (<p3> ^instance <i1>)
    (<i1> ^1 <n4>)
    -->
    (<p5> ^instance <i3> +)
    (<i3> ^2 <n4> + ^1 <n5> +)
}

sp {chunk*justification-538*t1104-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c2>)
    (<c2> ^rtype single ^type attribute ^args <a2> ^negative <c3>
          ^parameter <p1> ^result <r3> ^name <c5> ^attribute <c6>)
    (<p1> ^num { < 2 <c7> })
    (<a2> ^1 <c4>)
    (<r3> ^set <p3>)
    (<c4> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^instance <i1>)
    (<i1> ^1 <n1>)
    (<n1> ^predicates <p2>)
    (<p2> ^<c6> <c5>)
    -->
    (<p3> ^instance <i2> +)
    (<i2> ^1 <n1> +)
}

sp {chunk*justification-525*t1098-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c2> ^world <n1> ^<c2> <p2>)
    (<l1> ^game <g1>)
    (<n1> ^predicates <p1>)
    (<p1> ^predicate <n2>)
    (<n2> ^handle <c1>)
    (<p2> ^condition <x1>)
    (<x1> ^rtype single ^negative true ^name <c1> ^type state-pair ^args <x2>
          ^parameter <x3> ^result <x8> ^attribute <c3>)
    (<x2> ^num 2 ^1 <x4> ^2 <x5>)
    (<x4> -^rtype set ^result <x6>)
    (<x3> ^num { < 2 <c4> })
    (<x8> ^set <x9>)
    (<x6> ^set <x7>)
    (<x7> ^instance <i1>)
    (<i1> ^1 <n3>)
   -{ (<n2> ^instance <instance>)
      (<instance> ^1 <n3> ^2 <objb>)
      (<x5> ^result <r*3>)
      (<r*3> ^set <s*5>)
      (<s*5> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    -->
    (<x9> ^instance <i2> +)
    (<i2> ^1 <n3> +)
}

sp {chunk*justification-485*t1092-1
    :chunk
    (state <s1> ^list <l1> ^gtype <c1> ^world <n1> ^<c1> <a2>)
    (<l1> ^game <g1>)
    (<n1> ^objects <o1>)
    (<a2> ^condition <c2>)
    (<c2> ^rtype single ^name object ^type attribute ^attribute primitive
          ^args <a3> ^negative <c3> ^parameter <p1> ^result <r1>)
    (<a3> -^1 <a1>)
    (<r1> ^set <p2>)
    (<o1> ^object <n2>)
    -->
    (<p2> ^instance <i1> +)
    (<i1> ^1 <n2> +)
}
