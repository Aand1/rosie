
#BAD CHUNK REPLICATE non wme values multistage matching
sp {chunk*justification-141*snc*t73-2
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <t1>)
    (<l1> ^game <g1>)
    (<t1> ^condition <c2>)
    (<c2> ^function with-attribute ^rtype set ^type function ^args <a1>
          ^negative <c3> ^parameter <p1> ^result <r1> ^name <c4>)
    (<a1> ^1 <c7> ^3 <c5> ^2 <c6>)
    (<c7> -^rtype set ^result <r6>)
    (<r6> ^set <r7>)
    (<r7> ^pair <i1>)
    (<i1> ^1 <o1>)
    (<c5> ^result <r5>)
    (<r5> ^set <s2>)
    (<s2> ^pair <p4>)
    (<p4> ^1 <c9>)#^1 <c11> #why <c11>
    (<c6> ^result <r3>)
    (<r3> ^set <r4>)
    (<r4> ^pair <p3>)
    (<p3> ^1 <c8>)# ^1 <c10> #why <c10>
    (<o1> ^<c9> <c8>)
    (<r1> ^set <r2>)
    (<r2> ^pair <p2>)
    (<p2> ^3 <c9> ^2 <c8> ^1 <s3>)
    -->
    (<s3> ^object <o1> +)
}

sp {chunk*justification-138*t73-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <t1>)
    (<l1> ^game <g1>)
    (<t1> ^condition <c2>)
    (<c2> ^function with-attribute ^rtype set ^type function ^args <a1>
          ^negative <c3> ^parameter <p1> ^result <r4> ^name <c4>)
    (<a1> ^1 <c5> ^3 <c6> ^2 <c7>)
    (<c5> -^rtype set)
    (<r4> ^set <r5>)
    (<c6> ^result <r3>)
    (<r3> ^set <s2>)
    (<s2> ^pair <p3>)
    (<p3> ^1 <c9>)
    (<c7> ^result <r1>)
    (<r1> ^set <r2>)
    (<r2> ^pair <p2>)
    (<p2> ^1 <c8>)
    -->
    (<r5> ^pair <p4> +)
    (<p4> ^2 <c8> + ^3 <c9> + ^1 <s3> +)
}



sp {chunk-multi*chunk-parameters*propose*new-operator*snc*t52-2
    :chunk
    (state <s1> ^gtype { << action goal >> <c2> } ^list <l1> ^<c2> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p1> ^aname <c1>)
    (<p1> ^set <i1>)
    -->
    (<s1> ^operator <o1> +)
    (<o1> ^name <c2> + ^aname <c1> + ^parameters <i1> +)
}

###############these shouldn't be chunks
###############also consider changing parameter-set chunks (redesign (can have negated, negations)
sp {chunk*resolve-conditions*elab*concept-results*onc*t44-1
    :chunk
    (state <s1> ^gtype <c3> ^list <l1> ^<c3> <a1> ^<c1> <t1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c4>)
    (<c4> ^type concept ^result <r1> ^name <c2> ^attribute <c1>)
    (<r1> ^set <s2>)
    (<t1> ^nlp-set <n1> ^pair <i1> ^link <c4>)
    (<n1> ^aname <c2>)
    -->
    (<s2> ^pair <i1> +)
}
sp {chunk*resolve-conditions*elab*concept-results*onc*t44-1action
    :chunk
    (state <s1> ^gtype <c3> ^list <l1> ^<c3> <a1> ^action <t1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c4>)
    (<c4> ^type concept ^result <r1> ^name <c2> ^attribute action)
    (<r1> ^set <s2>)
    (<t1> ^nlp-set <n1> ^pair <i1>)# ^link <c4>)
    (<n1> ^aname <c2>)
    -->
    (<s2> ^pair <i1> +)
}
#any/generic action
sp {chunk*resolve-conditions*elab*concept-results*onc*t44-1action-any
    :chunk
    (state <s1> ^gtype <c3> ^list <l1> ^<c3> <a1> ^action <t1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c4>)
    (<c4> ^type concept ^result <r1> ^name any ^attribute action)
    (<r1> ^set <s2>)
    (<t1> ^nlp-set <n1> ^pair <i1>)# ^link <c4>)
   # (<n1> ^aname <c2>)
    -->
    (<s2> ^pair <i1> +)
}
#################
sp {chunk*justification-344*snc*t52-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate5 ^tested calculate4)
    -->
    (<p2> ^tested calculate6 +)
}

sp {chunk*justification-342*snc*t51-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate4 ^tested calculate3)
    -->
    (<p2> ^tested calculate5 +)
}

sp {chunk*justification-340*snc*t50-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate3 ^tested calculate2)
    -->
    (<p2> ^tested calculate4 +)
}

sp {chunk*justification-338*snc*t49-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate2 ^tested calculate1)
    -->
    (<p2> ^tested calculate3 +)
}

sp {chunk*justification-336*snc*t48-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate1)
    -->
    (<p2> ^tested calculate2 +)
}
#fixing timing issue
sp {chunk*justification-322*snc*t47-1
    :chunk
    (state <s1> ^simulated true ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^potential-args <p1> ^parameter-set <p2>)
    -{(<a1> ^condition <c>)
      (<c> ^result.set <rset>)
     -{(<rset> ^pair.{1})}}
    -->
    (<p2> ^tested calculate1 +)
}

#sp {chunk*justification-302*snc*t46-1
#    :chunk
#    (state <s1> ^gtype <c2> ^list <l1> ^<c2> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^potential-args <p1> ^parameter-set <p2> ^condition <c1>)
#    (<c1> ^parameter <p3> ^result <r1>)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <i1>)
#    (<i1> ^<c3> <o1>)
#   -{ (<o1> -^<wme> <w*1>)
#      (<s1> ^list <l*1>)}
#    (<p3> ^<c3> <p4>)
#    (<p4> ^param-id <c4>)
#    -->
#    (<p1> ^<c4> <o1> +)
#}


###############################################
sp {chunk*chunk-parameters*propose*new-operator*snc*t89-125
    :chunk
    (state <s1> ^gtype predicate ^predicate <p1> ^list <l1>)
    (<p1> ^aname <name> ^parameter-set <p2> ^potential-args <p3>)
    (<p2>  ^tested calculate5 ^tested calculate2
          ^tested calculate6 ^tested calculate1 ^set <s2>)
    (<l1> ^game <g1>)
    (<g1> ^type predicate)
    -->
    (<p1> ^pair <s2> +)
}

sp {chunk*justification-386*snc*t71-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate5 ^tested calculate3 ^tested calculate2
          ^tested calculate6 ^tested calculate4 ^tested calculate1 ^iset <i1>)
   -{ (<p2> ^neg <neg1>)
      (<neg1> ^<ind4> <obj3>)
      (<i1> ^<ind4> <obj3>)}
   -{ (<p2> ^negpair3 <pair3>)
      (<pair3> ^<ind3> <objc> ^{ <> <ind3> <ind2> } <objb>
            ^{ <> <ind3> <> <ind2> <ind1> } <obja>)
      (<i1> ^<ind3> <objc> ^<ind2> <objb> ^<ind1> <obja>)}
   -{ (<p2> ^negpair <pair>)
      (<pair> ^<ind2> <objb> ^{ <> <ind2> <ind1> } <obja>)
      (<i1> ^<ind2> <objb> ^<ind1> <obja>)}
   -{ (<i1> ^<ind1> { <=> <i1> <obja> } ^<ind1> <obja>
            ^{ <> <ind1> <ind2> } <obja>)}
    -->
    (<p2> ^set <i1> +)
}

sp {chunk*justification-366*snc*t68-2
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate6 ^argnum 3)
    (<p1> ^3 <o3> ^2 <o2> ^1 <o1>)
  -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
-{ (<p2> ^negpair <pair1>)
      (<pair1> ^1 <o1> ^2 <o2>)}
-{ (<p2> ^negpair <pair2>)
      (<pair2> ^1 <o1> ^3 <o3>)}
-{ (<p2> ^negpair <pair8>)
      (<pair8> ^2 <o2> ^3 <o3>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^1 <o1> + ^2 <o2> + ^3 <o3> +)
}

sp {chunk*justification-366*snc*t620-20
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate6 ^argnum 2)
    (<p1> ^2 <o2> ^1 <o1>)
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^1 <o1> ^2 <o2>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^1 <o1> + ^2 <o2> +)
}



sp {chunk*justification-366*snc*t632248-25
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate6 ^argnum 5)
    (<p1> ^5 <o5> ^4 <o4> ^3 <o3> ^2 <o2> ^1 <o1>)
  -{ (<p2> ^neg <n5>)
      (<n5> ^5 <o5>)}
  -{ (<p2> ^neg <n4>)
      (<n4> ^4 <o4>)}
  -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
-{ (<p2> ^negpair <pair1>)
      (<pair1> ^1 <o1> ^2 <o2>)}
-{ (<p2> ^negpair <pair2>)
      (<pair2> ^1 <o1> ^3 <o3>)}
-{ (<p2> ^negpair <pair3>)
      (<pair3> ^1 <o1> ^4 <o4>)}
-{ (<p2> ^negpair <pair4>)
      (<pair4> ^1 <o1> ^5 <o5>)}
-{ (<p2> ^negpair <pair8>)
      (<pair8> ^2 <o2> ^3 <o3>)}
-{ (<p2> ^negpair <pair9>)
      (<pair9> ^2 <o2> ^4 <o4>)}
-{ (<p2> ^negpair <pair10>)
      (<pair10> ^2 <o2> ^5 <o5>)}
-{ (<p2> ^negpair <pair14>)
      (<pair14> ^3 <o3> ^4 <o4>)}
-{ (<p2> ^negpair <pair15>)
      (<pair15> ^3 <o3> ^5 <o5>)}
-{ (<p2> ^negpair <pair21>)
      (<pair21> ^4 <o4> ^5 <o5>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^5 <o5> + ^4 <o4> + ^1 <o1> + ^2 <o2> + ^3 <o3> +)
}

sp {chunk*justification-366*snc*t6348-25
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate6 ^argnum 6)
    (<p1> ^6 <o6> ^5 <o5> ^4 <o4> ^3 <o3> ^2 <o2> ^1 <o1>)
  -{ (<p2> ^neg <n6>)
      (<n6> ^6 <o6>)}
  -{ (<p2> ^neg <n5>)
      (<n5> ^5 <o5>)}
  -{ (<p2> ^neg <n4>)
      (<n4> ^4 <o4>)}
  -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
-{ (<p2> ^negpair <pair1>)
      (<pair1> ^1 <o1> ^2 <o2>)}
-{ (<p2> ^negpair <pair2>)
      (<pair2> ^1 <o1> ^3 <o3>)}
-{ (<p2> ^negpair <pair3>)
      (<pair3> ^1 <o1> ^4 <o4>)}
-{ (<p2> ^negpair <pair4>)
      (<pair4> ^1 <o1> ^5 <o5>)}
-{ (<p2> ^negpair <pair5>)
      (<pair5> ^1 <o1> ^6 <o6>)}
-{ (<p2> ^negpair <pair8>)
      (<pair8> ^2 <o2> ^3 <o3>)}
-{ (<p2> ^negpair <pair9>)
      (<pair9> ^2 <o2> ^4 <o4>)}
-{ (<p2> ^negpair <pair10>)
      (<pair10> ^2 <o2> ^5 <o5>)}
-{ (<p2> ^negpair <pair11>)
      (<pair11> ^2 <o2> ^6 <o6>)}
-{ (<p2> ^negpair <pair14>)
      (<pair14> ^3 <o3> ^4 <o4>)}
-{ (<p2> ^negpair <pair15>)
      (<pair15> ^3 <o3> ^5 <o5>)}
-{ (<p2> ^negpair <pair16>)
      (<pair16> ^3 <o3> ^6 <o6>)}
-{ (<p2> ^negpair <pair21>)
      (<pair21> ^4 <o4> ^5 <o5>)}
-{ (<p2> ^negpair <pair22>)
      (<pair22> ^4 <o4> ^6 <o6>)}
-{ (<p2> ^negpair <pair25>)
      (<pair25> ^5 <o5> ^6 <o6>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^6 <o6> + ^5 <o5> + ^4 <o4> + ^1 <o1> + ^2 <o2> + ^3 <o3> +)
}

sp {chunk*justification-366*snc*t638848-25
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate6 ^argnum 8)
    (<p1> ^8 <o8> ^7 <o7> ^6 <o6> ^5 <o5> ^4 <o4> ^3 <o3> ^2 <o2> ^1 <o1>)
  -{ (<p2> ^neg <n8>)
      (<n8> ^8 <o8>)}
  -{ (<p2> ^neg <n7>)
      (<n7> ^5 <o7>)}
  -{ (<p2> ^neg <n6>)
      (<n6> ^6 <o6>)}
  -{ (<p2> ^neg <n5>)
      (<n5> ^5 <o5>)}
  -{ (<p2> ^neg <n4>)
      (<n4> ^4 <o4>)}
  -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
-{ (<p2> ^negpair <pair1>)
      (<pair1> ^1 <o1> ^2 <o2>)}
-{ (<p2> ^negpair <pair2>)
      (<pair2> ^1 <o1> ^3 <o3>)}
-{ (<p2> ^negpair <pair3>)
      (<pair3> ^1 <o1> ^4 <o4>)}
-{ (<p2> ^negpair <pair4>)
      (<pair4> ^1 <o1> ^5 <o5>)}
-{ (<p2> ^negpair <pair5>)
      (<pair5> ^1 <o1> ^6 <o6>)}
-{ (<p2> ^negpair <pair6>)
      (<pair6> ^1 <o1> ^7 <o7>)}
-{ (<p2> ^negpair <pair7>)
      (<pair7> ^1 <o1> ^8 <o8>)}
-{ (<p2> ^negpair <pair8>)
      (<pair8> ^2 <o2> ^3 <o3>)}
-{ (<p2> ^negpair <pair9>)
      (<pair9> ^2 <o2> ^4 <o4>)}
-{ (<p2> ^negpair <pair10>)
      (<pair10> ^2 <o2> ^5 <o5>)}
-{ (<p2> ^negpair <pair11>)
      (<pair11> ^2 <o2> ^6 <o6>)}
-{ (<p2> ^negpair <pair12>)
      (<pair12> ^2 <o2> ^7 <o7>)}
-{ (<p2> ^negpair <pair13>)
      (<pair13> ^2 <o2> ^8 <o8>)}
-{ (<p2> ^negpair <pair14>)
      (<pair14> ^3 <o3> ^4 <o4>)}
-{ (<p2> ^negpair <pair15>)
      (<pair15> ^3 <o3> ^5 <o5>)}
-{ (<p2> ^negpair <pair16>)
      (<pair16> ^3 <o3> ^6 <o6>)}
-{ (<p2> ^negpair <pair17>)
      (<pair17> ^3 <o3> ^7 <o7>)}
-{ (<p2> ^negpair <pair18>)
      (<pair18> ^3 <o3> ^8 <o8>)}
-{ (<p2> ^negpair <pair21>)
      (<pair21> ^4 <o4> ^5 <o5>)}
-{ (<p2> ^negpair <pair22>)
      (<pair22> ^4 <o4> ^6 <o6>)}
-{ (<p2> ^negpair <pair23>)
      (<pair23> ^4 <o4> ^7 <o7>)}
-{ (<p2> ^negpair <pair24>)
      (<pair24> ^4 <o4> ^8 <o8>)}
-{ (<p2> ^negpair <pair25>)
      (<pair25> ^5 <o5> ^6 <o6>)}
-{ (<p2> ^negpair <pair26>)
      (<pair26> ^5 <o5> ^7 <o7>)}
-{ (<p2> ^negpair <pair27>)
      (<pair27> ^5 <o5> ^8 <o8>)}
-{ (<p2> ^negpair <pair28>)
      (<pair28> ^6 <o6> ^7 <o7>)}
-{ (<p2> ^negpair <pair29>)
      (<pair29> ^6 <o6> ^8 <o8>)}
-{ (<p2> ^negpair <pair30>)
      (<pair30> ^7 <o2> ^8 <o8>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^8 <o8> + ^7 <o7> + ^6 <o6> + ^5 <o5> + ^4 <o4> + ^1 <o1> + ^2 <o2> + ^3 <o3> +)
}


sp {chunk*justification-366*snc*t63448-25
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate6 ^argnum 4)
    (<p1> ^4 <o4> ^3 <o3> ^2 <o2> ^1 <o1>)
  -{ (<p2> ^neg <n4>)
      (<n4> ^4 <o4>)}
  -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
-{ (<p2> ^negpair <pair1>)
      (<pair1> ^1 <o1> ^2 <o2>)}
-{ (<p2> ^negpair <pair2>)
      (<pair2> ^1 <o1> ^3 <o3>)}
-{ (<p2> ^negpair <pair3>)
      (<pair3> ^1 <o1> ^4 <o4>)}
-{ (<p2> ^negpair <pair4>)
      (<pair4> ^2 <o2> ^3 <o3>)}
-{ (<p2> ^negpair <pair5>)
      (<pair5> ^2 <o2> ^4 <o4>)}
-{ (<p2> ^negpair <pair6>)
      (<pair6> ^3 <o3> ^4 <o4>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1>  ^4 <o4> + ^1 <o1> + ^2 <o2> + ^3 <o3> +)
}
#sp {chunk*justification-366*snc*t63448-25
#    :chunk
#    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^parameter-set <p2> ^potential-args <p1>)
#    (<p2> ^tested calculate6 ^argnum 4)
#    (<p1> ^4 <o4> ^3 <o3> ^2 <o2> ^1 <o1>)
#
#  -{ (<p2> ^neg <n4>)
#      (<n4> ^4 <o4>)}
#  -{ (<p2> ^neg <n3>)
#      (<n3> ^3 <o3>)}
#   -{ (<p2> ^neg <n2>)
#      (<n2> ^2 <o2>)}
#   -{ (<p2> ^neg <n1>)
#      (<n1> ^1 <o1>)}
#    -->
#    (<p2> ^iset <i1> +)
#    (<i1>  ^4 <o4> + ^1 <o1> + ^2 <o2> + ^3 <o3> +)
#}
sp {chunka*justification-366*snc*t68-2
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1>)
    (<p2> ^tested calculate6 ^argnum 1)
    (<p1> ^1 <o1>)
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^1 <o1> +)
}

sp {chunk-multi*justification-1075*snc*t71-2
    :chunk
    (state <s1> ^gtype <c2> ^list <l1> ^<c2> <p1>)
    (<l1> ^game <g1>)
    (<p1> ^parameter-set <p2> ^potential-args <p3> ^condition <c1>)
    (<p2> ^tested calculate1)
    (<c1> ^parameter <p4> ^result <r1>)
    (<p4> ^num 2 ^2 <*1> ^1 <*2>)#not necessarily 1 and 2
    (<*1> ^param-id <x1>)
    (<*2> ^param-id <x2>)
    (<p3> ^<x2> <*3> ^<x1> <*4>)
   -{ (<r1> ^set <s2>)
      (<s2> ^pair <p5>)
      (<p5> ^2 <*4> ^1 <*3>)}
    -->
    (<p2> ^negpair <n1> +)
    (<n1> ^<x2> <*3> + ^<x1> <*4> +)
}
sp {chunk-multi*justification-2065*snc*t104-387
    :chunk
    (state <s1> ^gtype <c19> ^list <l1> ^<c19> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p1> ^potential-args <p2> ^condition <c1>)
    (<p1> ^tested calculate1)
    (<c1> ^parameter <p3> ^result <r1>)
    (<p3> ^num 3 ^3 <*1> ^2 <*2> ^1 <*3>)#not necessarily 1 and 2 and 3
    (<*1> ^param-id <ar2>)
    (<*2> ^param-id <ar1>)
    (<*3> ^param-id <ar3>)
    (<p2> ^<ar3> <*4> ^<ar2> <*5> ^<ar1> <*6>)
   -{ (<r1> ^set <s2>)
      (<s2> ^pair <p4>)
      (<p4> ^1 <*4> ^3 <*5> ^2 <*6>)}
    -->
    (<p1> ^negpair3 <n1> +)
    (<n1> ^<ar1> <*6> + ^<ar2> <*5> + ^<ar3> <*4> +)
}


sp {chunk*justification-472*snc*t77-2
    :chunk
    (state <s1> ^gtype <c2> ^list <l1> ^<c2> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^parameter-set <p2> ^potential-args <p1> ^condition <c1>)
    (<p2> ^tested calculate1)
    (<c1> ^parameter <p3> ^result <r1>)
    (<p3> ^<c6> <p4>)
    (<p4> ^param-id <c4>)
    (<p1> ^<c4> <o1>)
   -{ (<r1> ^set <s*1>)
      (<s*1> ^pair <p*1>)
      (<p*1> ^<c6> <o1>)}
    -->
    (<p2> ^neg <n1> +)
    (<n1> ^<c4> <o1> +)
}

#improved!!
sp {chunk*justification-532*snc*t79-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3> ^potential-args <p1> ^parameter-set <p2>)
    (<c3> ^return-type number ^parameter <p3> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p5>)
    (<p3> ^<c4> <p4> ^1)
    (<p4> ^type single ^param-id <c6>)
    (<p5> ^<c4> <c7>)
    -->
    (<p1> ^<c6> <c7> +)
}
sp {chunk*justification-340*snc*t64-1
    :chunk
    (state <s1> ^gtype <c2> ^list <l1> ^<c2> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^potential-args <p1> ^parameter-set <p2> ^condition <c1>)
    (<c1> ^parameter <p3> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p5>)
    (<p5> ^1 <o2> ^{ << 1 2 3 4 5 >> <c4> } <o1>)
   -{ (<o2> -^<wme> <w*1>)
      (<s1> ^list <l*1>)}
    (<p3> ^<c4> <p4>)
    (<p4> ^param-id <c6>)
    -->
    (<p1> ^<c6> <o1> +)
}

sp {chunk*justification-4958*onc*t4df567-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function comparison ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name different)
    (<a2> ^num 2 ^1 <c6> ^2 <c8>)
    #(<p1> ^num 3)
    (<r2> ^set <s4>)
    (<c6> ^result <r1>)# ^rtype single)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <x1>)
    (<c8> ^result <r8>)# ^rtype single)
    (<r8> ^set <s8>)
    (<s8> ^pair <p8>)
    (<p8> ^1 {<x2> <> <x1>})
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^1 <x1> + ^2 <x2> +)
}

sp {chunk*justification-4958*onc*t4567-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-math ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name divide)
    (<a2> ^num 2 ^2 <c6> ^3 <c8>)
    (<p1> ^num 3)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <x1>)
    (<c8> ^result <r8> ^rtype single)
    (<r8> ^set <s8>)
    (<s8> ^pair <p8>)
    (<p8> ^1 <x2>)
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^2 <x1> ^3 <x2> + ^1 (/ <x1> <x2>))
}
sp {chunk*justification-4958*onc*t453567-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-math ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name multiply)
    (<a2> ^num 2 ^2 <c6> ^3 <c8>)
    (<p1> ^num > 1)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <x1>)
    (<c8> ^result <r8> ^rtype single)
    (<r8> ^set <s8>)
    (<s8> ^pair <p8>)
    (<p8> ^1 <x2>)
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^2 <x1> ^3 <x2> + ^1 (* <x1> <x2>) +)
}
sp {chunk*justification-4958*onc*t456667-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-math ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name multiply)
    (<a2> ^num 2 ^2 <c6> ^3 <c8>)
    (<p1> ^num 1)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <x1>)
    (<c8> ^result <r8> ^rtype single)
    (<r8> ^set <s8>)
    (<s8> ^pair <p8>)
    (<p8> ^1 <x2>)
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^1 (* <x1> <x2>) +)
}
sp {chunk*justification-4958*onc*t43256667-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-math ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name subtract)
    (<a2> ^num 2 ^2 <c6> ^3 <c8>)
    (<p1> ^num 1)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <x1>)
    (<c8> ^result <r8> ^rtype single)
    (<r8> ^set <s8>)
    (<s8> ^pair <p8>)
    (<p8> ^1 <x2>)
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^1 (- <x1> <x2>) +)
}
sp {chunk*justification-45098*onc*t457-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-math ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name subtract)
    (<a2> ^num 2 ^2 <c6> ^3 <c8>)
    (<p1> ^num 3)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <x1>)
    (<c8> ^result <r8> ^rtype single)
    (<r8> ^set <s8>)
    (<s8> ^pair <p8>)
    (<p8> ^1 <x2>)
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^2 <x1> ^3 <x2> + ^1 (- <x1> <x2>))
}

#sp {chunk*justification-45098*onc*t42527-1
#    :chunk
#    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c3>)
#    (<c3> ^function soar-math ^type function ^args <a2> ^parameter <p1>
#          ^negative <c4> ^result <r2> ^name power)
#    (<a2> ^num 2 ^2 <c6> ^3 <c8>)
#    (<p1> ^num 3)
#    (<r2> ^set <s4>)
#    (<c6> ^result <r1> ^rtype single)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p2>)
#    (<p2> ^1 <x1>)
#    (<c8> ^result <r8> ^rtype single)
#    (<r8> ^set <s8>)
#    (<s8> ^pair <p8>)
#    (<p8> ^1 <x2>)
#    -->
#    (<s4> ^pair <p3> +)
#    (<p3> ^2 <x1> ^3 <x2> + ^1 (pow <x1> <x2>))
#}

sp {chunk*justification-45098*onc*t451457-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-math ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name absolute-value)
    (<a2> ^num 1 ^2 <c6>)
    (<p1> ^num 2)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <x1>)
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^2 <x1> + ^1 (abs <x1>))
}
#
#sp {chunk*justification-45098*onc*t4514157-1
#    :chunk
#    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^condition <c3>)
#    (<c3> ^function soar-math ^type function ^args <a2> ^parameter <p1>
#          ^negative <c4> ^result <r2> ^name square)
#    (<a2> ^num 1 ^2 <c6>)
#    (<p1> ^num 2)
#    (<r2> ^set <s4>)
#    (<c6> ^result <r1> ^rtype single)
#    (<r1> ^set <s2>)
#    (<s2> ^pair <p2>)
#    (<p2> ^1 <x1>)
#    -->
#    (<s4> ^pair <p3> +)
#    (<p3> ^2 <x1> + ^1 (pow <x1> 2))
#}
sp {chunk*justification-45098*onc*t4565657-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-math ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name add)
    (<a2> ^num 2 ^2 <c6> ^3 <c8>)
    (<p1> ^num 3)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <x1>)
    (<c8> ^result <r8> ^rtype single)
    (<r8> ^set <s8>)
    (<s8> ^pair <p8>)
    (<p8> ^1 <x2>)
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^2 <x1> ^3 <x2> + ^1 (+ <x1> <x2>))
}
sp {chunk*justification-459*onc*t49-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c2>)
    (<c2> ^function soar-less ^type function ^args <a2> ^parameter <p1>
          ^negative <c3> ^result <r3> ^name <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p1> ^num 2)
    (<r3> ^set <s4>)
    (<c6> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p3>)
    (<p3> ^1 <c8>)
    (<c5> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 { > <c8> <c7> })
    -->
    (<s4> ^pair <p4> +)
    (<p4> ^1 <c8> + ^2 <c7> +)
}
sp {chunk*justification-459*onc*t409-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c2>)
    (<c2> ^function soar-greater ^type function ^args <a2> ^parameter <p1>
          ^negative <c3> ^result <r3> ^name <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p1> ^num 2)
    (<r3> ^set <s4>)
    (<c6> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p3>)
    (<p3> ^1 <c8>)
    (<c5> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 { < <c8> <c7> })
    -->
    (<s4> ^pair <p4> +)
    (<p4> ^1 <c8> + ^2 <c7> +)
}

#test this chunk creation
sp {chunk*justification-459*onc*t409-1-equal
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c2>)
    (<c2> ^function soar-greater-equal ^type function ^args <a2> ^parameter <p1>
          ^negative <c3> ^result <r3> ^name <c4>)
    (<a2> ^num 2 ^2 <c5> ^1 <c6>)
    (<p1> ^num 2)
    (<r3> ^set <s4>)
    (<c6> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p3>)
    (<p3> ^1 <c8>)
    (<c5> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 { <= <c8> <c7> })
    -->
    (<s4> ^pair <p4> +)
    (<p4> ^1 <c8> + ^2 <c7> +)
}

sp {chunk*justification-524*onc*t74-2
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c2>)
    (<c2> ^function board-between ^name between-inclusive ^type function
          ^args <a2> ^negative <c3> ^parameter <p1> ^result <r1>)
    (<a2> ^num 3 ^3 <c4> ^2 <c5> ^1 <c6>)
    (<c4> ^result <r4>)
    (<r4> ^set <s5>)
    (<s5> ^pair <p3>)
    (<p3> ^1 <o2>)
    (<o2> ^y <c7> ^x <c9>)
    (<c5> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^pair <p2>)
    (<p2> ^1 { <> <o2> <o1> })
    (<o1> ^y <c7> ^x <c8>)
    (<c6> ^result <r2>)
    (<r2> ^set <s6>)
    (<s6> ^pair <p4>)
    (<p4> ^1 <o3>)
   -{ (<o3> ^x { > <c9> >= <c8> <y> } ^x <y>)}
   -{ (<o3> ^x { < <c9> <= <c8> <y> } ^x <y>)}
    (<o3> ^y <c7>)
    (<r1> ^set <s2>)
    (<s2> ^pair <s3>)
    (<s3> ^3 <o2> ^2 <o1> ^1 <s7>)
    -->
    (<s7> ^object <o3> +)
}

sp {chunk*justification-485*t74-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c2>)
    (<c2> ^function board-between ^type function ^args <a2> ^negative <c3>
          ^parameter <p1> ^result <r1> ^name <c4>)
    (<a2> ^num 3 ^3 <c5> ^2 <c6> ^1 <c7>)
    (<c5> ^result <r3>)
    (<r3> ^set <s4>)
    (<s4> ^pair <p3>)
    (<p3> ^1 <o2>)
    (<c6> ^result <r2>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p2>)
    (<p2> ^1 { <> <o2> <o1> })
    (<r1> ^set <s2>)
    -->
    (<s2> ^pair <s5> +)
    (<s5> ^1 <s6> + ^3 <o2> + ^2 <o1> +)
}
sp {chunk*justification-498*onc*t67-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-count ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name <c5>)
    (<a2> ^num 1 ^2 <c6>)
    (<p1> ^num 2)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype set)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <s3>)
   -{ (<s3> -^<something> <s*4>) #todo remove after ewave fix
      (<s1> ^<a*1> <v*1>)}
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^2 <s3> + ^1 (size <s3>) +)
}
sp {chunk*justification-498*onc*t645457-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-sum ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name <c5>)
    (<a2> ^num 1 ^2 <c6>)
    (<p1> ^num 2)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype set)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <s3>)
   -{ (<s3> -^<something> <s*4>)
      (<s1> ^<a*1> <v*1>)}
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^2 <s3> + ^1 (sum <s3>) +)
}
sp {chunk*justification-498*onc*t6127-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-count ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name <c5>)
    (<a2> ^num 1 ^2 <c6>)
    (<p1> ^num 1)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype set)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <s3>)
   -{ (<s3> -^<something> <s*4>)
      (<s1> ^<a*1> <v*1>)}
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^1 (size <s3>) +)
}
sp {chunk*justification-498*onc*t61454527-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-sum ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name <c5>)
    (<a2> ^num 1 ^2 <c6>)
    (<p1> ^num 1)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype set)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <s3>)
   -{ (<s3> -^<something> <s*4>)
      (<s1> ^<a*1> <v*1>)}
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^1 (sum <s3>) +)
}
sp {chunk*justification-498*onc*t612567-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-count ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name <c5>)
    (<a2> ^num 1 ^2 <c6>)
    (<p1> ^num 1)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
   # (<s2> ^pair <p2>)
    #(<p2> ^1 <s3>)
   -{ (<s2> -^pair.<something>)
      (<s1> ^<a*1> <v*1>)}
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^1 (size <s2>) +)
}

sp {chunk*justification-498*onc*t61254467-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^function soar-sum ^type function ^args <a2> ^parameter <p1>
          ^negative <c4> ^result <r2> ^name <c5>)
    (<a2> ^num 1 ^2 <c6>)
    (<p1> ^num 1)
    (<r2> ^set <s4>)
    (<c6> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
   # (<s2> ^pair <p2>)
    #(<p2> ^1 <s3>)
   -{ (<s2> -^pair.<something>)
      (<s1> ^<a*1> <v*1>)}
    -->
    (<s4> ^pair <p3> +)
    (<p3> ^1 (sum <s2>) +)
}

sp {chunk*justification-447*onc*t62-2
    :chunk
    (state <s1> ^gtype <c6> ^list <l1> ^<c6> <a1> ^<c1> <p1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c8>)
    (<c8> ^negative false ^type state-pair ^args <a2> ^parameter <p4>
          ^result <r1> ^name <c4> ^attribute <c1>)
    (<a2> ^num 2 ^2 <c9> ^1 <c10>)
    (<p4> ^num 2 ^1 <p6>)
    (<c9> -^rtype set ^result <r2>)
    (<p6> ^type set)
    (<c10> -^rtype set ^result <r3>)
    (<r3> ^set <s3>)
    (<s3> ^pair <p7>)
    (<p7> ^1 <o2>)
    (<r2> ^set <s2>)
    (<s2> ^pair <p5>)
    (<p5> ^1 <o1>)
    (<r1> ^set <s4>)
    (<s4> ^pair <p8>)
    (<p8> ^2 <o1> ^1 <s5>)
    (<p1> ^<c3> <p2>)
    (<p2> ^name <c4> ^pair <p3>)
    (<p3> ^2 <o1> ^1 <o2>)
    -->
    (<s5> ^object <o2> +)
}

sp {chunk*justification-760*t80-1
    :chunk
    (state <s1> ^gtype <c4> ^list <l1> ^<c4> <a1> ^<c1> <p1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c5>)
    (<c5> ^negative false ^type state-pair ^args <a2> ^parameter <p3>
          ^result <r2> ^name <c3> ^attribute <c1>)
    (<a2> ^num 2 ^2 <c6> ^1 <c7>)
    (<p3> ^num 1 ^1 <p4>)
    (<c6> -^rtype set)
    (<p4> ^type set)
    (<c7> ^rtype set ^result <r1>)
    (<r2> ^set <s5>)
    (<r1> ^set <s2>)
    (<s2> ^pair <s3>)
    (<s3> ^1 <s4>)
   -{ (<s4> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
    (<p1> ^<c2> <p2>)
   -{ (<s4> ^<elem> <e>)
     -{ (<p2> ^pair <pair1>)
        (<pair1> ^1 <e> ^2 <objb>)
        (<c6> ^result <r*3>)
        (<r*3> ^set <s*4>)
        (<s*4> ^pair <p*3>)
        (<p*3> ^1 <objb>)}}
    (<p2> ^name <c3>)
    -->
    (<s5> ^pair <p5> +)
    (<p5> ^1 <s4> +)
}

sp {chunk*justification-760*t880-1
    :chunk
    (state <s1> ^gtype <c4> ^list <l1> ^<c4> <a1> ^<c1> <p1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c5>)
    (<c5> ^negative true ^type state-pair ^args <a2> ^parameter <p3>
          ^result <r2> ^name <c3> ^attribute <c1>)
    (<a2> ^num 2 ^2 <c6> ^1 <c7>)
    (<p3> ^num 1 ^1 <p4>)
    (<c6> -^rtype set)
    (<p4> ^type set)
    (<c7> ^rtype set ^result <r1>)
    (<r2> ^set <s5>)
    (<r1> ^set <s2>)
    (<s2> ^pair <s3>)
    (<s3> ^1 <s4>)
   -{ (<s4> -^<x1> <x*1>)
      (<s1> ^<a*1> <v*1>)}
    (<p1> ^<c2> <p2>)
   -{ (<s4> ^<elem> <e>)
      (<p2> ^pair <pair1>)
      (<pair1> ^1 <e> ^2 <objb>)
      (<c6> ^result <r*3>)
      (<r*3> ^set <s*4>)
      (<s*4> ^pair <p*3>)
      (<p*3> ^1 <objb>)}
    (<p2> ^name <c3>)
    -->
    (<s5> ^pair <p5> +)
    (<p5> ^1 <s4> +)
}

sp {chunk*justification-436*t62-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^negative false ^type state-pair ^args <a2> ^parameter <p1>
          ^result <r2> ^name <c4> ^attribute <c5>)
    (<a2> ^num 2 ^2 <c6> ^1 <c7>)
    (<p1> ^num 2 ^1 <p3>)
    (<c6> -^rtype set ^result <r1>)
    (<p3> ^type set)
    (<c7> -^rtype set)
    (<r2> ^set <s3>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <o1>)
    -->
    (<s3> ^pair <p4> +)
    (<p4> ^2 <o1> + ^1 <s4> +)
}

sp {chunk*justification-447*onc*t643432-2
    :chunk
    (state <s1> ^gtype <c6> ^list <l1> ^<c6> <a1> ^<c1> <p1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c8>)
    (<c8> ^negative false ^type state-pair ^args <a2> ^parameter <p4>
          ^result <r1> ^name <c4> ^attribute <c1>)
    (<a2> ^num 2 ^2 <c9> ^1 <c10>)
    (<p4> ^num < 2 ^1 <p6>)
    (<c9> -^rtype set ^result <r2>)
    (<p6> ^type set)
    (<c10> -^rtype set ^result <r3>)
    (<r3> ^set <s3>)
    (<s3> ^pair <p7>)
    (<p7> ^1 <o2>)
    (<r2> ^set <s2>)
    (<s2> ^pair <p5>)
    (<p5> ^1 <o1>)
    (<r1> ^set <s4>)
    (<s4> ^pair <p8>)
    (<p8> ^1 <s5>)
    (<p1> ^<c3> <p2>)
    (<p2> ^name <c4> ^pair <p3>)
    (<p3> ^2 <o1> ^1 <o2>)
    -->
    (<s5> ^object <o2> +)
}
sp {chunk*justification-436*t6432-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^negative false ^type state-pair ^args <a2> ^parameter <p1>
          ^result <r2> ^name <c4> ^attribute <c5>)
    (<a2> ^num 2 ^2 <c6> ^1 <c7>)
    (<p1> ^num < 2 ^1 <p3>)
    (<c6> -^rtype set ^result <r1>)
    (<p3> ^type set)
    (<c7> -^rtype set)
    (<r2> ^set <s3>)
    #(<r1> ^set <s2>)
    #(<s2> ^pair <p2>)
    #(<p2> ^1 <o1>)
    -->
    (<s3> ^pair <p4> +)
    (<p4> ^1 <s4> +)
}

sp {chunka*justification-298*t62-1
    :chunk
    (state <s1> ^gtype <c6> ^list <l1> ^<c6> <a1> ^<c1> <p1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c8>)
    (<c8> ^negative true ^type state-pair ^args <a2> ^parameter <p3>
          ^result <r2> ^name <c4> ^attribute <c1>)
    (<a2> ^num 2 ^1 <c9> ^2 <c11>)
    (<c9> -^rtype set ^result <r1>)
    (<p3> ^num { < 2 <c10> })
    (<r2> ^set <s3>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p4>)
    (<p4> ^1 <o1>)
    (<p1> ^<c3> <p2>)
   -{ (<p2> ^pair <pair>)
      (<pair> ^1 <o1> ^2 <objb>)
      (<c11> ^result <r*3>)
      (<r*3> ^set <s*4>)
      (<s*4> ^pair <p*3>)
      (<p*3> ^1 <objb>)}
    (<p2> ^name <c4>)
    -->
    (<s3> ^pair <p5> +)
    (<p5> ^1 <o1> +)
}
sp {chunk*justification-352*t68-1
    :chunk
    (state <s1> ^gtype <c6> ^list <l1> ^<c6> <a1> ^<c1> <p1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c8>)
    (<c8> ^negative true ^type state-pair ^args <a2> ^parameter <p3>
          ^result <r3> ^name <c4> ^attribute <c1>)
    (<a2> ^num 2 ^2 <c9> ^1 <c10>)
    (<p3> ^num 2)
    (<c9> -^rtype set ^result <r1>)
    (<c10> -^rtype set ^result <r2>)
    (<r3> ^set <s4>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p5>)
    (<p5> ^1 <o2>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p4>)
    (<p4> ^1 <o1>)
    (<p1> ^<c3> <p2>)
   -{ (<p2> ^pair <pair1>)
      (<pair1> ^2 <o1> ^1 <o2>)}
    (<p2> ^name <c4>)
    -->
    (<s4> ^pair <p6> +)
    (<p6> ^2 <o1> + ^1 <o2> +)
}

sp {chunk*justification-388*t754-51
    :chunk
    (state <s1> ^gtype <c6> ^list <l1> ^<c6> <a1> ^<c1> <p1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c8>)
    (<c8> ^negative false ^type state-pair ^args <a2> ^parameter <p4>
          ^result <r3> ^name <c4> ^attribute <c1> ^rtype single)
    (<a2> ^num 2 ^2 <c9> ^1 <c10>)
    (<p4> ^num { < 2 <c20> })
    (<c9> -^rtype set ^result <r1>)
    (<c10> -^rtype set ^result <r2>)
    (<r3> ^set <s4>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p6>)
    (<p6> ^1 <o2>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p5>)
    (<p5> ^1 <o1>)
    (<p1> ^<c3> <p2>)
    (<p2> ^name <c4> ^pair <p3>)
    (<p3> ^2 <o1> ^1 <o2>)
    -->
    (<s4> ^pair <p7> +)
    (<p7> ^1 <o2> +)
}
sp {chunk*justification-388*t74-1
    :chunk
    (state <s1> ^gtype <c6> ^list <l1> ^<c6> <a1> ^<c1> <p1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c8>)
    (<c8> ^negative false ^type state-pair ^args <a2> ^parameter <p4>
          ^result <r3> ^name <c4> ^attribute <c1>)
    (<a2> ^num 2 ^2 <c9> ^1 <c10>)
    (<p4> ^num 2)
    (<c9> -^rtype set ^result <r1>)
    (<c10> -^rtype set ^result <r2>)
    (<r3> ^set <s4>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p6>)
    (<p6> ^1 <o2>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p5>)
    (<p5> ^1 <o1>)
    (<p1> ^<c3> <p2>)
    (<p2> ^name <c4> ^pair <p3>)
    (<p3> ^2 <o1> ^1 <o2>)
    -->
    (<s4> ^pair <p7> +)
    (<p7> ^2 <o1> + ^1 <o2> +)
}

sp {chunk*justification-388*t724-13
    :chunk
    (state <s1> ^gtype <c6> ^list <l1> ^<c6> <a1> ^<c1> <p1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c8>)
    (<c8> ^negative false ^type state-pair ^args <a2> ^parameter <p4>
          ^result <r3> ^name <c4> ^attribute <c1>)
    (<a2> ^num 3 ^3 <c11> ^2 <c9> ^1 <c10>)
    (<p4> ^num 3)
    (<c9> -^rtype set ^result <r1>)
    (<c10> -^rtype set ^result <r2>)
    (<c11> -^rtype set ^result <r0>)
    (<r0> ^set <s0>)
    (<r3> ^set <s4>)
    (<r2> ^set <s3>)
    (<s3> ^pair <p6>)
    (<p6> ^1 <o2>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p5>)
    (<p5> ^1 <o1>)
    (<s0> ^pair <p0>)
    (<p0> ^1 <o4>)
    (<p1> ^<c3> <p2>)
    (<p2> ^name <c4> ^pair <p3>)
    (<p3> ^3 <o4> ^2 <o1> ^1 <o2>)
    -->
    (<s4> ^pair <p7> +)
    (<p7> ^3 <o4> ^2 <o1> + ^1 <o2> +)
}

sp {chunk*justification-308*onc*t68-2
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^type attribute-of ^args <a2> ^parameter <p1> ^negative <c4>
          ^result <r1> ^name <c5>)
    (<a2> ^num 1 ^2 <c7>)
    (<p1> ^1 <p3>)
    (<c7> ^rtype set ^result <r2>)
    (<p3> ^type set)
    (<r2> ^set <s3>)
    (<s3> ^pair <p4>)
    (<p4> ^1 <s4>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^2 <s4> ^1 <s5>)
    (<s4> ^object <o1>)
    (<o1> ^<c5> <c8>)
    -->
    (<s5> ^<r3> <c8> +)
}

sp {chunk*justification-301*t68-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^type attribute-of ^args <a2> ^parameter <p1> ^negative <c4>
          ^result <r2> ^name <c5>)
    (<a2> ^num 1 ^2 <c6>)
    (<p1> ^1 <p2>)
    (<c6> ^rtype set ^result <r1>)
    (<p2> ^type set)
    (<r2> ^set <s4>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p3>)
    (<p3> ^1 <s3>)
    -->
    (<s4> ^pair <p4> +)
    (<p4> ^2 <s3> + ^1 <s5> +)
}
sp {chunk-multi*justification-397*onc*t875-1
    :chunk
    (state <s1> ^gtype <g10> ^list <l1> ^<g10> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name <value> ^type attribute-of ^args <a2>
          ^parameter <p1> ^result <r2>)
    (<a2> ^num 1 ^2 <*1>)
    (<p1> ^num 2)
    (<*1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <*2>)
    (<*2> ^<value> <v3>)
    (<r2> ^set <s3>)
    -->
    (<s3> ^pair <p3> +)
    (<p3> ^1 <v3> + ^2 <*2> +)
}
#test creation (not value)
sp {chunk-multi*justification-397*onc*t875-1*negative
    :chunk
    (state <s1> ^gtype <g10> ^list <l1> ^<g10> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative true ^name <value> ^type attribute-of ^args <a2>
          ^parameter <p1> ^result <r2>)
    (<a2> ^num 2 ^1 <x1> ^2 <*1>)
    (<p1> ^num 2)
    (<*1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <*2>)
    (<*2> ^<value> <v3>)
    (<r2> ^set <s3>)
   -{(<x1> ^result.set.pair.{1} <v3>)}
    -->
    (<s3> ^pair <p3> +)
    (<p3> ^1 <v3> + ^2 <*2> +)
}

sp {chunk-multi*justification-397*onc*t852675-1
    :chunk
    (state <s1> ^gtype <g10> ^list <l1> ^<g10> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c1>)
    (<c1> ^negative false ^name <value> ^type attribute-of ^args <a2>
          ^parameter <p1> ^result <r2>)
    (<a2> ^num 1 ^2 <*1>)
    (<p1> ^num < 2)
    (<*1> -^rtype set ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <*2>)
    (<*2> ^<value> <v3>)
    (<r2> ^set <s3>)
    -->
    (<s3> ^pair <p3> +)
    (<p3> ^1 <v3> +)
}

#created not sure if suppported in creation of chunks
sp {chunk*justification-248*t536-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^type attribute ^parameter <p1> ^args <a2> ^negative <c4>
          ^result <r2> ^name <c6> ^attribute <c8> ^rtype set)
    (<p1> ^num { < 2 <c10> })
    (<a2> ^1 <c5>)
    (<r2> ^set <s3>)
    (<c5> ^result <r1> ^rtype single)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <o1>)
    (<o1> ^<c8> <c6>)
    (<s3> ^pair <p3>)
    (<p3> ^1 <x4>)
-->
    (<x4> ^object <o1> +)
}
sp {chunk*justification-248*t526-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^type attribute ^parameter <p1> ^args <a2> ^negative <c4>
          ^result <r2> ^name <c6> ^attribute <c8> ^rtype set)
    (<p1> ^num { < 2 <c10> })
    (<a2> ^1 <c5>)
    (<r2> ^set <s3>)
    (<c5> ^rtype single)
    -->
    (<s3> ^pair <p3> +)
    (<p3> ^1 <x4> +)
}

sp {chunk*justification-238*t56-1
    :chunk
    (state <s1> ^gtype <c1> ^list <l1> ^<c1> <a1>)
    (<l1> ^game <g1>)
    (<a1> ^condition <c3>)
    (<c3> ^type attribute ^parameter <p1> ^args <a2> ^negative <c4>
          ^result <r2> ^name <c6> ^attribute <c8> ^rtype single)
   -{ (<p1> ^1 <v*1>)
      (<v*1> ^type set)}
    (<p1> ^num { < 2 <c10> })
    (<a2> ^1 <c5>)
    (<r2> ^set <s3>)
    (<c5> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^pair <p2>)
    (<p2> ^1 <o1>)
    (<o1> ^<c8> <c6>)
    -->
    (<s3> ^pair <p3> +)
    (<p3> ^1 <o1> +)
}


sp {chunk*justification-186*t50-1
    :chunk
    (state <s1> ^gtype <c5> ^list <l1> ^objects <o1> ^<c5> <a2>)
    (<l1> ^game <g1>)
    (<o1> ^object <o2>)
    (<a2> ^condition <c7>)
    (<c7> ^type attribute ^args <a3> ^negative <c8> ^parameter <p1>
          ^result <r1> ^name <c3> ^attribute <c1>)
    (<a3> -^1 <a1>)
    (<r1> ^set <s2>)
    (<o2> ^<c1> <c3>)
    -->
    (<s2> ^pair <p2> +)
    (<p2> ^1 <o2> +)
}



#sp {chunk*justification-384*snc*t70-1
#    :chunk
#    (state <s1> ^gtype {<< predicate >> <c1>} ^list <l1> ^<c1> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^parameter-set <p2> ^potential-args <p1>)
#    (<p2> ^tested calculate5 ^tested calculate4)
#    -->
#    (<p2> ^tested calculate6 +)
#}
#
#sp {chunk*justification-382*snc*t69-1
#    :chunk
#    (state <s1> ^gtype {<< predicate >> <c1>}^list <l1> ^<c1> <a1>)
#    (<l1> ^game <g1>)
#    (<a1> ^parameter-set <p2> ^potential-args <p1>)
#    (<p2> ^tested calculate3 ^tested calculate4)
#    -->
#    (<p2> ^tested calculate5 +)
#}
#sp {chunk-multi*justification-169*snc*t68-1
#    :chunk
#    (state <s1> ^gtype predicate ^list <l1> ^predicate <p1>)
#    (<l1> ^game <g1>)
#    (<p1> ^parameter-set <p2> ^potential-args <p3>)
#    (<p2> ^tested calculate3 ^tested calculate2)
#    -->
#    (<p2> ^tested calculate4 +)
#}
#
#sp {chunk-multi*justification-167*snc*t67-1
#    :chunk
#    (state <s1> ^gtype predicate ^list <l1> ^predicate <p1>)
#    (<l1> ^game <g1>)
#    (<p1> ^parameter-set <p2> ^potential-args <p3>)
#    (<p2> ^tested calculate2 ^tested calculate1)
#    -->
#    (<p2> ^tested calculate3 +)
#}
#
#sp {chunk-multi*justification-165*snc*t66-1
#    :chunk
#    (state <s1> ^gtype predicate ^list <l1> ^predicate <p1>)
#    (<l1> ^game <g1>)
#    (<p1> ^parameter-set <p2> ^potential-args <p3>)
#    (<p2> ^tested calculate1)
#    -->
#    (<p2> ^tested calculate2 +)
#}
#
#sp {chunk-multi*justification-163*snc*t65-1
#    :chunk
#    (state <s1> ^gtype predicate ^simulated true ^list <l1> ^predicate <p1>)
#    (<l1> ^game <g1>)
#    (<p1> ^potential-args <p2> ^parameter-set <p3>)
#    -->
#    (<p3> ^tested calculate1 +)
#}
