sp {transfer-predicate-structure*elaborate*predicate-handle
   (state <s> ^name transfer-predicate-structure
              ^superstate.operator <o>)
   (<o> ^handle <handle>)
-->
   (<s> ^handle <handle>)
}

sp {transfer-predicate-structure*elaborate*condition
   (state <s> ^name transfer-predicate-structure
              ^superstate.operator <o>)
   (<o> ^condition <co>)
-->
   (<s> ^condition <co>)
}


sp {transfer-predicate-structure*elaborate*predicate-lti
   (state <s> ^name transfer-predicate-structure
              ^superstate.operator <o>)
   (<o> ^predicate-lti <lti>)
-->
   (<s> ^predicate-lti <lti>)
}

sp {transfer-predicate-structure*elaborate*smem-query
   (state <s> ^name transfer-predicate-structure
              ^smem.command <c>
             # ^superstate.superstate.game <game>
              ^handle <handle>)
-->
   (<c> ^query <cue>
        ^depth 15)
   (<cue> ^handle <handle> ^item-type predicate)
}

sp {transfer-predicate-structure*propose*convert-NLP-to-language
   (state <s> ^name transfer-predicate-structure
             -^nlp-relationships
              ^smem.result.retrieved.predicate-structure <ps>)
-->
    (<s> ^operator <o> + =)
    (<o> ^name convert-NLP-to-language
         ^structure <ps>)
}

sp {transfer-predicate-structure*propose*complete
   (state <s> ^name transfer-predicate-structure
              ^smem.result.retrieved <pred>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete)
}


#TODO initiate teaching interaction
sp {BADtransfer-predicate-structure*elaborate*smem-query*unknown
   (state <s> ^name transfer-predicate-structure
              ^smem.result.failure
              ^superstate <ss>)
-->
    (halt)
   (<ss> ^unknown true)
}

#sp {transfer-predicate-structure*apply*complete*smem-query*result*no-condition-link
#   (state <s> ^name transfer-predicate-structure
#              ^operator.name complete
#              ^smem.result.retrieved <pred>
#              ^copy-structure.destination <dest>
#              ^superstate <ss>)
#   (<ss> ^gtype action)
#   (<dest> ^predicate-structure <ps> ^verb-structure <vs> ^handle <name> ^argnum <an> ^primary-rtype <rtype>)
#-->
#   (<ss> ^action <p>)
#   (<p> ^handle <name> ^aname <name> ^verb-structure <vs> ^nlp-set <ps> ^primary-rtype <rtype> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
#  (<P124> ^argnum <an>)
#  (<dest> ^aname <name>)
#(<ps> ^aname <name>)
#}
#sp {transfer-predicate-structure*apply*complete*smem-query*result*no-condition-link*goal
#   (state <s> ^name transfer-predicate-structure
#              ^operator.name complete
#              ^smem.result.retrieved <pred>
#              ^copy-structure.destination <dest>
#              ^superstate <ss>)
#   (<ss> ^gtype goal)
#   (<dest> ^predicate-structure <ps> ^handle <name> ^argnum <an> ^primary-rtype <rtype>)
#-->
#   (<ss> ^goal <p>)
#   (<p> ^handle <name> ^aname <name> ^nlp-set <ps> ^primary-rtype <rtype> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
#  (<P124> ^argnum <an>)
#  (<dest> ^aname <name>)
#(<ps> ^aname <name>)
#}

sp {transfer-predicate-structure*apply*complete*elaborate*stored-sentence
   (state <s> ^name transfer-predicate-structure
              ^operator.name complete
              ^top-state <ts>
              ^nlp-relationships <gr>
              ^smem.result.retrieved <pred>)
   (<pred> ^predicate-structure <ps>  ^handle <name>)
   (<ts> ^io.input-link.language.sentence <se> -^stored-sentence -^game-scripting true)
   (<se> ^next <n1> ^sentence-number <sn> ^complete-sentence <cs>)
-->
    (<ts> ^stored-sentence <st>)
    (<st> ^sentence-number (+ 3 <sn>) ^complete-sentence <cs> ^next (deep-copy <n1>) ^spelling *)
}

#sp {transfer-predicate-structure*apply*complete*elaborate*stored-sentence*steup2
#   (state <s> ^name transfer-predicate-structure
#              ^operator.name complete
#              ^top-state <ts>
#              ^nlp-relationships <gr>
#              ^smem.result.retrieved <pred>)
#   (<pred> ^predicate-structure <ps> ^handle <name>)
#   (<ts> -^stored-sentence ^game-scripting true ^dialog-context <dc>)
#   (<se> ^next <n1>  ^complete-sentence <cs>)#^sentence-number <sn>
#   (<dc> ^stored-sentence <se>)
#-->
#    (interrupt)
#    (<dc> ^stored-sentence <se> -)
#    (<ts> ^stored-sentence <st>)
#    (<st>  ^complete-sentence <cs> ^next (deep-copy <n1>) ^spelling *)#^sentence-number (+ 3 <sn>)
#}

sp {transfer-predicate-structure*apply*complete*elaborate*stored-sentence*scripted
   (state <s> ^name transfer-predicate-structure
              ^operator.name complete
              ^top-state <ts>
              ^nlp-relationships <gr>
              ^smem.result.retrieved <pred>)
   (<pred> ^predicate-structure <ps>  ^handle <name>)
   (<ts> ^current-sentence <se> -^stored-sentence ^game-scripting true)
   (<se> ^next <n1> ^sentence-number <sn> ^complete-sentence <cs>)
-->
    (<ts> ^stored-sentence <st>)
    (<st> ^sentence-number (+ 3 <sn>) ^complete-sentence <cs> ^next (deep-copy <n1>) ^spelling *)
}

sp {transfer-predicate-structure*apply*complete*elaborate*stored-sentence*already-there
   (state <s> ^name transfer-predicate-structure
              ^operator.name complete
              ^top-state <ts>
              ^nlp-relationships <gr>
              ^smem.result.retrieved <pred>)
   (<pred> ^predicate-structure <ps>  ^handle <name>)
   (<ts> ^stored-sentence <se> ^unprocessed-next <n>)
   (<se> ^next <n1> ^sentence-number <sn> ^complete-sentence <cs>)
-->
    (<ts> ^stored-sentence <se> -)
    (<ts> ^unprocessed-next <n> -)
    (<ts> ^stored-sentence <st>)
    (<st> ^sentence-number (+ 3 <sn>) ^complete-sentence <cs> ^next (deep-copy <n1>) ^spelling *)
}

sp {transfer-predicate-structure*apply*complete*smem-query*result
   (state <s> ^name transfer-predicate-structure
              ^operator.name complete
              ^superstate.superstate.game <game>
              ^top-state.dialog-context <dc>
             # ^condition <co>
              ^nlp-relationships <gr>
              ^nlp-functions <nf>
              ^smem.result.retrieved <pred> 
              ^top-state.interaction.status <status>
              ^top-state.interaction.changes <changes>)
   (<pred> ^predicate-structure <ps>  ^handle <name> )
-->
    (<dc> ^transfering <tf> ^learning-predicate <lp>)
    (<lp> ^name <name>)
    (<tf> ^name <name> ^lti <pred> ^to <game>)
    
   (<changes> ^outgoing-message <msg>)
   (<msg> ^type transfer-concept
          ^fields <f>)
   (<f> ^relationships <gr> ^concept-name <name> ^functions <nf>)
   (<status> ^performed.learning-event <de>)
   (<de> ^type game
         ^originator agent)
   
#^top-state.interaction.changes <c>
#(<c> ^new-segment-info <info>) 
#(<info> ^purpose <p>
#           ^originator agent)
#   (<p> ^type transfer-concept
#        ^parameters.message <msg>
#        ^satisfaction <sat>)
#   (<sat> ^dialog-event.type game)
}


