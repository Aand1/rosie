##REAL copy (learn version- learn-param2

#TODO depreicated?
#sp {learn-predicate*propose*learn-predicate-complete
#   (state <s> ^name learn-predicate
#              ^done)
#-->
#   (<s> ^operator <o> + >)
#   (<o> ^name learn-predicate-complete)
#}
#sp {learn-predicate*apply*learn-predicate-complete
#   (state <s> ^name learn-predicate
#              ^topstate.current-game <cg>
#              ^operator.name learn-predicate-complete
#              ^superstate <ss>
#              ^gtype <type>
#             -^tcn.verbs <verbs>
#              ^<type> <t>
#              ^done)
#   (<t> ^nlp-set <nps> ^parameter-set.argnum <num>)
#-->
#   (<ss> ^done chunked-action)
#   (<cg> ^<type> <t2>)
#   (<t2> ^nlp-set <nps> ^parameter-set.argnum <num>)
#}
#sp {learn-predicate*apply*learn-predicate-complete*verbs
#   (state <s> ^name learn-predicate
#              ^topstate.current-game <cg>
#              ^operator.name learn-predicate-complete
#              ^superstate <ss>
#              ^gtype <type>
#              ^tcn.verbs <verbs>
#              ^<type> <t>
#              ^done)
#   (<t> ^nlp-set <nps> ^parameter-set.argnum <num>)
#   (<nps> ^aname <aname>)
#-->
#   (<ss> ^done chunked-action)
#   (<cg> ^<type> <t2>)
#   (<t2> ^nlp-set <nps> ^parameter-set <ps>)
#   (<ps> ^aname <aname>)
#   (<ps> ^argnum <num> ^verbs <verbs>)
#}
#sp {learn-predicate*propose*lookup-game
#   (state <s> ^name learn-predicate
#             -^tcn
#              ^superstate.operator <op>)
#   (<op> ^game-name <name>
#        -^tcn)
#-->
#   (<s> ^operator <o> + = >)
#   (<o> ^name lookup-game
#        ^game-name <name>)
#}

sp {learn-predicate*elaborate*input-args
   (state <s> ^name learn-predicate
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set <res>)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^parameter.{1}.param-id <a1>)
   (<nlps> ^aname <name>)
  # -{(state <s>)?
  #   (<res> -^pair.{1})}
-->
   (<c> ^result.set <res>)
}

sp {learn-predicate*elaborate*tcn
#   :o-support
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<op> #^game-name <name>
          ^<type> <t>
        # ^tcn <tcn>
         ^type {<type> << predicate action goal >>})
-->
   (<s> #^tcn <tcn>  #TEMP HACK PUT BACK
        ^structure <t>
        ^gtype <type>
        ^<type> <act>)
  (<act> ^parameter-set <ps>
        ^potential-args <po>)
}

#sp {learn-predicate*elaborate*tcn
##   :o-support
#   (state <s> ^name learn-predicate
#              ^superstate.operator <op>)
#   (<op> ^game-name <name>
#         ^tcn <tcn>
#         ^type {<type> << action goal >>})
#-->
#   (<s> ^tcn <tcn>  #TEMP HACK PUT BACK
#        ^gtype <type>
#        ^<type> <act>)
#  (<act> ^parameter-set <ps>
#        ^potential-args <po>)
#}

##TEMP HACK PUT BACK
sp {learn-predicate*propose*convert-language-format
   (state <s> ^name learn-predicate
             -^action.nlp-set
              ^gtype action
             -^tcn)
-->
   (<s> ^operator <o> + =)
   (<o> ^name convert-parsed-format)
}


sp {learn-predicate*elaborate*list-games
   (state <s> ^name learn-predicate
             # ^gtype <type>
              ^superstate.operator <op>)
   (<op> ^type <type> ^<type>.name <name>)
-->
   (<s> ^list.game <g> ^objects <o> ^simulated true)
   (<g> ^game <name> ^type action predicate) 
   (<s> ^current <g> ^game <name>)
   (<s> ^prepositions <p>)
}
sp {learn-predicate*elaborate*actiongoalname
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.aname <aname>)
-->
   (<t> ^aname <aname>)
}

#TEMP TEST TODO NEED FOR FORMATTING
sp {learn-predicate*propose*formate-conditions
   (state <s> ^name learn-predicate
              ^gtype {<type> << goal action >>}
              ^<type> <t>)
   (<t> ^nlp-set <nlp> -^formated <type>)
-->
   (<s> ^operator <o> + = >)
   (<o> ^name format-conditions
        ^type <type>
        ^nlp-set <nlp>)
}

sp {learn-predicate*elaborate*problem-space*predicate-structure
   (state <s> ^name learn-predicate
              ^problem-space.world <world>
              ^superstate.predicate <source>)
-->
   (<world> ^source <source>
            ^copy-type deep)
}

#sp {learn-predicate*elaborate*problem-space*world
#   (state <s> ^name learn-predicate
#              ^problem-space.world <world>
#              ^superstate.predicate <source>)
#-->
#   (<world> ^source <source>
#            ^copy-type deep)
#}

## TODO replace
####copy operations
#sp {learn-predicate*elaborate*sub-conditions
#   (state <s> ^name learn-predicate
#              ^gtype <type>
#              ^<type> <t>)
#   (<t> ^condition <co>)
#   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
#   (<cond> ^name <name>)
#-->
#   (<t> ^condition <cond>)
#}
#sp {learn-predicate*elaborate*sub-conditions*predicate
#   (state <s> ^name learn-predicate
#              ^gtype predicate
#              ^predicate <t>)
#   (<t> ^nlp-set.nlp <cond>)
#-->
#   (<t> ^condition <cond>)
#}
#
#sp {learn-predicate*prefer*copy-topstate*over*format-conditions
#   (state <s> ^name learn-predicate
#              ^operator <o> +
#              ^operator <o2> +)
#   (<o> ^name copy-topstate)
#   (<o2> ^name format-conditions)
#-->
#   (<s> ^operator <o> > <o2>)
#}
#            
#
#sp {learn-predicate*propose*copy-topstate
#   (state <s> ^name learn-predicate
#              ^gtype <type>
#             -^prepositions.prep.instance.{1})
#-->
#   (interrupt)
#   (<s> ^operator <o> + >)
#   (<o> ^name copy-topstate)
#}
#
#sp {learn-predicate*apply*copy-topstate*objects
#   (state <s> ^name learn-predicate
#              ^objects <objs>
#              ^operator.name copy-topstate
#              ^topstate.object <obj>)
#   (<obj> ^id <id> ^category <cat>)
#-->
#   (<objs> ^object <obj2>)
#   (<obj2> ^id <id> ^type <cat>)
#}
#
#sp {learn-predicate*apply*copy-topstate*objects*desc
#   (state <s> ^name learn-predicate
#              ^objects.object <obj2>
#              ^operator.name copy-topstate
#              ^topstate.object <obj>)
#   (<obj> ^id <id> ^linguistic-desc.word <word>)
#   (<obj2> ^id <id>)
#-->
#   (<obj2> ^word <word>)
#}
#sp {learn-predicate*apply*copy-topstate*objects*attr
#   (state <s> ^name learn-predicate
#              ^objects.object <obj2>
#              ^operator.name copy-topstate
#              ^topstate.object <obj>)
#   (<obj> ^id <id> ^{<something> <> object-desc <> linguistic-desc <> category <> id <> type} <word>)
#   (<obj2> ^id <id>)
#-->
#   (<obj2> ^<something> <word>)
#}
#sp {learn-predicate*apply*copy-topstate*objects*desc*percept
#   (state <s> ^name learn-predicate
#              ^objects.object <obj2>
#              ^operator.name copy-topstate
#              ^topstate.object <obj>)
#   (<obj> ^id <id> ^object-desc.<< color shape size >> <word>)
#   (<obj2> ^id <id>)
#-->
#   (<obj2> ^word <word>)
#}
#sp {learn-predicate*apply*copy-topstate*contexts
#   (state <s> ^name learn-predicate
#              ^operator.name copy-topstate
#              ^topstate.{<contexts> << successive dictionary word-pairs integers heuristics >>} <int>)
#-->
#   (<s> ^<contexts> <int>)
#}
#
#sp {learn-predicate*apply*copy-topstate*preps
#   (state <s> ^name learn-predicate
#              ^prepositions <p>
#              ^operator.name copy-topstate
#              ^topstate.prepositions.<< prep prep2 >> <prep>)
#   (<prep> ^name <name>)
#-->
#   (<p> ^prep <prep2>)
#   (<prep2> ^name <name>)
#}
#sp {learn-predicate*apply*copy-topstate*pairs
#   (state <s> ^name learn-predicate
#              ^objects <o>
#              ^prepositions.prep <prep2>
#              ^operator.name copy-topstate
#              ^topstate.prepositions.<< prep prep2 >> <prep>)
#   (<o> ^object <obj> ^object <obj2>)
#   (<obj> ^id <ida>)
#   (<obj2> ^id <idb>)
#   (<prep> ^name <name> ^instance <pair>)
#   (<prep2> ^name <name>)
#   (<pair> ^1 <ida> ^2 <idb> -^3)
#-->
#   (<prep2> ^instance <pair2>)
#   (<pair2> ^1 <obj> ^2 <obj2>)
#}
#sp {learn-predicate*apply*copy-topstate*pairsstring
#   (state <s> ^name learn-predicate
#              ^objects <o>
#              ^prepositions.prep <prep2>
#              ^operator.name copy-topstate
#              ^topstate.prepositions.<< prep prep2 >> <prep>)
#   (<o> ^object <obj> ^object <obj2>)
#   (<obj> ^id <ida>)
#   (<obj2> ^id <idb>)
#   (<prep> ^name <name> ^instance <pair>)
#   (<prep2> ^name <name>)
#   (<pair> ^|1| <ida> ^|2| <idb> -^3)
#-->
#   (<prep2> ^instance <pair2>)
#   (<pair2> ^1 <obj> ^2 <obj2>)
#}
#sp {learn-predicate*apply*copy-topstate*pairs*3arg
#   (state <s> ^name learn-predicate
#              ^objects <o>
#              ^prepositions.prep <prep2>
#              ^operator.name copy-topstate
#              ^topstate.prepositions.prep2 <prep>)
#   (<o> ^object <obj> ^object <obj2> ^object <obj3>)
#   (<obj> ^id <ida>)
#   (<obj2> ^id <idb>)
#   (<obj3> ^id <idc>)
#   (<prep> ^name <name> ^instance <pair>)
#   (<prep2> ^name <name>)
#   (<pair> ^1 <ida> ^2 <idb> ^3 <idc>)
#-->
#   (<prep2> ^instance <pair2>)
#   (<pair2> ^1 <obj> ^2 <obj2> ^3 <obj3>)
#}

