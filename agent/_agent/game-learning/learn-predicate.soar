
#temporary flag

sp {learn-predicate*elaborate*input-args
   (state <s> ^name learn-predicate
              ^gtype <gtype>
              ^predicate <T5>
              ^<gtype>.condition <co>)
   (<co> ^type concept ^attribute predicate ^name <name> ^args <args>)
   (<args> ^num > 0)
   (<args> ^<a1> <c1>)
   (<c1> ^result.set <res>)
   (<T5> ^link <co> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^parameter.{1}.param-id <a1>)
   (<nlps> ^aname <name>)
  # -{(state <s>)?
  #   (<res> -^pair.{1})}
-->
   (<c> ^result.set <res>)
}

#hack for learning predicate input
sp {learn-predicate*elaborate*input-args*learning-predicate
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate
              #^top-state.dialog-context.input-object-1 <obj>)
              ^predicate <T5>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^parameter.{1}.param-id 1)
   (<nlps> ^aname <name>)
-->
   (<c> ^result.set <res>)
}

sp {learn-predicate*elaborate*input-args*object
   (state <s> ^name learn-predicate
              ^top-state.dialog-context.learning-predicate
              ^world.objects.object <obj>
              #^top-state.dialog-context.input-object-1 <obj>)
              ^predicate <T5>)
   (<T5> ^condition <c> ^nlp-set <nlps> ^formated predicate ^parameter-set <P124> ^potential-args <P125>)
   (<c> ^attribute input-arg ^parameter.{1}.param-id 1)
   (<nlps> ^aname <name>)
   (<c> ^result.set <res>)
 -->
   (<res> ^instance <in>)
   (<in> ^1 <obj>)
}

sp {learn-predicate*elaborate*tcn
   (state <s> ^name learn-predicate
              ^superstate.operator <op>)
   (<op> ^message <t>
        # ^tcn <tcn>
         ^type {<type> << predicate action goal >>})
-->
   (<s> #^tcn <tcn>  #TEMP HACK PUT BACK
        ^parsed-structure <t>
        ^gtype <type>
        ^main-type <type>
        ^<type> <act>)
  (<act> ^parameter-set <ps>
        ^potential-args <po>)
}

sp {learn-predicate*propose*convert-language-format
   (state <s> ^name learn-predicate
             -^<gtype>.nlp-set
              ^parsed-structure <t>
              ^gtype <gtype>
             -^tcn)
-->
   (<s> ^operator <o> + =)
   (<o> ^name convert-parsed-format
        ^structure <t>)
}

sp {learn-predicate*store*structure
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype {<gtype> << action goal >>}
              ^<gtype> <t>)
   (<t> ^nlp-set.nlp <nlp> ^formated)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^predicate-structure <ps>)
-->
   (<ps> ^conditions <nlp>)
}
sp {learn-predicate*store*structure*learned-predicate
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype predicate
              ^predicate <t>)
   (<t> ^nlp-set <nl> ^formated ^parameter-set.argnum <an>)
   (<dc> ^type game-learning ^learn-link <ll>)
-->
   (<ll> ^predicate-structure <ps> ^argnum <an>)
}
sp {learn-predicate*store*structure*learned-predicate*conditions
   :o-support
   (state <s> ^name learn-predicate
              ^top-state.dialog-context <dc>
              ^gtype predicate
              ^predicate <t>)
   (<t> ^nlp-set.nlp <nlp> ^formated)
   (<dc> ^type game-learning ^learn-link <ll>)
   (<ll> ^predicate-structure <ps>)
-->
   (<ps> ^conditions <nlp>)
}


sp {learn-predicate*elaborate*list-games
   (state <s> ^name learn-predicate
             # ^gtype <type>
              ^superstate.operator <op>)
   (<op> ^type <type>)# ^<type>.name <name>)
-->
   (<s> ^list.game <g> ^objects <o> ^simulated true)
   (<g> ^game <name> ^type action predicate) 
   (<s> ^current <g> ^game todo-fix)#<name>)
}
sp {learn-predicate*elaborate*actiongoalname
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^nlp-set.aname <aname>)
-->
   (<t> ^aname <aname>)
}

#TEMP TEST TODO NEED FOR FORMATTING
sp {learn-predicate*propose*formate-conditions
   (state <s> ^name learn-predicate
              ^main-type <type>
              ^<type> <t>)
   (<t> ^nlp-set <nlp> -^formated <type>)
-->
   (<s> ^operator <o> + = >)
   (<o> ^name format-conditions
        ^type <type>
        ^nlp-set <nlp>)
}

sp {learn-predicate*elaborate*problem-space*predicate-structure
   (state <s> ^name learn-predicate
              ^top-state.world <world2>)
-->
   (<s> ^problem-space.world <world>)
   (<world> ^source <world2>
            ^copy-type deep)
}


sp {learn-predicate*elaborate*sub-conditions
   (state <s> ^name learn-predicate
              ^gtype <type>
              ^<type> <t>)
   (<t> ^condition <co>)
   (<co> ^args.{<arg> << 1 2 3 4 5 6 7 8 9 10 >>} <cond>)
   (<cond> ^name <name>)
-->
   (<t> ^condition <cond>)
}
sp {learn-predicate*elaborate*sub-conditions*predicate
   (state <s> ^name learn-predicate
              ^gtype predicate
              ^predicate <t>)
   (<t> ^nlp-set.nlp <cond>)
-->
   (<t> ^condition <cond>)
}

#sp {learn-predicate*apply*copy-top-state*contexts
#   (state <s> ^name learn-predicate
#              ^operator.name copy-top-state
#              ^top-state.{<contexts> << successive dictionary word-pairs integers heuristics >>} <int>)
#-->
#   (<s> ^<contexts> <int>)
#}

