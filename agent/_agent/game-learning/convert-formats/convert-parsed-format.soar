#todo teach concept linear on set
#need one of operator
#make to handle action with move

#TODO clean this up dude!

sp {convert-parsed-format*elaborate*sentence
   (state <s> ^name convert-parsed-format
              ^superstate.operator <sop>)
   (<sop> ^structure <t>)
-->
   (<s> ^sentence <t>)
}

sp {convert-parsed-format*elaborate*only-parameter
   (state <s> ^name convert-parsed-format
              ^sentence.subclause <c>)
   (<c> ^predicate <p>)
   (<p> ^item-type << location block object >>)
-->
   (<s> ^parameter <p>)
}


sp {convert-parsed-format*elaborate*learning-predicate
   (state <s> ^name convert-parsed-format
              ^top-state.dialog-context <dc>)
   (<dc> ^learn-link <ll> ^learning-predicate <np>)
-->
   (<s> ^learning-predicate <np> ^learn-link <ll>)
}

sp {convert-parsed-format*elaborate*input-object
   (state <s> ^name convert-parsed-format
              ^top-state.dialog-context.input-object-1 <np>)
-->
   (<s> ^input-object-1 <np>)
}

sp {convert-parsed-format*elaborate*input-object-2
   (state <s> ^name convert-parsed-format
              ^top-state.dialog-context.input-object-2 <np>)
-->
   (<s> ^input-object-2 <np>)
}

sp {convert-parsed-format*elaborate*object-count
   (state <s> ^name convert-parsed-format)
-->
   (<s> ^object-count 1
        ^nlp-set <nps>)
}

sp {convert-parsed-format*elaborate*sentence*subclause
   (state <s> ^name convert-parsed-format
              ^sentence <s2>)
-->
   (<s> ^clause <s2>)
}
sp {convert-parsed-format*elaborate*clause*subclause
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^<< if-subclause subclause then-subclause >> <s1>)
-->
   (<s> ^clause <s1>)
}

sp {convert-parsed-format*elaborate*arg1*parameter
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^<< arg1 arg2 >> <p>)
   (<p> ^item-type << location block object >>)
-->
   (<s> ^parameter <p>)
}

sp {convert-parsed-format*elaborate*predicate-is-predicate
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^arg1 <p> ^predicate <pp>)
   (<p> ^item-type predicate)
   (<pp> ^item-type predicate)
-->
   (<c> ^formatted true)
   (<s> ^predicate <p> <pp>)
   (<p> ^equal-to <pp>)
   (<pp> ^equal-to <p>)
}

sp {convert-parsed-format*elaborate*predicate*number*attribute
   (state <s> ^name convert-parsed-format
              ^parameter <c>)
   (<c> ^predicates.number <num> ^formatted <f2> ^parameter-index <id2>)
-->
   (<s> ^predicate <p> <pp>)
   (<p> ^property.handle number ^handle <num> ^equal-to <pp>)
   (<pp> ^handle of1 ^2 <p2> ^equal-to <p>)
   (<p2> ^2 <c> ^handle number1)
   #(<c2> ^formatted <f2> ^parameter-index <id2>)
}

sp {convert-parsed-format*elaborate*predicate-objects
   (state <s> ^name convert-parsed-format
              ^predicate <c>)
   (<c> ^handle of1 ^2 <p2>)
   (<p2> ^2 <pp>)
   (<pp> ^item-type << location block object >>)
-->
   (<s> ^parameter <pp>)
}

#handle modifier all to make sure locations gets param-id as well
#TODO don't do this??, handle as clause? bad for all locations are covered
#sp {convert-parsed-format*elaborate*arg1*parameter*predicate
#   (state <s> ^name convert-parsed-format
#              ^parameter <p>
#              ^clause <c>)
#   (<c> ^arg1 <p> ^predicate <pred>)
#   (<p> ^item-type << location block object >> ^predicates <ps>)
#   (<pred> ^handle <name> ^item-type predicate ^property.handle <prop>)
#-->
#   (<ps> ^<prop> <name>)
#}


sp {convert-parsed-format*elaborate*arg1*relation*parameter
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^<< arg1 arg2 >> <a>)
   (<a> ^2 <p>)
   (<p> ^item-type << location block object >>)
 #  (<p> ^predicates <pred>)
-->
   (<s> ^parameter <p>)
}


sp {convert-parsed-format*elaborate*parameter*relation*parameter
   (state <s> ^name convert-parsed-format
              ^parameter <p>)
   (<p> ^relations <r>)
   (<r> ^<< 2 3 >> <pp>)
   (<pp> ^item-type << location block object >>)
-->
   (<s> ^parameter <pp>)
}

sp {convert-parsed-format*elaborate*arg2*parameter
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^predicate.{2} <p>)
   #(<p> ^predicates <pred>)
   (<p> ^item-type << block location object >>)
-->
   (<s> ^parameter <p>)
}

#ok test for now but need to be better
#TODO but not if mentioned in another test
sp {convert-parsed-format*elaborate*arg2*parameter*indef
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^predicate.{2} <p>)# ^modifier.handle negation)
   #(<p> ^predicates <pred>)
   (<p> ^item-type << block location object >> -^predicates.number)
   -{(<s> ^clause <c2>)
     (<c2> ^<< arg1 arg2 >> <p>)}
  -{(<s> ^parameter <pp>)
    (<pp> ^relations <r>)
    (<r> ^2 <p>)}
-{(<s> ^parameter <pp>)
    (<pp> ^relations <r>)
    (<r> ^3 <p>)}
  -{(<p> ^relations <rr>)
    (<rr> ^2)}
  -{(<s> ^clause {<c3> <> <c>})
    (<c3> ^predicate.{2} <p>)}
   -{(<s> ^clause {<c3> <> <c>})
    (<c3> ^predicate.{3} <p>)}
-->
   (<s> ^indef <p>)
}

#bias preference for order of mention hack, want real order
sp {prefer*create-object*lower*hanlde*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name create-object ^parameter.handle {<h1> < <h2>})
   (<o2> ^name create-object ^parameter.handle <h2>)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-clause*over*complete*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o2> ^name complete)
   (<o1> ^name handle-clause)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-predicate*over*complete*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o2> ^name complete)
   (<o1> ^name handle-predicate)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-action*over*complete*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o2> ^name complete)
   (<o1> ^name handle-action)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-clause*over*handle-property-predicate*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name handle-property-predicate)
   (<o2> ^name handle-clause)
-->
   (<s> ^operator <o2> > <o1>)
}
sp {prefer*handle-property-predicate*over*complete*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name handle-property-predicate)
   (<o2> ^name complete)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {prefer*create-object*over*handle-property-predicate*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name create-object)
   (<o2> ^name handle-property-predicate)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-predicate*over*handle-property-predicate*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name handle-predicate)
   (<o2> ^name handle-property-predicate)
-->
   (<s> ^operator <o2> > <o1>)
}

sp {prefer*create-object*over*handle-clause*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name create-object)
   (<o2> ^name handle-clause)
-->
   (<s> ^operator <o1> > <o2>)
}



sp {prefer*create-object*over*handle-action*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name create-object)
   (<o2> ^name handle-action)
-->
   (<s> ^operator <o1> > <o2>)
}
sp {prefer*create-object*over*handle-predicate*convert-parsed-format
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^operator <o2> +)
   (<o1> ^name create-object)
   (<o2> ^name handle-predicate)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {prefer*create-object*over*input-object
   (state <s> ^name convert-parsed-format
              ^<< input-object-2 input-object-1 >> <p>
              ^operator <o1> +)
   (<o1> ^name create-object
         ^parameter <p>)
-->
   (<s> ^operator <o1> >)
}
sp {prefer*create-object*over*create-object*input-object
   (state <s> ^name convert-parsed-format
              ^operator <o1> +
              ^input-object-1 <p>
              ^input-object-2 <p2>
              ^operator <o2> +)
   (<o1> ^name create-object ^parameter <p>)
   (<o2> ^name create-object ^parameter <p2>)
-->
   (<s> ^operator <o1> > <o2>)
}

sp {convert-parsed-format*propose*create-object
   (state <s> ^name convert-parsed-format
              ^parameter <c>)
   (<c> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name create-object
        ^parameter <c>)
}
sp {convert-parsed-format*apply*create-object*increment-object-count
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
             -^indef <c>
              ^operator <o>)
   (<o> ^name create-object ^parameter <c>)
   (<c> -^parameter-index)
-->
   (<c> ^parameter-index <oc>)
   (<s> ^object-count (+ 1 <oc>))
   (<s> ^object-count <oc> -) 
}

sp {create-object*elaborate*parameter*input-object
   (state <s> ^name create-object
              ^superstate.<< input-object-2 input-object-1 >> <c>
              ^superstate.operator.parameter <c>)
   (<c> ^parameter-index <oc>)
-->
   (<s> ^condition <co>
        ^last-condition <co>)
  
   (<co> ^args <A67> ^attribute input-arg ^name object ^negative false
                 ^parameter <P628> ^rtype single)
   (<P628> ^1 <para>)
   (<para> ^param-id <oc>)
}

sp {create-object*elaborate*parameter
   (state <s> ^name create-object
             -^superstate.input-object-1 <c>
              -^superstate.input-object-2 <c>
              ^superstate.operator.parameter <c>)
-->
   (<s> ^parameter <c>)
}

sp {create-object*elaborate*category
   :o-support
   (state <s> ^name create-object
              ^parameter.predicates <c>)
   (<c> ^category {<cat> <> object})# -^multiple)
-->
   (<s> ^condition <c1> ^last-condition <c1>)
   (<c1> ^name <cat> ^parameter <p> ^type attribute ^attribute category ^rtype single)
}

sp {create-object*elaborate*cateogy*object
   :o-support
   (state <s> ^name create-object
              ^parameter.predicates <c>)
   (<c> ^category {<cat> << object >>})# -^multiple)
-->
   (<s> ^condition <c1> ^last-condition <c1>)
   (<c1> ^name <cat> ^parameter <p> ^type attribute ^attribute primitive ^rtype single)
}

#sp {create-object*elaborate*plural
#   :o-support
#   (state <s> ^name create-object
#              ^parameter.predicates <c>)
#   (<c> ^category {<cat> <> object} ^multiple true)
#-->
#   (<s> ^condition <c1> ^last-condition <c1>)
#   (<c1> ^name <cat> ^parameter <p> ^type attribute ^attribute category ^rtype set)
#}
#sp {create-object*elaborate*cateogy*object*plural
#   :o-support
#   (state <s> ^name create-object
#              ^parameter.predicates <c>)
#   (<c> ^category {<cat> << object >>} ^multiple true)
#-->
#   (<s> ^condition <c1> ^last-condition <c1>)
#   (<c1> ^name <cat> ^parameter <p> ^type attribute ^attribute primitive ^rtype set)
#}

sp {create-object*propose*unary-predicate
   (state <s> ^name create-object
             -^condition.name <val>
              ^parameter <c>)
   (<c> ^predicates <p>)
   (<p> ^{<att> <> category <> quantified <> dialog-object <> value <> handle <> type <> visible <> multiple <> number} {<val> <> linear})
-->
   (<s> ^operator <o> + =)
   (<o> ^name unary-predicate
        ^attribute <att>
        ^value <val>)
}

sp {create-object*propose*unary-predicate*linear
   (state <s> ^name create-object
             -^condition.name linear
              ^parameter <c>)
   (<c> ^predicates <p>)
   (<p> ^property linear)
-->
   (<s> ^operator <o> + =)
   (<o> ^name unary-predicate
        ^attribute relation
        ^value linear)
}

sp {preference*create-object*dispref*unary-predicate
   (state <s> ^name create-object
              ^operator <o> +)
    (<o> ^name unary-predicate
        ^attribute << relation property >>)
-->
   (<s> ^operator <o> <)

}
sp {preference*create-object*prefer*unary-predicate*over*complete
   (state <s> ^name create-object
              ^operator <o> +
              ^operator <o2> +)
    (<o> ^name unary-predicate)
    (<o2> ^name complete)
-->
   (<s> ^operator <o> > <o2>)

}

sp {create-object*elaborate*condition
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
   #(<cond> ^rtype <rtype>)
   (<o> ^name unary-predicate
        ^attribute {<att> << color size shape >>}
        ^value <val>)
-->
   (<s> ^condition <co>)
   (<co> ^name <val> ^parameter <p> ^type attribute ^attribute <att> ^args <a> ^rtype single)
   (<a> ^1 <cond>)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}
#all unary relations are over sets
sp {create-object*elaborate*condition*relation
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
   (<o> ^name unary-predicate
        ^attribute relation
        ^value <val>)
-->
   (<s> ^condition <co>)
   (<co> ^name <val> ^parameter <p> ^type state-pair ^attribute preposition ^args <a> ^rtype set)
   (<a> ^1 <cond>)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}

sp {create-object*elaborate*condition*learned-predicate
   (state <s> ^name create-object
              ^operator <o>
              ^last-condition <cond>
              ^parameter <c>)
 #  (<cond> ^rtype <rtype>)
   (<o> ^name unary-predicate
        ^attribute property
        ^value <val>)
-->
   (<s> ^condition <co>)
   (<co> ^name <val> ^parameter <p> ^type concept ^attribute predicate ^args <a> ^rtype single)#^rtype <rtype>
   (<a> ^1 <cond>)
   (<s> ^last-condition <cond> -)
   (<s> ^last-condition <co>)
}
sp {create-object*propose*complete
   (state <s> ^name create-object
              ^last-condition <co>)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete)
}

sp {create-object*apply*complete*remove-rtype
   (state <s> ^name create-object
              ^operator.name complete
             # ^parameter.predicates.multiple true
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<cond> ^rtype <rtype>)
-->
   (<s> ^complete true)
   (<cond> ^rtype <rtype> -)
}

#if number know, it needs parameter
#or if not indef??
sp {create-object*apply*complete*not-indef-parameter*set
   (state <s> ^name create-object
              ^operator.name complete
            #  ^complete true
            # -^superstate.indef <c>
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates.number ^parameter-index <id>)
   (<cond> ^parameter <p>)
-->
   (<p> ^1 <para1>)
   (<para1> ^param-id <id> ^type set)
}
#sp {create-object*apply*complete*not-indef-parameter*single
#   (state <s> ^name create-object
#              ^operator.name complete
#              ^complete true
#              -^superstate.indef <c>
#              ^last-condition <cond>
#              ^superstate.operator.parameter <c>)
#   (<c> -^predicates.multiple true ^parameter-index <id>)
#   (<cond> ^parameter <p>)
#-->
#   (<p> ^1 <para1>)
#   (<para1> ^param-id <id> ^type single)
#}

sp {create-object*apply*complete*multiple
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
             # ^parameter.predicates.multiple true
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> ^predicates.multiple true)
-->
   (<c> ^formatted <cond>)
   (<cond> ^rtype set)
}
#default is single
sp {create-object*apply*complete*single
   (state <s> ^name create-object
              ^operator.name complete
              ^complete true
              ^last-condition <cond>
              ^superstate.operator.parameter <c>)
   (<c> -^predicates.multiple true)
-->
   (<c> ^formatted <cond>)
   (<cond> ^rtype single)
}

   
#problems
#indefinite?
#easy for negation and one usage
#otherwise othello the set is below white blocks)

sp {convert-parsed-format*propose*handle-action
   (state <s> ^name convert-parsed-format
              ^clause <c>)
   (<c> ^action <a> ^arg1 <a1> ^arg2 <a2>)
   (<a> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
}

sp {convert-parsed-format*apply*handle-action
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^superstate <ss>
              ^operator <o>)
   (<o> ^name handle-action
        ^action <a>
        ^arg1 <a1>
        ^arg2 <a2>)
   (<a> ^handle <name>)
   (<a1> ^parameter-index <pa>)
   (<a2> ^2 <obj2> ^handle <rname>)
   (<obj2> ^parameter-index <pa2>)
   -->
    (<ss> ^verb-structure <va>)
   (<nps> ^verb-structure <va>)
   (<va> ^verb-name <name> ^verb-prep <rname> ^1 <pa> ^2 <pa2>)
   (<a> ^formatted true)
   
}
sp {convert-parsed-format*propose*handle-predicate*parameter
   (state <s> ^name convert-parsed-format
              -^learn-link.handle <name>
              ^predicate <p>)
   (<p> ^handle <name> -^formatted)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-predicate
        ^predicate <p>)
}

#attribute-of
sp {convert-parsed-format*apply*handle-predicate
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <oc>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}

sp {convert-parsed-format*apply*handle-predicate*equal-exists
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to <eq>)
   (<eq> ^formatted <oc>)
   (<p2> ^handle <name> ^2 <c2> -^handle number1)
   (<c2> ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type attribute-of ^rtype <rtype2> ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type <rtype2>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}

#TODO make better?
#number
sp {convert-parsed-format*apply*handle-predicate*number
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^property.handle number ^handle <name> -^2 -^equal-to.formatted)
-->
   (<c> ^formatted <oc>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name number ^result.set.instance <i> ^args <a> ^parameter <para> ^rtype single ^return-type number)
   (<i> ^1 <name>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <oc> ^type single)
   
}
sp {convert-parsed-format*apply*handle-predicate*number*equal
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^property.handle number ^handle <name> -^2 ^equal-to.formatted <oc>)
-->
   (<c> ^formatted <oc>)
   (<s> ^nlp <n>)
   (<n> ^name number ^result.set.instance <i> ^args <a> ^parameter <para> ^rtype single ^return-type number)
   (<i> ^1 <name>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <oc> ^type single)
   
}

#for now store predifine number-of to count
sp {convert-parsed-format*apply*handle-predicate*count
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <oc>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}
sp {convert-parsed-format*apply*handle-predicate*count*equal*new-formatted
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <oc>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}
sp {convert-parsed-format*apply*handle-predicate*count*new-formatted
   (state <s> ^name convert-parsed-format
              ^object-count <oc>
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> -^equal-to.formatted)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> ^new-formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <oc>)
   (<s> ^object-count <oc> -)
   (<s> ^object-count (+ <oc> 1))
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}
sp {convert-parsed-format*apply*handle-predicate*count*equal
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-predicate ^predicate <c>)
   (<c> ^handle of1 ^2 <p2> ^equal-to.formatted <oc>)
   (<p2> ^2 <c2> ^handle number1)
   (<c2> -^new-formatted ^formatted <f2> ^parameter-index <id2>)
   (<f2> ^rtype <rtype2>)
-->
   (<c> ^formatted <oc>)
   (<s> ^nlp <n>)
   (<n> ^name count ^args <a> ^parameter <para> ^type function ^function soar-count ^rtype single ^return-type number)
   (<a> ^2 <f2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <oc> ^type single)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}


sp {convert-parsed-format*propose*handle-clause*parameter
   (state <s> ^name convert-parsed-format
              -^learn-link.handle <name>
              ^parameter <p>)
   (<p> ^relations <r>)
   (<r> -^formatted ^handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-clause
        ^parameter <p>)
}

sp {convert-parsed-format*propose*handle-clause
   (state <s> ^name convert-parsed-format
             -^learn-link.handle <name>
              ^clause <c>)
   (<c> ^arg1 ^predicate <p> -^formatted)
   (<p> ^2 ^handle <name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-clause
        ^clause <c>)
}

#TODO handle direct not as unary predicate?
sp {convert-parsed-format*propose*handle-property-predicate
   (state <s> ^name convert-parsed-format
             -^learn-link.handle <name>
              ^clause <c>)
   (<c> ^arg1 <p> ^predicate <pred> -^formatted)
   (<p> ^item-type << location block object >> ^predicates <ps>)
   (<pred> ^handle <name> ^item-type predicate ^property.handle <prop>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name handle-property-predicate
        ^param <p>
        ^property <prop>
        ^pred-name <name>
        ^pred-clause <c>)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*notnew
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property property ^pred-clause <c>)
   (<c> -^modifier.handle negation)
   (<p> -^new-formatted ^formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
-->
   (<c> ^formatted true)
   (<p> ^new-formatted <n>)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
   
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-property-predicate ^pred-name <name> ^param <p> ^property property ^pred-clause <c>)
   (<c> -^modifier.handle negation)
   (<p> ^new-formatted <p1> ^parameter-index <id>)
   (<p1> ^rtype <rtype>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p1>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
   
}

#TODO for now assume all none world state predicates are concepts
sp {convert-parsed-format*apply*handle-clause
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}
sp {convert-parsed-format*apply*handle-clause*arg3
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
   
}

sp {convert-parsed-format*apply*handle-clause*concepts
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}
sp {convert-parsed-format*apply*handle-clause*concept*arg3
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
   
}

sp {convert-parsed-format*apply*handle-clause*indef
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}
sp {convert-parsed-format*apply*handle-clause*indef*arg3
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<c3> ^formatted <p3> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}
sp {convert-parsed-format*apply*handle-clause*indef2*arg3
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}
##does this even work??
##no not yet
#sp {convert-parsed-format*apply*handle-clause*indef3*arg3
#   (state <s> ^name convert-parsed-format
#              ^superstate.world.predicates.predicate.handle <name>
#              ^operator <o>)
#   (<o> ^name handle-clause ^clause <c>)
#   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
#   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
#   (<c1> ^formatted <p> ^parameter-index <id>)
#   (<c2> ^formatted <p2> -^parameter-index)
#   (<c3> ^formatted <p3> ^parameter-index <id3>)
#   (<p> ^rtype <rtype>)
#   (<p2> ^rtype <rtype2>)
#   (<p3> ^rtype <rtype3>)
#-->
#   (<c> ^formatted true)
#   (<s> ^nlp <n>)
#   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
#   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
#   (<para> ^1 <para1> ^3 <para3>) #NOT YET
#   (<para1> ^param-id <id> ^type <rtype>)
#   (<para3> ^param-id <id3> ^type <rtype3>) 
#}

sp {convert-parsed-format*apply*handle-clause*indef*concept
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}

sp {convert-parsed-format*apply*handle-clause*indef*concept*arg3
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<c3> ^formatted <p3> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)  
}
sp {convert-parsed-format*apply*handle-clause*indef2*concept*arg3
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> -^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>) 
}

sp {convert-parsed-format*apply*handle-clause*negative
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> ^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^negative true ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   
}

sp {convert-parsed-format*apply*handle-clause*negative*arg3
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> ^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c2> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^negative true ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
   
}
sp {convert-parsed-format*apply*handle-clause*negative*indef
   (state <s> ^name convert-parsed-format
              ^operator <o>)
   (<o> ^name handle-clause ^clause <c>)
   (<c> ^arg1 <c1> ^predicate <r> ^modifier.handle negation)
   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> -^parameter-index)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<c> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^negative true ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1>)
   (<para1> ^param-id <id> ^type <rtype>)
   
}


sp {convert-parsed-format*apply*handle-clause*parameter
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relations <r>)

   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}
sp {convert-parsed-format*apply*handle-clause*parameter*arg3
   (state <s> ^name convert-parsed-format
              ^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relations <r>)

   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
}

#todo need to lookup type,function
sp {convert-parsed-format*apply*handle-clause*parameter*concept
   (state <s> ^name convert-parsed-format
             -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relations <r>)

   (<r> ^handle <name> ^2 <c2> -^3)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
-->
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2>)
   (<para> ^1 <para1> ^2 <para2>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
}

#todo fix generality
sp {convert-parsed-format*apply*handle-clause*parameter*concept*arg3
   (state <s> ^name convert-parsed-format
              -^superstate.world.predicates.predicate.handle <name>
              ^operator <o>)
   (<o> ^name handle-clause ^parameter <c1>)
   (<c1> ^relations <r>)

   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
   (<c1> ^formatted <p> ^parameter-index <id>)
   (<c2> ^formatted <p2> ^parameter-index <id2>)
   (<c3> ^formatted <p3> ^parameter-index <id3>)
   (<p> ^rtype <rtype>)
   (<p2> ^rtype <rtype2>)
   (<p3> ^rtype <rtype3>)
-->
   # (<c1> ^formatted <p> -)
   (<c1> ^new-formatted <n>) 
   (<r> ^formatted true)
   (<s> ^nlp <n>)
   (<n> ^name <name> ^args <a> ^parameter <para> ^type function ^function board-between ^rtype <rtype>)
   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
   (<para1> ^param-id <id> ^type <rtype>)
   (<para2> ^param-id <id2> ^type <rtype2>)
   (<para3> ^param-id <id3> ^type <rtype3>)
}
#sp {convert-parsed-format*apply*handle-clause*parameter*concept*arg3
#   (state <s> ^name convert-parsed-format
#              -^superstate.world.predicates.predicate.handle <name>
#              ^operator <o>)
#   (<o> ^name handle-clause ^parameter <c1>)
#   (<c1> ^relations <r>)
#
#   (<r> ^handle <name> ^2 <c2> ^3 <c3>)
#   (<c1> ^formatted <p> ^parameter-index <id>)
#   (<c2> ^formatted <p2> ^parameter-index <id2>)
#   (<c3> ^formatted <p3> ^parameter-index <id3>)
#   (<p> ^rtype <rtype>)
#   (<p2> ^rtype <rtype2>)
#   (<p3> ^rtype <rtype3>)
#-->
#   (<r> ^formatted true)
#   (<s> ^nlp <n>)
#   (<n> ^name <name> ^args <a> ^parameter <para> ^type concept ^attribute predicate ^rtype <rtype>)
#   (<a> ^1 <p> ^2 <p2> ^3 <p3>)
#   (<para> ^1 <para1> ^2 <para2> ^3 <para3>)
#   (<para1> ^param-id <id> ^type <rtype>)
#   (<para2> ^param-id <id2> ^type <rtype2>)
#   (<para3> ^param-id <id3> ^type <rtype3>)
#}


#how is negation represented here?
#sp {convert-parsed-format*apply*handle-clause*parameter*negative
#   (state <s> ^name convert-parsed-format
#              ^operator <o>)
#   (<o> ^name handle-clause ^parameter <c1>)
#   (<c1> ^relations <r>)
#
#   (<r> ^handle <name> ^2 <c2> -^3)
#   (<c1> ^formatted <p> ^parameter-index <id>)
#   (<c2> ^formatted <p2> ^parameter-index <id2>)
#   (<p> ^rtype <rtype>)
#   (<p2> ^rtype <rtype2>)
#-->
#   (<r> ^formatted true)
#   (<s> ^nlp <n>)
#   (<n> ^name <name> ^args <a> ^parameter <para> ^type state-pair ^attribute prepositions ^rtype <rtype>)
#   (<a> ^1 <p> ^2 <p2>)
#   (<para> ^1 <para1> ^2 <para2>)
#   (<para1> ^param-id <id> ^type <rtype>)
#   (<para2> ^param-id <id2> ^type <rtype2>)
#   
#}


#todo
#indifferent handling
#better ordering of param ids
#more concat
#handle negation
#ok if not optimal... with fewer args
#3 argument predicates

#elaborate subclauses
#first version dont order predicates
#first go through and add parameter tags?
#create temp ref to last mentioned nlp that mentions that?
#first bare bones
#then add type, attribute function information lookup smem?


sp {convert-parsed-format*propose*complete
   (state <s> ^name convert-parsed-format)
-->
   (<s> ^operator <op> + <)
   (<op> ^name complete)
}
sp {convert-parsed-format*apply*complete-flag
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^nlp <nlp>
              ^operator.name complete)
-->
    (<s> ^complete-flag true)
   }
sp {convert-parsed-format*apply*complete
   (state <s> ^name convert-parsed-format
              ^nlp-set <nps>
              ^nlp <nlp>
              ^operator.name complete)
-->
   (<nps> ^nlp <nlp>)
}

##TODO only do when in no known relationships
sp {convert-parsed-format*apply*complete*only-objects
   (state <s> ^name convert-parsed-format
              ^operator.name complete
             -^indef <pp>
             -^input-object-1 <pp>
             -^input-object-2 <pp>
              ^parameter <pp>)
   (<pp> ^formatted <p> ^parameter-index <id>)
   (<p> ^parameter <para>)
   -{(<s> ^nlp <nlp>)
     (<nlp> ^args.<num> <p> ^parameter.<num>.param-id <id>)}
-->
   (<s> ^nlp <p>)
   (<para> ^1 <p2>)
   (<p2> ^param-id <id>)
}

#TODO unmatched
sp {convert-parsed-format*apply*complete*superstate*copy
   (state <s> ^name convert-parsed-format
              ^superstate <ss>
              ^nlp-set <nps>
              ^complete-flag true
              ^top-state.dialog-context.learn-link.handle <name>
              ^operator.name complete)
 #  (<nps> ^aname <aname>)
   -{(<s> ^nlp <nlp>)
     (<nps> -^nlp <nlp>)}
(<ss> ^<type> <a> ^gtype <type>)
-->
   (<a> ^nlp-set <nps> ^aname <name>)
   (<nps> ^aname <name>)
  #      ^aname <aname>)
}