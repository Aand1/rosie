#pretty hacky method make more general


sp {convert-NLP-to-language*elaborate*relationships
   (state <s> ^name convert-NLP-to-language
              ^superstate.operator.structure <ps>)
   -->
   (<s> ^relationships <gr>
        ^structure <ps>)
}
sp {convert-NLP-to-language*elaborate*conditions
   (state <s> ^name convert-NLP-to-language
              ^structure.conditions <cond>)
-->
    (<s> ^condition <cond>)
  }
sp {convert-NLP-to-language*elaborate*conditions*depth
   (state <s> ^name convert-NLP-to-language
              ^condition <cond>)
   (<cond> ^args.<< 1 2 3 4 5 6 >> <cond2>)
-->
    (<s> ^condition <cond2>)
  }

sp {convert-NLP-to-language*elaborate*object-description
   (state <s> ^name convert-NLP-to-language
              ^condition <cond>)
   (<cond> ^name <name> -^attribute input-arg  -^attribute primitive ^attribute <at> ^type attribute)
-->
    (<s> ^<cond> <desc1>)
    (<desc1> ^<at> <name>)
}

sp {convert-NLP-to-language*elaborate*object-description*primitive
   (state <s> ^name convert-NLP-to-language
              ^condition <cond>)
   (<cond> ^name <name>   ^attribute primitive ^type attribute)
-->
    (<s> ^<cond> <desc1>)
    (<desc1> ^type <name>)
}

sp {convert-NLP-to-language*elaborate*object-description*input-arg
   (state <s> ^name convert-NLP-to-language
              ^condition <cond>)
   (<cond> ^name object ^attribute input-arg )
-->
    (<s> ^<cond> <desc1>)
    (<desc1> ^type it)
}

sp {convert-NLP-to-language*elaborate*object-description*telescope
   (state <s> ^name convert-NLP-to-language
              ^condition <cond>
              ^<c2> <desc2>
              ^<cond> <desc>)
   (<cond> ^args.{1} <c2>)
   (<desc2> ^<something> <value>)
-->
    (<desc> ^<something> <value>)
}

sp {convert-NLP-to-language*apply*state-diff*copy-goal-relations
   (state <s> ^name convert-NLP-to-language
              ^relationships <gr>
              ^condition <c>)
   (<s> ^<c1> <desc1> ^<c2> <desc2>)
   (<c> ^args <a> ^name <name> ^negative <n>)
   (<a> ^1 <c1> ^2 <c2> -^3)
-->
   (<gr> ^relation <r1>)
   (<r1> ^1 <desc1> ^2 <desc2> ^name <name> ^negative <n>)
}

sp {convert-NLP-to-language*propose*complete
   (state <s> ^name convert-NLP-to-language)
-->
   (<s> ^operator <o> + <)
   (<o> ^name complete)
}

sp {convert-NLP-to-language*apply*complete
   (state <s> ^name convert-NLP-to-language
              ^relationships <gr>
              ^superstate <ss>
              ^operator.name complete)
-->
    (<ss> ^nlp-relationships <gr>)
}

#sp {convert-NLP-to-language*apply*state-diff*copy-goal-relations*1arg
#   (state <s> ^name convert-NLP-to-language
#              ^top-state.dialog-context <g>)
#   (<g> ^goal-state <dstate> ^goal-relationships <gr>)
#   (<dstate> ^relationships.relations <r> ^predicates <p>)
#   (<p> ^<obj1> <desc1> ^<obj2> <desc2>)
#   (<r> ^instance <in> ^name <name>)
#   (<in> ^1 <obj1> -^2)
#-->
#   (<gr> ^relation <r1>)
#   (<r1> ^1 <desc1> ^name <name>)
#}