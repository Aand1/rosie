sp {execute-action*elaborate*action-operator-matches
   (state <s> ^problem-space.action.type execute
              ^action-operator <op>)
-->
   (<s> ^action-operator-matches <matches>)
}

sp {execute-action*action-operator-matches*elaborate*match-info*operator
   (state <s> ^problem-space.action.type execute
          ^operator <o> +
          ^action-operator-matches <matches>)
   (<o> ^action-type << primitive composite >>)
-->
   (<matches> ^match-info.operator <o>)
}

sp {execute-action*action-operator-matches*elaborate*matched*name
   (state <s> ^problem-space.action.type execute
              ^action-operator.action-id.procedural.op_name <op-name>
              ^action-operator-matches.match-info <info>)
   (<info> ^operator.name <op-name>)
-->
   (<info> ^matched name)
}

sp {execute-action*action-operator-matches*elaborate*matched*object*arg
   (state <s> ^problem-space.action.type execute
              ^action-operator.action-id.procedural.<arg-name>.arg-type object
              ^action-operator.<arg-name>.id <obj>
              ^action-operator-matches.match-info <info>)
   (<info> ^operator.<arg-name>.id <obj>)
-->
   (<info> ^matched <arg-name>)
}

sp {execute-action*action-operator-matches*elaborate*matched*concept*arg
   (state <s> ^problem-space.action.type execute
              ^action-operator.action-id.procedural.<arg-name>.arg-type concept
              ^action-operator.<arg-name>.id.name <concept>
              ^action-operator-matches.match-info <info>)
   (<info> ^operator.<arg-name>.id.name <concept>)
-->
   (<info> ^matched <arg-name>)
}

sp {execute-action*action-operator-matches*elaborate*matched*predicate*arg
   (state <s> ^problem-space.action.type execute
              ^action-operator.action-id.procedural.<arg-name>.arg-type predicate
              ^action-operator.<arg-name> <pred-arg>
              ^action-operator-matches.match-info <info>)
   (<pred-arg> ^id.name <rel>
               ^{ <num> << 1 2 >> } <obj>)
   (<info> ^operator.<arg-name> <op-arg>)
   (<op-arg> ^id.name <rel>
             ^<num> <obj>)
-->
   (<info> ^matched <arg-name>)
}

sp {execute-action*action-operator-matches*elaborate*op-matched*no*name
   (state <s> ^problem-space.action.type execute
              ^action-operator-matches.match-info <info>)
   (<info> -^matched name)
-->
   (<info> ^op-matched no)
}

sp {execute-action*action-operator-matches*elaborate*op-matched*no*arg
   (state <s> ^problem-space.action.type execute
              ^action-operator.action-id.procedural <proc>
              ^action-operator-matches.match-info <info>)
   (<proc> ^arg-name <arg-name>
          -^<arg-name>.optional true)
   (<info> -^matched <arg-name>)
-->
   (<info> ^op-matched no)
}

#
#sp {execute-action*action-operator-matches*elaborate*op-matched*no
#   (state <s> ^problem-space.action.type execute
#              ^action-operator.<arg-name>.arg-type <arg-type>
#              ^action-operator-matches.match-info <info>)
#   (<info> ^operator <op>)
#   (<op> -^<arg-name>)
#-->
#   (<info> ^op-matched no)
#}

sp {execute-action*action-operator-matches*elaborate*op-matched*yes
   (state <s> ^problem-space.action.type execute
              ^action-operator-matches.match-info <info>)
   (<info> -^op-matched no
            ^operator <op>)
-->
   (<info> ^op-matched yes)
   (<op> ^op-matched yes)
}
