### implement action-model for pick-up 
sp {action*apply*pickup*do*action-model
   (state <s> ^problem-space.action.type simulate
          ^operator <op>)
   (<op> ^name initiate-pick-up1
     ^arg1.id.predicates <preds>)
-->
   (<preds> ^arm-status grabbed)
}

# action model for close
sp {action*apply*putdown*do*action-model
   (state <s> ^problem-space.action.type simulate
               ^operator <o>
               ^world.predicates.predicate <pred>)
   (<o> ^name initiate-put-down1
        ^arg1.id <obj1>
        ^arg2.{2} <obj2>
        ^arg2.id.name <pred-name>)
   (<pred> ^name <pred-name>)
#   -{(<pred> ^instance <i2>)
#     (<i2> ^1 <obj1> ^2 <obj2>)}
   (<obj1> ^predicates <obj1-preds>)
-->
   (<pred> ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
   (<obj1-preds> ^arm-status grabbed -)
}
           
# action model for open
sp {action*apply*open*do*action-model
   (state <s> ^problem-space.action.type simulate
          ^operator <op>)
   (<op> ^name intiate-open1
     ^arg1.id.predicates <preds>)
-->
   (<preds> ^door closed -
            ^door open)
}

# action model for close
sp {action*apply*close*do*action-model
   (state <s> ^problem-space.action.type simulate
          ^operator <op>)
   (<op> ^name intiate-close1
     ^arg1.id.predicates <preds>)
-->
   (<preds> ^door open -
            ^door closed)
}

# action model for turn-on
sp {action*apply*turn-on*do*action-model
   (state <s> ^problem-space.action.type simulate
          ^operator <op>)
   (<op> ^name intiate-turn-on1
     ^arg1.id.predicates <preds>)
   (<preds> ^<pred> off)
-->
   (<preds> ^<pred> off -
            ^<pred> on)
}

# action model for turn-off
sp {action*apply*turn-off*do*action-model
   (state <s> ^problem-space.action.type simulate
          ^operator <op>)
   (<op> ^name intiate-turn-off1
     ^arg1.id.predicates <preds>)
   (<preds> ^<pred> on)
-->
   (<preds> ^<pred> on -
            ^<pred> off)
}
