sp {go-to-next-waypoint*propose*drive-to-waypoint*bottom*level
   (state <s> ^name go-to-next-waypoint
              -^current-location.sub-map
              ^destination <dest>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name initiate-drive-to-waypoint
        ^waypoint <dest>)
}

sp {go-to-next-waypoint*elaborate*drive-to-waypoint*wall-side*from*edge
   (state <s> ^name go-to-next-waypoint
              ^operator <o> +
              ^current-location.edge <e>)
   (<o> ^name initiate-drive-to-waypoint
        ^waypoint <dest>)
   (<e> ^end <dest>
        ^wall-side <side>)
-->
   (<o> ^wall-side <side>)
}

sp {go-to-next-waypoint*elaborate*drive-to-waypoint*wall-side*default
   (state <s> ^name go-to-next-waypoint
              ^operator <o> +
              ^current-location <cur>)
   (<o> ^name initiate-drive-to-waypoint
        ^waypoint <dest>)
   (<cur> -^edge.end <dest>)
-->
   (<o> ^wall-side 1)
}


sp {go-to-next-waypoint*apply*initiate-drive-to-waypoint
   (state <s> ^name go-to-next-waypoint
              ^operator <o>
              ^top-state.interaction.stack.segment <seg>)
   (<o> ^name initiate-drive-to-waypoint
        ^waypoint <wp>)
-->
   (<seg> ^current-action <ca>)
   (<ca> ^name drive-to-waypoint1
         ^execution-operator execute-drive-to-waypoint1
         ^arguments.waypoint <wp>)
}


#sp {go-to-next-area*apply*go-to*mark*previous-area
#   (state <s> ^name go-to-next-area
#              ^top-state.current-location { <cur-loc> <> <dest> }
#              ^operator <o>)
#   (<o> ^name go-to
#        ^destination <dest>)
#-->
#   (<dest> ^previous-area <cur-loc>)
#}
#
#sp {go-to-next-area*apply*go-to*remove*old*previous-area
#   (state <s> ^name go-to-next-area
#              ^top-state.current-location { <cur-loc> <> <dest> }
#              ^operator <o>)
#   (<o> ^name go-to
#        ^destination <dest>)
#   (<dest> ^previous-area { <old-prev> <> <cur-loc> })
#-->
#   (<dest> ^previous-area <old-prev> -)
#}

