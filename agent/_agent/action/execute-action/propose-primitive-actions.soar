####### propose pick-up for objects #########################################
sp {action*propose*initiate-pick-up1
   (state <s> ^problem-space.action.propose-actions true
              ^world.objects.object <obj>
             -^world.robot.arm.grabbed <any>)
   (<obj> ^predicates.category block1)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-pick-up1 
         ^action-name pick-up1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^id <obj>)
}

####### propose put-down for objects #########################################
sp {action*propose*initiate-put-down1
   (state <s> ^problem-space.action.propose-actions true
              ^world.objects.object <obj>)
   (<obj> ^predicates.arm-status grabbed)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-put-down1
         ^action-name put-down1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^id <obj>)
}

####################### propose open location #################################
sp {action*propose*initiate-open1
   (state <s> ^problem-space.action.propose-actions true
              ^world.objects.object <obj>)
   (<obj> ^predicates.door closed)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-open1
         ^action-name open1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^id <obj>)
}

####################### propose close location ##################################
sp {action*propose*initiate-close1
   (state <s> ^problem-space.action.propose-actions true
              ^world.objects.object <obj>)
   (<obj> ^predicates.door open)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-close1
         ^action-name close1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^id <obj>)
}

####################### propose initiate-turn-on ##################################
sp {action*propose*initiate-turn-on1
   (state <s> ^problem-space.action.propose-actions true
              ^world.objects.object <obj>)
   (<obj> ^predicates.<any> off)
-->
   (<s> ^operator <op> +)
   (<op> ^name initiate-turn-on1
         ^action-name turn-on1
         ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type object
           ^id <obj>)
}

####################### propose initiate-stop ##################################
sp {action*propose*initiate-stop1
   (state <s> ^problem-space.action.propose-actions true)
-->
   (<s> ^operator <o> +)
   (<o> ^name initiate-stop1
        ^action-name stop1
         ^action-type primitive)
}

####################### propose initiate-orient ##################################
sp {action*propose*initiate-orient1*each*direction
   (state <s> ^problem-space.action.propose-actions true)
-->
   (<s> ^operator <on> +
        ^operator <os> +
        ^operator <oe> +
        ^operator <ow> +)
   (<on> ^name initiate-orient1
         ^action-name orient1
         ^arg1 <n-arg1>
         ^action-type primitive)
   (<n-arg1> ^arg-type concept
             ^id.name north1)
   (<os> ^name initiate-orient1
         ^action-name orient1
         ^arg1 <s-arg1>
         ^action-type primitive)
   (<s-arg1> ^arg-type concept
             ^id.name south1)
   (<oe> ^name initiate-orient1
         ^action-name orient1
         ^arg1 <e-arg1>
         ^action-type primitive)
   (<e-arg1> ^arg-type concept
             ^id.name east1)
   (<ow> ^name initiate-orient1
         ^action-name orient1
         ^arg1 <w-arg1>
         ^action-type primitive)
   (<w-arg1> ^arg-type concept
             ^id.name west1)
}

####################### propose initiate-turn-right ##################################
sp {action*propose*initiate-turn-right1
   (state <s> ^problem-space.action.propose-actions true)
-->
   (<s> ^operator <o> +)
   (<o> ^name initiate-turn-right1
        ^action-name turn-right1
         ^action-type primitive)
}

####################### propose initiate-turn-left ##################################
sp {action*propose*initiate-turn-left1
   (state <s> ^problem-space.action.propose-actions true)
-->
   (<s> ^operator <o> +)
   (<o> ^name initiate-turn-left1
        ^action-name turn-left1
         ^action-type primitive)
}

####################### propose initiate-turn-around ##################################
sp {action*propose*initiate-turn-around1
   (state <s> ^problem-space.action.propose-actions true)
-->
   (<s> ^operator <o> +)
   (<o> ^name initiate-turn-around1
        ^action-name turn-around1
         ^action-type primitive)
}

####################### propose initiate-follow-left-wall1 ##################################
sp {action*propose*initiate-follow-wall1*left
   (state <s> ^problem-space.action.propose-actions true)
-->
   (<s> ^operator <o> +)
   (<o> ^name initiate-follow-wall1
        ^action-name follow-wall1
        ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type concept
           ^id.name left1)
}

####################### propose initiate-follow-right-wall1 ##################################
sp {action*propose*initiate-follow-wall1*right
   (state <s> ^problem-space.action.propose-actions true)
-->
   (<s> ^operator <o> +)
   (<o> ^name initiate-follow-wall1
        ^action-name follow-wall1
        ^arg1 <arg1>
         ^action-type primitive)
   (<arg1> ^arg-type concept
           ^id.name right1)
}

########################## propose wait ########################################
#sp {propose*op_wait*operator
#   (state <s> ^problem-space.action <act>)
#   (<act> -^type none)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_wait
#        ^action-type primitive)
#}
#   
#
