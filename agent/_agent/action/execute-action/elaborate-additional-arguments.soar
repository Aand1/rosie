sp {execute-action*elaborate*action*operator*arguments*from*action-operator
   (state <s> ^problem-space.action.type execute
              ^action-operator.action-id.procedural <proc>
              ^action-operator.<arg-name> <arg>
              ^operator <o> +)
   (<proc> ^op_name <op-name>
           ^arg-name <arg-name>)
   (<o> ^name <op-name>)
   -{(<o> ^<arg-name> <> <arg>)}
-->
   (<o> ^<arg-name> <arg>)
}
         
sp {execute-action*elaborate*until-clause*on*action-operator
   (state <s> ^problem-space.action.type execute
              ^action-operator.until-clause <until>
              ^action-operator-matches.match-info <info>)
   (<info> ^operator <o>
           ^op-matched yes)
-->
   (<o> ^until-clause <until>)
}

sp {evaluate-operator*elaborate*action*operator*arguments*from*subaction
   (state <s> ^name evaluate-operator
              ^problem-space.name composite-action
              ^operator <o> +
              ^subactions.next.<arg-name> <arg>
              ^subactions.next.name <name>)
   (<o> ^action-type primitive 
        -^<arg-name> <> <arg>
         ^action-name <name>)
   (<arg> ^arg-type <type>)
-->
   (<o> ^<arg-name> <arg>)
}
         
