sp {execute-drive-to-waypoint1*propose*intermediate-turn
   (state <s> ^name execute-drive-to-waypoint1
              ^current-action <a>
              ^waypoint <wp>
              ^intermediate-turn { <yaw> <> none })
   (<a> ^near-waypoint true
       -^turned)
-->
   (<s> ^operator <o> + >)
   (<o> ^name intermediate-turn
        ^turn-amount <yaw>
        ^command-operator true)
}

sp {execute-drive-to-waypoint1*apply*intermediate-turn*right
   (state <s> ^name execute-drive-to-waypoint1
              ^operator <o>
              ^current-action <a>
              ^top-state.io.input-link.self <self>
              ^top-state.io.output-link <out>)
   (<o> ^name intermediate-turn
        ^turn-amount { <yaw> < 0 })
-->
   (<out> ^do-control-law <law>)
   (<law> ^name turn
          ^parameters.direction -1
          ^termination-condition <cond>)
   (<cond> ^name rotation
           ^parameters.yaw (- <yaw>))
   (<a> ^turn-command <law>)
}

sp {execute-drive-to-waypoint1*apply*intermediate-turn*left
   (state <s> ^name execute-drive-to-waypoint1
              ^operator <o>
              ^current-action <a>
              ^top-state.io.input-link.self <self>
              ^top-state.io.output-link <out>)
   (<o> ^name intermediate-turn
        ^turn-amount { <yaw> > 0 })
-->
   (<out> ^do-control-law <law>)
   (<law> ^name turn
          ^parameters.direction 1
          ^termination-condition <cond>)
   (<cond> ^name rotation
           ^parameters.yaw <yaw>) 
   (<a> ^turn-command <law>)
}

sp {top-state*execute-drive-to-waypoint1*apply*intermediate-turn*cleanup
   (state <s> ^superstate nil
              ^operator.name execute-drive-to-waypoint1
              ^current-action <a>
              ^io.output-link <out>)
   (<a> ^turn-command <cmd>)
   (<cmd> ^status success)
-->
   (<a> ^turn-command <cmd> -
        ^turned true
        ^near-waypoint true -)
   (<out> ^do-control-law <cmd> -)
}
              


   