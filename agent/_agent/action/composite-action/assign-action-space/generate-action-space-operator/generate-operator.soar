sp {elaborate*new*candidate*operator*argument*single-level
   (state <s> ^name generate-action-space-operator
   	      ^operator-template <act>
	      ^object <co>
	      -^ignore-set.attribute <arg1>)
   (<act> ^<arg1> <val1>)
   (<val1> -^argument)
-->
   (<s> ^<arg1> <co>)
}

sp {elaborate*new*candidate*operator*argument*second*level
   (state <s> ^name generate-action-space-operator
   	      ^operator-template <act>
	      ^object <co>
	      ^relation <rel>)
   (<act> ^<arg1> <arg1-val>)
   (<arg1-val> ^argument <val1>
   	       ^relation <rel1>)
-->
   (<s> ^<arg1> <argvalnew>)
   (<argvalnew> ^argument <co>
   		^relation <rel>)
}

sp {elaborate*new*candidate*operator*argument*second*level*no-relation
   (state <s> ^name generate-action-space-operator
   	      ^operator-template <act>
	      ^object <co>
	      ^relation <rel>)
   (<act> ^<arg1> <arg1-val>)
   (<arg1-val> ^argument <val1>
   	       -^relation <rel1>)
-->
   (<s> ^<arg1> <argvalnew>)
   (<argvalnew> ^argument <co>)
}


### operator with one argument
sp {generate-action-space-operator*create*operator*one-argument
   (state <s> ^name generate-action-space-operator  
	      ^operator-template <act>
	      ^<arg1> <val1>
	      ^map-id <map>) 
   (<act> ^<arg1> <id1>
   	  -^{<arg2> <> <arg1>}
	  ^op_name <name>)
   (<map> ^procedural <proc>)
-->
   (<s> ^candidate-operator <cop>
   	^match <match>)
   (<cop> ^<arg1> <val1>
   	  ^name <name>
	  ^_metadata <met>
	  ^action-type composite
	  ^_instantiation-of <proc>)
   (<match> ^action-operator <cop>)
   (<met> ^map-id <map>)
}

### operator with two arguments
sp {generate-action-space-operator*create*operator*two-argument
   (state <s> ^name generate-action-space-operator  
	      ^operator-template <act>
	      ^<arg1> <val1>
	      ^<arg2> <val2>
	      ^map-id <map>)
   (<act> ^<arg1> <id1>
   	  ^{<arg2> > <arg1>} <id2>
	  ^op_name <name>)
   (<val2> ^argument {<arg> <> <val1>})
   (<map> ^procedural <proc>)
-->
   (<s> ^candidate-operator <cop>
   	^match <match>)
   (<cop> ^<arg1> <val1>
   	  ^<arg2> <val2>
   	  ^name <name>
	  ^_metadata <met>
	  ^action-type composite
	  ^_instantiation-of <proc>)
   (<match> ^action-operator <cop>)
   (<met> ^map-id <map>)
}


#### elaborate matches
sp {generate-action-space-operator*match*name
   (state <s> ^candidate-operator <cop>
   	      ^retrieved-actions.action <act>
	      ^match <match>)
   (<cop> ^<arg> <val>) 
   (<act> ^<arg> <val>)
   (<match> ^action-operator <cop>)
-->
   (<match> ^matched <arg>)
}

sp {generate-action-space-operator*match*single-level*arguments
   (state <s> ^candidate-operator <cop>
   	      ^retrieved-actions.action <act>
	      ^match <match>)
   (<cop> ^<arg> <val>) 
   (<val> ^id <id>)
   (<act> ^<arg> <val1>)
   (<val1> ^id <id>)
   (<match> ^action-operator <cop>)
-->
   (<match> ^matched <arg>)
}

sp {generate-action-space-operator*match*two-level*arguments
   (state <s> ^candidate-operator <cop>
   	      ^retrieved-actions.action <act>
	      ^match <match>)
   (<cop> ^<arg> <varg>)
   (<varg> ^argument <val>
   	   -^relation) 
   (<val> ^id <id>)
   (<act> ^<arg> <varg1>)
   (<varg1> ^argument <val1>
   	    -^relation)
   (<val1> ^id <id>)
   (<match> ^action-operator <cop>)
-->
   (<match> ^matched <arg>)
}

sp {generate-action-space-operator*match*two-level*relation
   (state <s> ^candidate-operator <cop>
   	      ^retrieved-actions.action <act>
	      ^match <match>)
   (<cop> ^<arg> <varg>)
   (<varg> ^argument <val>
   	   ^relation.smem-rep <rep>) 
   (<val> ^id <id>)
   (<act> ^<arg> <varg1>)
   (<varg1> ^argument <val1>
   	    ^relation.smem-rep <rep>)
   (<val1> ^id <id>)
   (<match> ^action-operator <cop>)
-->
   (<match> ^matched <arg>)
}

sp {generate-action-space-operator*elaborate*operator*no-match
   (state <s> ^candidate-operator <cop>
   	      ^match <match>
	      -^ignore-set.attribute <arg>)
   (<match> ^action-operator <cop>
   	    -^matched <arg>)
   (<cop> ^<arg> <val>)
-->
   (<match> ^not-matched <arg>)
}
  

