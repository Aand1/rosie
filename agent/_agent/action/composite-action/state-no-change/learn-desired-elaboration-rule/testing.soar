#sp {top-state*create*simulated*world
#   (state <s> ^superstate nil
#              ^world.objects <objs>)
#-->
#   (<objs> ^object <sphere> <table> <box> <pantry>)
#     (<sphere> ^id 1 ^predicates <sphere-preds>)
#       (<sphere-preds> ^shape sphere1 ^color green1 ^category block1 ^status live)
#     (<table> ^id 2 ^predicates <table-preds>)
#       (<table-preds> ^category location1 ^name table ^status live)
#     (<box> ^id 3 ^predicates <box-preds>)
#       (<box-preds> ^shape box1 ^color green1 ^category block1 ^status live)
#     (<pantry> ^id 4 ^predicates <pantry-preds>)
#       (<pantry-preds> ^category location1 ^name pantry ^status live)
#}
#
#sp {top-state*elaborate*world-usage
#   (state <s> ^superstate nil)
#-->
#   (<s> ^world-usage external)
#}
#
#sp {top-state*elaborate*smem-query-cue
#   (state <s> ^superstate nil)
#-->
#   (<s> ^smem-query-cue.name move1)
#}
#
#sp {top-state*apply*interaction*remove*failure
#   (state <s> ^superstate nil
#              ^operator <o>
#              ^interaction.status <status>)
#   (<o> ^name interaction
#        ^status-type failure
#        ^status-info.type unknown-task)
#   (<status> ^failure <f>)
#-->
#   (<status> ^failure <f> -)
#}
#
#sp {top-state*apply*interaction*create*message
#   (state <s> ^superstate nil
#              ^operator <o>
#              ^interaction.status <status>
#              ^world.objects <objs>
#              ^world.predicates.predicate <on>
#              ^retrieved-lti-cue.retrieved-lti <move>)
#   (<o> ^name interaction
#        ^status-type failure
#        ^status-info.type unknown-task)
#   (<objs> ^object <sphere>
#           ^object <table>)
#   (<sphere> ^predicates.shape sphere1)
#   (<table> ^predicates.name table)
#   (<on> ^predicate-info <on-lti>)
#   (<on-lti> ^name on1)
#   (<move> ^name move1)
#-->
#   (<status> ^new-message <msg>)
#   (<msg> ^action.id <move> ^message-type command ^arg1 <sphere>)
##    ^arg2 <arg2>)
##   (<arg2> ^id <on-lti>
##           ^arg2 <table>)
#}