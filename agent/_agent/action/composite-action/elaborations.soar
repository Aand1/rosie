## copy action problemspace
sp {composite-action*copy*problem-space
   (state <s> ^superstate.problemspace <sps>
   	      ^superstate.operator.action-type composite
	      ^problemspace <ps>)
   (<sps> ^state << current retrospective hypothetical >>)
 -->
   (<ps> ^name action
   	 ^action-type composite)
}

sp {composite-action*elaborate*status*from*topstate
   (state <s> ^problemspace <ps>
	      ^superstate.operator._metadata.map-id <map-id>
	      ^topstate.interaction.stack.segment.purpose.satisfaction.action-event.status learning)
  (<ps> ^name action
    	 ^action-type composite)
-->
   (<s> ^action-status learning)
}


sp {composite-action*elaborate*copy*action-status
   (state <s> ^problemspace <ps>
	      ^superstate.action-status learning)
   (<ps> ^name action
   	 ^action-type composite)
-->
   (<s> ^action-status learning)
}


sp {composite-operator*elaborate*map-id
   (state <s> ^problemspace <ps>
	      ^superstate.operator <sop>)
   (<sop> ^_metadata.map-id <map-id>)
   (<ps> ^name action
   	 ^action-type composite)
-->
   (<s> ^map-id <map-id>)
}

sp {composite-operator*elaborate*other-ids
   (state <s> ^problemspace <ps>
	      ^map-id <map-id>)
   (<map-id> ^procedural <proc-id>
   	     ^action-space <as-id>
	     ^goal <gid>)
   (<ps> ^name action
   	 ^action-type composite)
-->
   (<s> ^procedural-id <proc-id>
   	^action-space-id <as-id>
	^goal-id <gid>
	^action-marker composite)
}

#################### elaborate smem-query #######################
sp {composite-operator*query*map-id
   (state <s> ^problemspace <ps>
	      ^superstate.operator <sop>)
   (<sop> ^_metadata.procedural <pid>)
   (<ps> ^name action
   	 ^action-type composite)
-->
   (<s> ^smem-query-cue <cue>)
   (<cue> ^procedural <pid>)
}

sp {composite-operator*elaborate*map-id*procedural*query
   (state <s> ^problemspace <ps>
	      ^smem-query-cue <scue>
	      ^retrieved-lti-cue <rlc>)
   (<rlc> ^cue <scue>
   	  ^retrieved-lti <lti>)
   (<scue> ^procedural <any>)
   (<ps> ^name action
   	 ^action-type composite)
-->
   (<s> ^map-id <lti>)
}

###########################################################
# if there is a desired goal in the state, generate a closed world description of the environment. 
# Negate every predicate in the desired that is not known to be true
###########################################################
# sp {composite-action*desired*not-predicate
#    (state <s> ^problemspace <ps>
#    	      ^desired <d>
# 	      ^environment <env>)
#    (<ps> ^name action
#    	 ^action-type composite)
#    (<d> ^predicate <pred>)
#    (<pred> ^relation <rel>
#    	   ^a <obja>
# 	   ^ 



