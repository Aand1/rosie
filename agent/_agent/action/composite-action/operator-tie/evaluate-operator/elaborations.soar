#### evaluate-operator elaborate problemspace
sp {elaborate*evaluate-operator*problemspace
   (state <s> ^name evaluate-operator
   	      ^superstate.superstate.problemspace <sps>
	      ^problemspace <ps>)
   (<sps> ^action.category composite)
-->
   (<ps> ^action <act>
   	 ^state <st>)
   (<act> ^category composite
   	  ^type project)
   (<st> ^dont-copy object
   	 ^dont-copy io
	 ^dont-copy environment
	 ^type retrospective)
}

sp {elaborate*evaluate-operator*pairs
   (state <s> ^name evaluate-operator)
-->
   (<s> ^pairs <pair>)
}


sp {elaborate*evaluate-operator*problemspace*learning
   (state <s> ^name evaluate-operator
   	      ^superstate.superstate.problemspace <sps>
	      ^problemspace <ps>)
   (<sps> ^learning.type <any>)
-->
   (<ps> ^learning.type <any>)
}


### set up the problem space
sp {iterative-search*selection*elaborate*problem-space
   (state <s> ^name {<sname> <> evaluate-operator <> action}
   	      ^problemspace <ps>)
   (<ps> ^action.category composite)
-->  
   (<s> ^problem-space <p>)
   (<p> ^name <sname>
   	^default-state-copy yes
	^two-level-attributes object
	^one-level-attributes action-space-id
	^one-level-environment-attributes grabbed on off closed open predicate cooked not-predicate clear name in-focus
	^deep-copy indexed-action operator-argument)
}