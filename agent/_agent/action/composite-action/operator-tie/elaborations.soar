#### elaborate state as a selection problem space if an operator-tie occurs during application of a composite operator
sp {elaborate*state*operator-tie*composite-operator*explore
   (state <s> ^choices multiple
	      ^problemspace <ps>
	      ^superstate.problemspace <sps>)
   (<sps> ^action-type composite
   	  ^name action
	  ^state current)
-->
   (<s> ^name selection)
   (<ps> ^name learning
   	 ^dont-copy object
	 ^dont-copy environment
	 ^learning-type exploration
	 ^state current)
}

sp {elaborate*state*operator-tie*composite-operator*exploit
   (state <s> ^choices multiple
	      ^problemspace <ps>
	      ^superstate.problemspace <sps>)
   (<sps> ^action-type composite
   	  ^name action
	  ^state retrospective)
-->
   (<s> ^name selection)
   (<ps> ^name learning
   	 ^dont-copy object
	 ^dont-copy environment
	 ^learning-type exploitation
	 ^state retrospective)
}

### set up the max depth
sp {apply*init-current-evaluation-depth*max
   (state <s> ^top-selection true
              ^operator <op>)
   (<op> ^name init-current-evaluation-depth)
-->
   (<s> ^max-evaluation-depth 0)
}

### set up the problem space
sp {iterative-search*selection*elaborate*problem-space
   (state <s> ^name {<sname> <> evaluate-operator <> operator-tie <> selection <> action-policy <> find-parameter}
   	      ^problemspace <ps>)
   (<ps> ^name action
   	 ^action-type composite)
-->  
   (<s> ^problem-space <p>)
   (<p> ^name <sname>
   	^default-state-copy yes
	^two-level-attributes object
	^one-level-attributes action-space-id
	^one-level-environment-attributes grabbed on off closed open relation cooked 
	^deep-copy action-space-operator operator-argument
	^dont-copy focus)
}