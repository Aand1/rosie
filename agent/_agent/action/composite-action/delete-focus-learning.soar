### if in learning new tasks, on success delete focus
# sp {mark*delete*focus*on*success*learning-new-tasks
#    (state <s> ^ndesired <ndes>
#    	      ^desired <des>
# 	      ^success <des>
# 	      ^io
# 	      ^object <obj>
# 	      ^superstate <ss>)
#    (<ndes> ^focus <any>)
#    (<obj> ^focus <any>)
#    (<ss> ^action-marker composite)
# --> 
#    (<obj> ^focus <any> -)
# }

sp {copy*ndesired*focus*desired
   (state <s> ^ndesired <ndes>
   	      ^desired <des>)
   (<ndes> ^focus <any>)
-->
  (<des> ^focus <any>)
}


### evaluate-operator copy focus only desired
sp {evaluate-operator*elaborate*add-focus-to-duplicate
   :default
   (state <s> ^duplicates <d>
             -^problem-space.no-local-negations <nln>
              ^default-state-copy yes
	      ^duplicate-of <ss>)
   (<ss> ^desired.focus <sub-val>)
   (<d> ^<id> <new-id>)
   (<id> ^focus <sub-val>)
-->
   (<new-id> ^focus <sub-val>)}

### prefer put-down operator whose track-relation has not been achieved
sp {temp*put-down*propose
   (state <s> ^operator <op> +
   	      ^track-relation <tr>)
   (<op> ^name op_put-down-object-location
   	 ^argument1 <obj1>
	 ^argument2 <arg2>)
   (<arg2> ^argument <obj2>
   	   ^relation.smem-rep <rel>)
   (<tr> ^object1 <obj1>
   	 ^object2 <obj2>
	 ^vpredicate.smem-rep <rel>
	 ^complete success)
-->
   (<s> ^operator <op> -)
}

sp {temp*pick-up*propose
   (state <s> ^operator <op> +
   	      ^track-relation <tr>)
   (<op> ^name op_pick-up-object
   	 ^argument1 <obj1>)
   (<tr> ^object1 <obj1>
	 ^complete success)
-->
   (<s> ^operator <op> -)
}
   