### propose successful completion if the desired state is reached
sp {composite-action*mark*applied
   (state <s> ^problemspace <ps>
	      ^desired <d>
	      ^success <d>
	      ^superstate <ss>
	      ^quiescence t
	      -^action-executed true)
   (<ps> ^action.category composite)
   (<ss> ^operator <ia>
   	 ^superstate <sss>
	 ^name learn-proposal-rule)
   (<sss> ^superstate-indexed-action <map-op>)
-->
   (<map-op> ^applied yes)
}

sp {composite-action*mark*applied*top-state
   (state <s> ^problemspace <ps>    
   	      ^indexed-action <ia>
	      ^quiescence t
	      ^name action
	      ^superstate-indexed-action <map-op>
	      ^name action)
   (<ia> ^desired <d>
	 ^success <d>)
-->
   (<map-op> ^applied yes)
}

sp {composite-action*mark*applied*top-state*retrospective-learning
   (state <s> ^problemspace <ps>    
   	      ^indexed-action <ia>
	      ^quiescence t
	      ^name action
	      ^top-state-indexed-action <map-op>
	      ^name retrospective-learning)
   (<ia> ^desired <d>
	 ^success <d>)
-->
   (<map-op> ^applied yes)
}


############## learning proposal rules for composite actions ###############
sp {composite-action*mark*applied*top-state*learn-proposal-rule
   (state <s> ^problemspace <ps>
	      ^desired <d>
	      ^success <d>
	      ^superstate <ss>
	      ^action-executed true)
   (<ss> ^superstate-indexed-action <ia>
   	 ^name learn-proposal-rule
	 ^superstate <sss>)
-->
   (<sss> ^operator <ia> +)
}

sp {composite-action*mark*applied*top-state*report-successful-learning
   (state <s> ^problemspace <ps>
	      ^desired <d>
	      ^success <d>
	      ^superstate.name learn-proposal-rule
	      ^evaluated-subaction true
	      ^top-state.io.output-link <ol>)
-->
   (<ol> ^send-message <msg>)
   (<msg> ^type successful-task-learning)
}