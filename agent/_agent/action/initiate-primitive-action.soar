####### propose pick-up for objects #########################################
sp {action*propose*op_pick-up-object
   (state <s> ^problemspace.action <act>
              ^world.objects.object <obj>
             -^world.robot.arm.grabbed <any>)
   (<obj> ^predicates.category block1)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pick-up-object 
   	 ^arg1 <obj>
     ^action-type primitive)
}

sp {action*execute*apply*op_pick-up-object*execute*create*current-action*topstate
   (state <s> ^problemspace.action.type execute
              ^operator <o>
              ^topstate.interaction.stack.segment <seg>)
   (<o> ^name op_pick-up-object
        ^arg1 <obj>)
-->
   (<seg> ^current-action <ca>)
   (<ca> ^name pick-up1
         ^execution-op execute-pick-up
         ^arguments.arg1 <obj>)
}

####### propose put-down for objects #########################################
sp {action*propose*op_put-down-object
   (state <s> ^problemspace.action <act>
              ^world.objects.object <obj>)
   (<obj> ^predicates.arm-status grabbed)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_put-down-object
   	 ^arg1 <obj>
     ^action-type primitive)
}

sp {action*elaborate*op_put-down-object*arg2*from*action-command
   (state <s> ^problemspace.action <act>
              ^operator <o> +
              ^action-command <cmd>)
   (<o> ^name op_put-down-object)
   (<cmd> ^arg2 <arg2>)
   (<arg2> ^arg2 <obj>
           ^id <rel>)
-->
   (<o> ^arg2 <new-arg2>)
   (<new-arg2> ^arg2 <obj>
               ^id <rel>)
}

sp {action*apply*op_put-down-object*execute*create*current-action*topstate
   (state <s> ^problemspace.action.type execute
              ^operator <o>
              ^topstate.interaction.stack.segment <seg>)
   (<o> ^name op_put-down-object
        ^arg1 <obj>
        ^arg2.arg2 <obj2>
        ^arg2.id <rel>)
-->
   (<seg> ^current-action <ca>)
   (<ca> ^name put-down1
         ^execution-op execute-put-down
         ^arguments <args>)
   (<args> ^arg1 <obj>
           ^arg2 <new-arg2>)
   (<new-arg2> ^relation <rel>
               ^arg2 <obj2>)
}

######### propose put an object in a position #################################
#sp {propose*put-down
#   (state <s> ^problemspace.action <act>
#   	      ^object {<obj> <> <gobj>}
#	      ^environment <env>)
#   (<env> ^grabbed <gobj>)
#   (<act> -^type none)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_put-down-object-location
#   	 ^argument1 <gobj>
#	 ^argument2 <new>
#	 ^action-type primitive)
#   (<new> ^argument <obj>)
#}
#
####################### propose open location #################################
sp {action*propose*op_open
   (state <s> ^problemspace.action <act>
              ^world.objects.object <obj>)
   (<obj> ^predicates.door closed)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_open
     ^arg1 <obj>
     ^action-type primitive)
}

sp {action*apply*op_open*execute*create*current-action*topstate
   (state <s> ^problemspace.action.type execute
              ^operator <o>
              ^topstate.interaction.stack.segment <seg>)
   (<o> ^name op_open
        ^arg1 <obj>)
-->
   (<seg> ^current-action <ca>)
   (<ca> ^name open1
         ^execution-op execute-open
         ^arguments.arg1 <obj>)
}

####################### propose close location ##################################
sp {action*propose*op_close
   (state <s> ^problemspace.action <act>
              ^world.objects.object <obj>)
   (<obj> ^predicates.door open)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_close
     ^arg1 <obj>
     ^action-type primitive)
}

sp {action*apply*op_close*execute*create*current-action*topstate
   (state <s> ^problemspace.action.type execute
              ^operator <o>
              ^topstate.interaction.stack.segment <seg>)
   (<o> ^name op_close
        ^arg1 <obj>)
-->
   (<seg> ^current-action <ca>)
   (<ca> ^name close1
         ^execution-op execute-close
         ^arguments.arg1 <obj>)
}

####################### propose op_turn-on ##################################
sp {action*propose*op_turn-on
   (state <s> ^problemspace.action <act>
              ^world.objects.object <obj>)
   (<obj> ^predicates.<any> off)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_turn-on
     ^arg1 <obj>
     ^action-type primitive)
}

sp {action*apply*op_turn-on*execute*create*current-action*topstate
   (state <s> ^problemspace.action.type execute
              ^operator <o>
              ^topstate.interaction.stack.segment <seg>)
   (<o> ^name op_turn-on
        ^arg1 <obj>)
-->
   (<seg> ^current-action <ca>)
   (<ca> ^name turn-on1
         ^execution-op execute-turn-on
         ^arguments.arg1 <obj>)
}

####################### propose op_turn-off ##################################
sp {action*propose*op_turn-off
   (state <s> ^problemspace.action <act>
              ^world.objects.object <obj>)
   (<obj> ^predicates.<any> on)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_turn-off
     ^arg1 <obj>
     ^action-type primitive)
}

sp {action*apply*op_turn-off*execute*create*current-action*topstate
   (state <s> ^problemspace.action.type execute
              ^operator <o>
              ^topstate.interaction.stack.segment <seg>)
   (<o> ^name op_turn-off
        ^arg1 <obj>)
-->
   (<seg> ^current-action <ca>)
   (<ca> ^name turn-off1
         ^execution-op execute-turn-off
         ^arguments.arg1 <obj>)
}

########################## propose wait ########################################
#sp {propose*op_wait*operator
#   (state <s> ^problemspace.action <act>)
#   (<act> -^type none)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_wait
#   	 ^action-type primitive)
#}
#   
#
##################### point #######################################	    	     
# 
## sp {propose*point*object
##    (state <s> ^problemspace.action <act>
##     	      ^object <obj>)
##    (<act> -^type none)
## -->
##    (<s> ^operator <op> +)
##    (<op> ^name op_point-to-object
##    	 ^argument1 <nobj>
## 	 ^action-type primitive)
##    (<nobj> ^argument <obj>)
## }
#   
#
##################### activate #################################
#sp {propose*activate*stove
#   (state <s> ^problemspace.action <act>
# 	      ^object <obj>
#	      ^environment <env>)
#   (<env> ^off <obj>
#   	 ^closed <obj>)
#   (<act> -^type none)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_activate
#   	 ^argument1 <obj>
#	 ^action-type primitive)
#}
#
##################### stop #################################
#sp {propose*stop*stove
#   (state <s> ^problemspace.action <act>
# 	      ^object <obj>
#	      ^environment.on <obj>)
#   (<act> -^type none)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_stop
#   	 ^argument1 <obj>
#	 ^action-type primitive)
#}
