####### propose pick-up for objects #########################################
sp {action*propose*initiate*pickup*object*initiate
   (state <s> ^problemspace.action <act>
              ^world.objects.object <obj>
             -^world.robot.arm.grabbed <any>)
   (<obj> ^predicates.category block1)
   (<act> -^type none)
-->
   (<s> ^operator <op> +)
   (<op> ^name op_pick-up-object 
   	 ^arg1 <obj>
     ^action-type primitive)
}

sp {action*execute*apply*initiate*pickup*create*current-action*topstate
   (state <s> ^problemspace.action.type execute
              ^operator <o>
              ^topstate <top>)
   (<o> ^name op_pick-up-object
        ^arg1 <obj>)
-->
   (<top> ^current-action <ca>)
   (<ca> ^name pick-up1
         ^execution-op execute-pick-up
         ^arg1 <obj>)
}

######### propose put an object in a position #################################
#sp {propose*put-down
#   (state <s> ^problemspace.action <act>
#   	      ^object {<obj> <> <gobj>}
#	      ^environment <env>)
#   (<env> ^grabbed <gobj>)
#   (<act> -^type none)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_put-down-object-location
#   	 ^argument1 <gobj>
#	 ^argument2 <new>
#	 ^action-type primitive)
#   (<new> ^argument <obj>)
#}
#
####################### propose open location #################################
#sp {propose*open*location
#   (state <s> ^problemspace.action <act>
#   	      ^object <obj>
#	      ^environment.closed <obj>)
#   (<act> -^type none)
# -->
#   (<s> ^operator <op> +)
#   (<op> ^name op_open-location
#   	 ^argument1 <obj>
#	 ^action-type primitive)
#}
#
####################### propose close location ##################################
#sp {propose*close*location
#   (state <s> ^problemspace.action <act>
#   	      ^object <obj>
#	      ^environment.open <obj>)
#   (<act> -^type none)
# -->
#   (<s> ^operator <op> +)
#   (<op> ^name op_close-location
#   	 ^argument1 <obj>
#	 ^action-type primitive)
#}
#
########################## propose wait ########################################
#sp {propose*op_wait*operator
#   (state <s> ^problemspace.action <act>)
#   (<act> -^type none)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_wait
#   	 ^action-type primitive)
#}
#   
#
##################### point #######################################	    	     
# 
## sp {propose*point*object
##    (state <s> ^problemspace.action <act>
##     	      ^object <obj>)
##    (<act> -^type none)
## -->
##    (<s> ^operator <op> +)
##    (<op> ^name op_point-to-object
##    	 ^argument1 <nobj>
## 	 ^action-type primitive)
##    (<nobj> ^argument <obj>)
## }
#   
#
##################### activate #################################
#sp {propose*activate*stove
#   (state <s> ^problemspace.action <act>
# 	      ^object <obj>
#	      ^environment <env>)
#   (<env> ^off <obj>
#   	 ^closed <obj>)
#   (<act> -^type none)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_activate
#   	 ^argument1 <obj>
#	 ^action-type primitive)
#}
#
##################### stop #################################
#sp {propose*stop*stove
#   (state <s> ^problemspace.action <act>
# 	      ^object <obj>
#	      ^environment.on <obj>)
#   (<act> -^type none)
#-->
#   (<s> ^operator <op> +)
#   (<op> ^name op_stop
#   	 ^argument1 <obj>
#	 ^action-type primitive)
#}
