sp {action*apply*initiate-go*create*current-action*top-state
   (state <s> ^problem-space.action.type execute
              ^operator <o>
              ^top-state.interaction.stack.segment <seg>)
   (<o> ^name initiate-go1
       -^until-clause
       -^arg2)
-->
   (<seg> ^current-action <ca>)
   (<ca> ^name go1
         ^execution-operator execute-go1
         ^arguments <args>)
}

sp {action*apply*initiate-go*create*current-action*top-state*until-clause
   (state <s> ^problem-space.action.type execute
              ^operator <o>
              ^top-state.interaction.stack.segment <seg>)
   (<o> ^name initiate-go1
        ^until-clause <until>
       -^arg2)
-->
   (<seg> ^current-action <ca>)
   (<ca> ^name go1
         ^execution-operator execute-go1
         ^arguments.until-clause <until>)
}