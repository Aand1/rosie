### this state-no-change occurs multiple times, in a the action, goal-elaboration, and retrospective learning problem-space. the state name is elaborated accordingly

sp {elaborate*indexed-action*state-no-change*known*desired
   (state <s> ^attribute state
   	      ^choices none
	      ^superstate <ss>)
   (<ss> ^name action
         ^action-command <cmd>)
   (<cmd> ^desired <des>)
-->
   (<s> ^name learn-proposal-rule)
}

sp {elaborate*indexed-action*state-no-change*unknown*desired
   (state <s> ^attribute state
   	      ^choices none
	      ^superstate <ss>
	      -^name learn-proposal-rule)
   (<ss> ^name action
         ^action-command <cmd>)
-->
   (<s> ^name learn-desired-elaboration-rule)
}


### elaborate problem-space
sp {elaborate*indexed-action*state-no-change*problem-space
   (state <s> ^name << learn-desired-elaboration-rule learn-proposal-rule >>
   	      ^problem-space <ps>)
-->
   (<ps> ^action <act>
   	 ^learning <l>
	 ^state <st>)
}


sp {elaborate*indexed-action*state-no-change*problem-space*learning
   (state <s> ^name << learn-desired-elaboration-rule learn-proposal-rule >>
   	      ^problem-space.learning <l>
	      ^superstate.problem-space.learning.type <type>)
-->
   (<l> ^type <type>)
}

sp {elaborate*indexed-action*state-no-change*problem-space*state
   (state <s> ^name << learn-desired-elaboration-rule learn-proposal-rule >>
   	      ^problem-space.state <st>
	      ^superstate.problem-space.state.type <type>)
-->
   (<st> ^type <type>)
}

sp {elaborate*indexed-action*state-no-change*problem-space*action
   (state <s> ^name << learn-desired-elaboration-rule  >>
   	      ^problem-space.action <st>
	      ^superstate.problem-space.action.type <type>)
-->
   (<st> ^type <type>)
}

sp {elaborate*indexed-action*state-no-change*problem-space*action*learn-proposal-rule
   (state <s> ^name << learn-proposal-rule  >>
   	      ^problem-space.action <st>
	      ^superstate.problem-space.action.type <type>)
-->
   (<st> ^type project)
}


