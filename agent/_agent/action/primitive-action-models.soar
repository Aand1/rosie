### implement action-model for pick-up 
sp {action*apply*pickup*do*action-model
   (state <s> -^problemspace.action.type << execute none >>
          ^operator <op>)
   (<op> ^name op_pick-up-object
     ^arg1.predicates <preds>)
-->
   (<preds> ^arm-status grabbed)
}

# action model for close
sp {action*apply*putdown*do*action-model
   (state <s> -^problemspace.action.type << execute none >>
               ^operator <o>
               ^world.predicates.predicate <pred>)
   (<o> ^name op_put-down-object
        ^arg1 <obj1>
        ^arg2.arg2 <obj2>
        ^arg2.id.name <pred-name>)
   (<pred> ^name <pred-name>)
#   -{(<pred> ^instance <i2>)
#     (<i2> ^1 <obj1> ^2 <obj2>)}
   (<obj1> ^predicates <obj1-preds>)
-->
   (<pred> ^instance <i>)
   (<i> ^1 <obj1> ^2 <obj2>)
   (<obj1-preds> ^arm-status grabbed -)
}
           
# action model for open
sp {action*apply*open*do*action-model
   (state <s> -^problemspace.action.type << execute none >>
          ^operator <op>)
   (<op> ^name op_open
     ^arg1.predicates <preds>)
-->
   (<preds> ^door closed -
            ^door open)
}

# action model for close
sp {action*apply*close*do*action-model
   (state <s> -^problemspace.action.type << execute none >>
          ^operator <op>)
   (<op> ^name op_close
     ^arg1.predicates <preds>)
-->
   (<preds> ^door open -
            ^door closed)
}

# action model for turn-on
sp {action*apply*turn-on*do*action-model
   (state <s> -^problemspace.action.type << execute none >>
          ^operator <op>)
   (<op> ^name op_turn-on
     ^arg1.predicates <preds>)
-->
   (<preds> ^heat off -
            ^heat on)
}

# action model for turn-off
sp {action*apply*turn-off*do*action-model
   (state <s> -^problemspace.action.type << execute none >>
          ^operator <op>)
   (<op> ^name op_turn-off
     ^arg1.predicates <preds>)
-->
   (<preds> ^heat on -
            ^heat off)
}