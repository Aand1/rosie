sp {generate-action-operator*propose*copy-command-arg
   (state <s> ^name generate-action-operator
              ^command-message <msg>
              ^action-operator <op>)
   (<msg> ^{ <arg-name> << arg1 arg2 relation >> } <arg>)
   (<op> -^<arg-name>)
-->
   (<s> ^operator <o> + =)
   (<o> ^name copy-command-arg
        ^command-arg-name <arg-name>
        ^arg-value <arg>)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*object
   (state <s> ^name generate-action-operator
              ^operator <o> +
              ^top-state <top>)
   (<o> ^name copy-command-arg
        ^command-arg-name arg1
        ^arg-value <obj>)
   (<top> ^world.objects.object <obj>)
-->
   (<o> ^arg-type object
        ^arg-name arg1)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*concept
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^command-arg-name arg1
        ^arg-value.id.name <arg-name>)
-->
   (<o> ^arg-type concept
        ^arg-name arg1)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*predicate
   (state <s> ^name generate-action-operator
              ^operator <o> +)
   (<o> ^name copy-command-arg
        ^command-arg-name { <arg-name> << arg2 relation >>}
        ^arg-value <val>)
-->
   (<o> ^arg-type predicate
        ^arg-name arg2)
}

sp {generate-action-operator*apply*copy-command-arg*copy*object*concept*arg
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name copy-command-arg
        ^arg-name <arg-name>
        ^arg-type { <arg-type> << object concept >> }
        ^arg-value <val>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type <arg-type>
          ^id <val>)
}

sp {generate-action-operator*apply*copy-command-arg*predicate
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-operator <op>)
   (<o> ^name copy-command-arg
        ^arg-name <arg-name>
        ^arg-type predicate
        ^arg-value <val>)
   (<val> ^id <pred-id>
          ^arg2 <obj>)
-->
   (<op> ^<arg-name> <arg>)
   (<arg> ^arg-type predicate
          ^id <pred-id>
          ^2 <obj>)
}


sp {generate-action-operator*apply*copy-command-arg*procedural*arg1
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-id.procedural <proc>)
   (<o> ^name copy-command-arg
        ^arg-name <arg-name>
        ^arg-type { <arg-type> << object concept >> }
        ^arg-value <arg>)
   (<proc> -^<arg-name>)
-->
   (<proc> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type <arg-type>)
   (<s> ^to-store <proc> <new-arg>)
}


sp {generate-action-operator*apply*copy-command-arg*procedural*predicate*arg
   (state <s> ^name generate-action-operator
              ^operator <o>
              ^action-id.procedural <proc>)
   (<o> ^name copy-command-arg
        ^arg-name <arg-name>
        ^arg-type { <arg-type> << predicate >> }
        ^arg-value <arg>)
   (<proc> -^<arg-name>)
-->
   (<proc> ^<arg-name> <new-arg>)
   (<new-arg> ^arg-type <arg-type>
              ^id <new-id>
              ^2 <new-arg2>)
   (<s> ^to-store <proc> <new-arg>)
}
   
